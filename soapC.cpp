/* soapC.cpp
   Generated by gSOAP 2.7.12 from ..\wsdl\websl.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.12 2009-02-03 19:31:30 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_NStrans__Language:
		return soap_in_NStrans__Language(soap, NULL, NULL, "NStrans:Language");
	case SOAP_TYPE_NScurrconv__Currency:
		return soap_in_NScurrconv__Currency(soap, NULL, NULL, "NScurrconv:Currency");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_NSdeath__DeceasedInfo:
		return soap_in_NSdeath__DeceasedInfo(soap, NULL, NULL, "NSdeath:DeceasedInfo");
	case SOAP_TYPE_NScalc__pow:
		return soap_in_NScalc__pow(soap, NULL, NULL, "NScalc:pow");
	case SOAP_TYPE_NScalc__powResponse:
		return soap_in_NScalc__powResponse(soap, NULL, NULL, "NScalc:powResponse");
	case SOAP_TYPE_NScalc__div:
		return soap_in_NScalc__div(soap, NULL, NULL, "NScalc:div");
	case SOAP_TYPE_NScalc__divResponse:
		return soap_in_NScalc__divResponse(soap, NULL, NULL, "NScalc:divResponse");
	case SOAP_TYPE_NScalc__mul:
		return soap_in_NScalc__mul(soap, NULL, NULL, "NScalc:mul");
	case SOAP_TYPE_NScalc__mulResponse:
		return soap_in_NScalc__mulResponse(soap, NULL, NULL, "NScalc:mulResponse");
	case SOAP_TYPE_NScalc__sub:
		return soap_in_NScalc__sub(soap, NULL, NULL, "NScalc:sub");
	case SOAP_TYPE_NScalc__subResponse:
		return soap_in_NScalc__subResponse(soap, NULL, NULL, "NScalc:subResponse");
	case SOAP_TYPE_NScalc__add:
		return soap_in_NScalc__add(soap, NULL, NULL, "NScalc:add");
	case SOAP_TYPE_NScalc__addResponse:
		return soap_in_NScalc__addResponse(soap, NULL, NULL, "NScalc:addResponse");
	case SOAP_TYPE_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse:
		return soap_in_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse(soap, NULL, NULL, "NSdeath:SearchDeceasedInfoReturnDataSetResponse");
	case SOAP_TYPE_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet:
		return soap_in_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(soap, NULL, NULL, "NSdeath:SearchDeceasedInfoReturnDataSet");
	case SOAP_TYPE_PointerTo_NSdeath__DeceasedBySSNResponse:
		return soap_in_PointerTo_NSdeath__DeceasedBySSNResponse(soap, NULL, NULL, "NSdeath:DeceasedBySSNResponse");
	case SOAP_TYPE_PointerTo_NSdeath__DeceasedBySSN:
		return soap_in_PointerTo_NSdeath__DeceasedBySSN(soap, NULL, NULL, "NSdeath:DeceasedBySSN");
	case SOAP_TYPE_PointerTo_NSgmt__gmtResponse:
		return soap_in_PointerTo_NSgmt__gmtResponse(soap, NULL, NULL, "NSgmt:gmtResponse");
	case SOAP_TYPE_PointerTo_NSgmt__gmt:
		return soap_in_PointerTo_NSgmt__gmt(soap, NULL, NULL, "NSgmt:gmt");
	case SOAP_TYPE_PointerTo_NStrans__TranslateResponse:
		return soap_in_PointerTo_NStrans__TranslateResponse(soap, NULL, NULL, "NStrans:TranslateResponse");
	case SOAP_TYPE_PointerTo_NStrans__Translate:
		return soap_in_PointerTo_NStrans__Translate(soap, NULL, NULL, "NStrans:Translate");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForDateRangeResponse:
		return soap_in_PointerTo_NShday__GetHolidaysForDateRangeResponse(soap, NULL, NULL, "NShday:GetHolidaysForDateRangeResponse");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForDateRange:
		return soap_in_PointerTo_NShday__GetHolidaysForDateRange(soap, NULL, NULL, "NShday:GetHolidaysForDateRange");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForMonthResponse:
		return soap_in_PointerTo_NShday__GetHolidaysForMonthResponse(soap, NULL, NULL, "NShday:GetHolidaysForMonthResponse");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForMonth:
		return soap_in_PointerTo_NShday__GetHolidaysForMonth(soap, NULL, NULL, "NShday:GetHolidaysForMonth");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForYearResponse:
		return soap_in_PointerTo_NShday__GetHolidaysForYearResponse(soap, NULL, NULL, "NShday:GetHolidaysForYearResponse");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForYear:
		return soap_in_PointerTo_NShday__GetHolidaysForYear(soap, NULL, NULL, "NShday:GetHolidaysForYear");
	case SOAP_TYPE_PointerTo_NShday__GetHolidayDateResponse:
		return soap_in_PointerTo_NShday__GetHolidayDateResponse(soap, NULL, NULL, "NShday:GetHolidayDateResponse");
	case SOAP_TYPE_PointerTo_NShday__GetHolidayDate:
		return soap_in_PointerTo_NShday__GetHolidayDate(soap, NULL, NULL, "NShday:GetHolidayDate");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysAvailableResponse:
		return soap_in_PointerTo_NShday__GetHolidaysAvailableResponse(soap, NULL, NULL, "NShday:GetHolidaysAvailableResponse");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysAvailable:
		return soap_in_PointerTo_NShday__GetHolidaysAvailable(soap, NULL, NULL, "NShday:GetHolidaysAvailable");
	case SOAP_TYPE_PointerTo_NShday__GetCountriesAvailableResponse:
		return soap_in_PointerTo_NShday__GetCountriesAvailableResponse(soap, NULL, NULL, "NShday:GetCountriesAvailableResponse");
	case SOAP_TYPE_PointerTo_NShday__GetCountriesAvailable:
		return soap_in_PointerTo_NShday__GetCountriesAvailable(soap, NULL, NULL, "NShday:GetCountriesAvailable");
	case SOAP_TYPE_PointerTo_NScurrconv__ConversionRateResponse:
		return soap_in_PointerTo_NScurrconv__ConversionRateResponse(soap, NULL, NULL, "NScurrconv:ConversionRateResponse");
	case SOAP_TYPE_PointerTo_NScurrconv__ConversionRate:
		return soap_in_PointerTo_NScurrconv__ConversionRate(soap, NULL, NULL, "NScurrconv:ConversionRate");
	case SOAP_TYPE_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult:
		return soap_in_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, NULL, NULL, "NSdeath:SearchDeceasedInfoReturnDataSetResponse-SearchDeceasedInfoReturnDataSetResult");
	case SOAP_TYPE_PointerToNSdeath__DeceasedInfo:
		return soap_in_PointerToNSdeath__DeceasedInfo(soap, NULL, NULL, "NSdeath:DeceasedInfo");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult:
		return soap_in_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, NULL, NULL, "NShday:GetHolidaysForDateRangeResponse-GetHolidaysForDateRangeResult");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult:
		return soap_in_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, NULL, NULL, "NShday:GetHolidaysForMonthResponse-GetHolidaysForMonthResult");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult:
		return soap_in_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, NULL, NULL, "NShday:GetHolidaysForYearResponse-GetHolidaysForYearResult");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult:
		return soap_in_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, NULL, NULL, "NShday:GetHolidaysAvailableResponse-GetHolidaysAvailableResult");
	case SOAP_TYPE_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult:
		return soap_in_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, NULL, NULL, "NShday:GetCountriesAvailableResponse-GetCountriesAvailableResult");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTotime:
		return soap_in_PointerTotime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NSdeath:DeceasedInfo"))
		{	*type = SOAP_TYPE_NSdeath__DeceasedInfo;
			return soap_in_NSdeath__DeceasedInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NStrans:Language"))
		{	*type = SOAP_TYPE_NStrans__Language;
			return soap_in_NStrans__Language(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NScurrconv:Currency"))
		{	*type = SOAP_TYPE_NScurrconv__Currency;
			return soap_in_NScurrconv__Currency(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NScalc:pow"))
		{	*type = SOAP_TYPE_NScalc__pow;
			return soap_in_NScalc__pow(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NScalc:powResponse"))
		{	*type = SOAP_TYPE_NScalc__powResponse;
			return soap_in_NScalc__powResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NScalc:div"))
		{	*type = SOAP_TYPE_NScalc__div;
			return soap_in_NScalc__div(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NScalc:divResponse"))
		{	*type = SOAP_TYPE_NScalc__divResponse;
			return soap_in_NScalc__divResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NScalc:mul"))
		{	*type = SOAP_TYPE_NScalc__mul;
			return soap_in_NScalc__mul(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NScalc:mulResponse"))
		{	*type = SOAP_TYPE_NScalc__mulResponse;
			return soap_in_NScalc__mulResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NScalc:sub"))
		{	*type = SOAP_TYPE_NScalc__sub;
			return soap_in_NScalc__sub(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NScalc:subResponse"))
		{	*type = SOAP_TYPE_NScalc__subResponse;
			return soap_in_NScalc__subResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NScalc:add"))
		{	*type = SOAP_TYPE_NScalc__add;
			return soap_in_NScalc__add(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NScalc:addResponse"))
		{	*type = SOAP_TYPE_NScalc__addResponse;
			return soap_in_NScalc__addResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "NSdeath:SearchDeceasedInfoReturnDataSetResponse-SearchDeceasedInfoReturnDataSetResult"))
		{	*type = SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult;
			return soap_in__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetHolidaysForDateRangeResponse-GetHolidaysForDateRangeResult"))
		{	*type = SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult;
			return soap_in__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetHolidaysForMonthResponse-GetHolidaysForMonthResult"))
		{	*type = SOAP_TYPE__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult;
			return soap_in__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetHolidaysForYearResponse-GetHolidaysForYearResult"))
		{	*type = SOAP_TYPE__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult;
			return soap_in__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetHolidaysAvailableResponse-GetHolidaysAvailableResult"))
		{	*type = SOAP_TYPE__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult;
			return soap_in__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetCountriesAvailableResponse-GetCountriesAvailableResult"))
		{	*type = SOAP_TYPE__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult;
			return soap_in__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NSdeath:DataSet"))
		{	*type = SOAP_TYPE__NSdeath__DataSet;
			return soap_in__NSdeath__DataSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NSdeath:SearchDeceasedInfoReturnDataSetResponse"))
		{	*type = SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse;
			return soap_in__NSdeath__SearchDeceasedInfoReturnDataSetResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NSdeath:SearchDeceasedInfoReturnDataSet"))
		{	*type = SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSet;
			return soap_in__NSdeath__SearchDeceasedInfoReturnDataSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NSdeath:DeceasedBySSNResponse"))
		{	*type = SOAP_TYPE__NSdeath__DeceasedBySSNResponse;
			return soap_in__NSdeath__DeceasedBySSNResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NSdeath:DeceasedBySSN"))
		{	*type = SOAP_TYPE__NSdeath__DeceasedBySSN;
			return soap_in__NSdeath__DeceasedBySSN(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:DataSet"))
		{	*type = SOAP_TYPE__NShday__DataSet;
			return soap_in__NShday__DataSet(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetHolidaysForDateRangeResponse"))
		{	*type = SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse;
			return soap_in__NShday__GetHolidaysForDateRangeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetHolidaysForDateRange"))
		{	*type = SOAP_TYPE__NShday__GetHolidaysForDateRange;
			return soap_in__NShday__GetHolidaysForDateRange(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetHolidaysForMonthResponse"))
		{	*type = SOAP_TYPE__NShday__GetHolidaysForMonthResponse;
			return soap_in__NShday__GetHolidaysForMonthResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetHolidaysForMonth"))
		{	*type = SOAP_TYPE__NShday__GetHolidaysForMonth;
			return soap_in__NShday__GetHolidaysForMonth(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetHolidaysForYearResponse"))
		{	*type = SOAP_TYPE__NShday__GetHolidaysForYearResponse;
			return soap_in__NShday__GetHolidaysForYearResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetHolidaysForYear"))
		{	*type = SOAP_TYPE__NShday__GetHolidaysForYear;
			return soap_in__NShday__GetHolidaysForYear(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetHolidayDateResponse"))
		{	*type = SOAP_TYPE__NShday__GetHolidayDateResponse;
			return soap_in__NShday__GetHolidayDateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetHolidayDate"))
		{	*type = SOAP_TYPE__NShday__GetHolidayDate;
			return soap_in__NShday__GetHolidayDate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetHolidaysAvailableResponse"))
		{	*type = SOAP_TYPE__NShday__GetHolidaysAvailableResponse;
			return soap_in__NShday__GetHolidaysAvailableResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetHolidaysAvailable"))
		{	*type = SOAP_TYPE__NShday__GetHolidaysAvailable;
			return soap_in__NShday__GetHolidaysAvailable(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetCountriesAvailableResponse"))
		{	*type = SOAP_TYPE__NShday__GetCountriesAvailableResponse;
			return soap_in__NShday__GetCountriesAvailableResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NShday:GetCountriesAvailable"))
		{	*type = SOAP_TYPE__NShday__GetCountriesAvailable;
			return soap_in__NShday__GetCountriesAvailable(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NStrans:TranslateResponse"))
		{	*type = SOAP_TYPE__NStrans__TranslateResponse;
			return soap_in__NStrans__TranslateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NStrans:Translate"))
		{	*type = SOAP_TYPE__NStrans__Translate;
			return soap_in__NStrans__Translate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NScurrconv:ConversionRateResponse"))
		{	*type = SOAP_TYPE__NScurrconv__ConversionRateResponse;
			return soap_in__NScurrconv__ConversionRateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NScurrconv:ConversionRate"))
		{	*type = SOAP_TYPE__NScurrconv__ConversionRate;
			return soap_in__NScurrconv__ConversionRate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NSgmt:gmtResponse"))
		{	*type = SOAP_TYPE__NSgmt__gmtResponse;
			return soap_in__NSgmt__gmtResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "NSgmt:gmt"))
		{	*type = SOAP_TYPE__NSgmt__gmt;
			return soap_in__NSgmt__gmt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:schema"))
		{	char **s;
			*type = SOAP_TYPE__xsd__schema;
			s = soap_in__xsd__schema(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_NStrans__Language:
		return soap_out_NStrans__Language(soap, tag, id, (const enum NStrans__Language *)ptr, "NStrans:Language");
	case SOAP_TYPE_NScurrconv__Currency:
		return soap_out_NScurrconv__Currency(soap, tag, id, (const enum NScurrconv__Currency *)ptr, "NScurrconv:Currency");
	case SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult:
		return ((_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *)ptr)->soap_out(soap, "NSdeath:SearchDeceasedInfoReturnDataSetResponse-SearchDeceasedInfoReturnDataSetResult", id, NULL);
	case SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult:
		return ((_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *)ptr)->soap_out(soap, "NShday:GetHolidaysForDateRangeResponse-GetHolidaysForDateRangeResult", id, NULL);
	case SOAP_TYPE__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult:
		return ((_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *)ptr)->soap_out(soap, "NShday:GetHolidaysForMonthResponse-GetHolidaysForMonthResult", id, NULL);
	case SOAP_TYPE__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult:
		return ((_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *)ptr)->soap_out(soap, "NShday:GetHolidaysForYearResponse-GetHolidaysForYearResult", id, NULL);
	case SOAP_TYPE__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult:
		return ((_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *)ptr)->soap_out(soap, "NShday:GetHolidaysAvailableResponse-GetHolidaysAvailableResult", id, NULL);
	case SOAP_TYPE__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult:
		return ((_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *)ptr)->soap_out(soap, "NShday:GetCountriesAvailableResponse-GetCountriesAvailableResult", id, NULL);
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__NSdeath__DataSet:
		return ((_NSdeath__DataSet *)ptr)->soap_out(soap, "NSdeath:DataSet", id, NULL);
	case SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse:
		return ((_NSdeath__SearchDeceasedInfoReturnDataSetResponse *)ptr)->soap_out(soap, "NSdeath:SearchDeceasedInfoReturnDataSetResponse", id, NULL);
	case SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSet:
		return ((_NSdeath__SearchDeceasedInfoReturnDataSet *)ptr)->soap_out(soap, "NSdeath:SearchDeceasedInfoReturnDataSet", id, NULL);
	case SOAP_TYPE__NSdeath__DeceasedBySSNResponse:
		return ((_NSdeath__DeceasedBySSNResponse *)ptr)->soap_out(soap, "NSdeath:DeceasedBySSNResponse", id, NULL);
	case SOAP_TYPE__NSdeath__DeceasedBySSN:
		return ((_NSdeath__DeceasedBySSN *)ptr)->soap_out(soap, "NSdeath:DeceasedBySSN", id, NULL);
	case SOAP_TYPE_NSdeath__DeceasedInfo:
		return ((NSdeath__DeceasedInfo *)ptr)->soap_out(soap, tag, id, "NSdeath:DeceasedInfo");
	case SOAP_TYPE__NShday__DataSet:
		return ((_NShday__DataSet *)ptr)->soap_out(soap, "NShday:DataSet", id, NULL);
	case SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse:
		return ((_NShday__GetHolidaysForDateRangeResponse *)ptr)->soap_out(soap, "NShday:GetHolidaysForDateRangeResponse", id, NULL);
	case SOAP_TYPE__NShday__GetHolidaysForDateRange:
		return ((_NShday__GetHolidaysForDateRange *)ptr)->soap_out(soap, "NShday:GetHolidaysForDateRange", id, NULL);
	case SOAP_TYPE__NShday__GetHolidaysForMonthResponse:
		return ((_NShday__GetHolidaysForMonthResponse *)ptr)->soap_out(soap, "NShday:GetHolidaysForMonthResponse", id, NULL);
	case SOAP_TYPE__NShday__GetHolidaysForMonth:
		return ((_NShday__GetHolidaysForMonth *)ptr)->soap_out(soap, "NShday:GetHolidaysForMonth", id, NULL);
	case SOAP_TYPE__NShday__GetHolidaysForYearResponse:
		return ((_NShday__GetHolidaysForYearResponse *)ptr)->soap_out(soap, "NShday:GetHolidaysForYearResponse", id, NULL);
	case SOAP_TYPE__NShday__GetHolidaysForYear:
		return ((_NShday__GetHolidaysForYear *)ptr)->soap_out(soap, "NShday:GetHolidaysForYear", id, NULL);
	case SOAP_TYPE__NShday__GetHolidayDateResponse:
		return ((_NShday__GetHolidayDateResponse *)ptr)->soap_out(soap, "NShday:GetHolidayDateResponse", id, NULL);
	case SOAP_TYPE__NShday__GetHolidayDate:
		return ((_NShday__GetHolidayDate *)ptr)->soap_out(soap, "NShday:GetHolidayDate", id, NULL);
	case SOAP_TYPE__NShday__GetHolidaysAvailableResponse:
		return ((_NShday__GetHolidaysAvailableResponse *)ptr)->soap_out(soap, "NShday:GetHolidaysAvailableResponse", id, NULL);
	case SOAP_TYPE__NShday__GetHolidaysAvailable:
		return ((_NShday__GetHolidaysAvailable *)ptr)->soap_out(soap, "NShday:GetHolidaysAvailable", id, NULL);
	case SOAP_TYPE__NShday__GetCountriesAvailableResponse:
		return ((_NShday__GetCountriesAvailableResponse *)ptr)->soap_out(soap, "NShday:GetCountriesAvailableResponse", id, NULL);
	case SOAP_TYPE__NShday__GetCountriesAvailable:
		return ((_NShday__GetCountriesAvailable *)ptr)->soap_out(soap, "NShday:GetCountriesAvailable", id, NULL);
	case SOAP_TYPE__NStrans__TranslateResponse:
		return ((_NStrans__TranslateResponse *)ptr)->soap_out(soap, "NStrans:TranslateResponse", id, NULL);
	case SOAP_TYPE__NStrans__Translate:
		return ((_NStrans__Translate *)ptr)->soap_out(soap, "NStrans:Translate", id, NULL);
	case SOAP_TYPE__NScurrconv__ConversionRateResponse:
		return ((_NScurrconv__ConversionRateResponse *)ptr)->soap_out(soap, "NScurrconv:ConversionRateResponse", id, NULL);
	case SOAP_TYPE__NScurrconv__ConversionRate:
		return ((_NScurrconv__ConversionRate *)ptr)->soap_out(soap, "NScurrconv:ConversionRate", id, NULL);
	case SOAP_TYPE__NSgmt__gmtResponse:
		return ((_NSgmt__gmtResponse *)ptr)->soap_out(soap, "NSgmt:gmtResponse", id, NULL);
	case SOAP_TYPE__NSgmt__gmt:
		return ((_NSgmt__gmt *)ptr)->soap_out(soap, "NSgmt:gmt", id, NULL);
	case SOAP_TYPE_NScalc__pow:
		return soap_out_NScalc__pow(soap, tag, id, (const struct NScalc__pow *)ptr, "NScalc:pow");
	case SOAP_TYPE_NScalc__powResponse:
		return soap_out_NScalc__powResponse(soap, tag, id, (const struct NScalc__powResponse *)ptr, "NScalc:powResponse");
	case SOAP_TYPE_NScalc__div:
		return soap_out_NScalc__div(soap, tag, id, (const struct NScalc__div *)ptr, "NScalc:div");
	case SOAP_TYPE_NScalc__divResponse:
		return soap_out_NScalc__divResponse(soap, tag, id, (const struct NScalc__divResponse *)ptr, "NScalc:divResponse");
	case SOAP_TYPE_NScalc__mul:
		return soap_out_NScalc__mul(soap, tag, id, (const struct NScalc__mul *)ptr, "NScalc:mul");
	case SOAP_TYPE_NScalc__mulResponse:
		return soap_out_NScalc__mulResponse(soap, tag, id, (const struct NScalc__mulResponse *)ptr, "NScalc:mulResponse");
	case SOAP_TYPE_NScalc__sub:
		return soap_out_NScalc__sub(soap, tag, id, (const struct NScalc__sub *)ptr, "NScalc:sub");
	case SOAP_TYPE_NScalc__subResponse:
		return soap_out_NScalc__subResponse(soap, tag, id, (const struct NScalc__subResponse *)ptr, "NScalc:subResponse");
	case SOAP_TYPE_NScalc__add:
		return soap_out_NScalc__add(soap, tag, id, (const struct NScalc__add *)ptr, "NScalc:add");
	case SOAP_TYPE_NScalc__addResponse:
		return soap_out_NScalc__addResponse(soap, tag, id, (const struct NScalc__addResponse *)ptr, "NScalc:addResponse");
	case SOAP_TYPE_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse:
		return soap_out_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse(soap, tag, id, (_NSdeath__SearchDeceasedInfoReturnDataSetResponse *const*)ptr, "NSdeath:SearchDeceasedInfoReturnDataSetResponse");
	case SOAP_TYPE_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet:
		return soap_out_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(soap, tag, id, (_NSdeath__SearchDeceasedInfoReturnDataSet *const*)ptr, "NSdeath:SearchDeceasedInfoReturnDataSet");
	case SOAP_TYPE_PointerTo_NSdeath__DeceasedBySSNResponse:
		return soap_out_PointerTo_NSdeath__DeceasedBySSNResponse(soap, tag, id, (_NSdeath__DeceasedBySSNResponse *const*)ptr, "NSdeath:DeceasedBySSNResponse");
	case SOAP_TYPE_PointerTo_NSdeath__DeceasedBySSN:
		return soap_out_PointerTo_NSdeath__DeceasedBySSN(soap, tag, id, (_NSdeath__DeceasedBySSN *const*)ptr, "NSdeath:DeceasedBySSN");
	case SOAP_TYPE_PointerTo_NSgmt__gmtResponse:
		return soap_out_PointerTo_NSgmt__gmtResponse(soap, tag, id, (_NSgmt__gmtResponse *const*)ptr, "NSgmt:gmtResponse");
	case SOAP_TYPE_PointerTo_NSgmt__gmt:
		return soap_out_PointerTo_NSgmt__gmt(soap, tag, id, (_NSgmt__gmt *const*)ptr, "NSgmt:gmt");
	case SOAP_TYPE_PointerTo_NStrans__TranslateResponse:
		return soap_out_PointerTo_NStrans__TranslateResponse(soap, tag, id, (_NStrans__TranslateResponse *const*)ptr, "NStrans:TranslateResponse");
	case SOAP_TYPE_PointerTo_NStrans__Translate:
		return soap_out_PointerTo_NStrans__Translate(soap, tag, id, (_NStrans__Translate *const*)ptr, "NStrans:Translate");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForDateRangeResponse:
		return soap_out_PointerTo_NShday__GetHolidaysForDateRangeResponse(soap, tag, id, (_NShday__GetHolidaysForDateRangeResponse *const*)ptr, "NShday:GetHolidaysForDateRangeResponse");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForDateRange:
		return soap_out_PointerTo_NShday__GetHolidaysForDateRange(soap, tag, id, (_NShday__GetHolidaysForDateRange *const*)ptr, "NShday:GetHolidaysForDateRange");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForMonthResponse:
		return soap_out_PointerTo_NShday__GetHolidaysForMonthResponse(soap, tag, id, (_NShday__GetHolidaysForMonthResponse *const*)ptr, "NShday:GetHolidaysForMonthResponse");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForMonth:
		return soap_out_PointerTo_NShday__GetHolidaysForMonth(soap, tag, id, (_NShday__GetHolidaysForMonth *const*)ptr, "NShday:GetHolidaysForMonth");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForYearResponse:
		return soap_out_PointerTo_NShday__GetHolidaysForYearResponse(soap, tag, id, (_NShday__GetHolidaysForYearResponse *const*)ptr, "NShday:GetHolidaysForYearResponse");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForYear:
		return soap_out_PointerTo_NShday__GetHolidaysForYear(soap, tag, id, (_NShday__GetHolidaysForYear *const*)ptr, "NShday:GetHolidaysForYear");
	case SOAP_TYPE_PointerTo_NShday__GetHolidayDateResponse:
		return soap_out_PointerTo_NShday__GetHolidayDateResponse(soap, tag, id, (_NShday__GetHolidayDateResponse *const*)ptr, "NShday:GetHolidayDateResponse");
	case SOAP_TYPE_PointerTo_NShday__GetHolidayDate:
		return soap_out_PointerTo_NShday__GetHolidayDate(soap, tag, id, (_NShday__GetHolidayDate *const*)ptr, "NShday:GetHolidayDate");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysAvailableResponse:
		return soap_out_PointerTo_NShday__GetHolidaysAvailableResponse(soap, tag, id, (_NShday__GetHolidaysAvailableResponse *const*)ptr, "NShday:GetHolidaysAvailableResponse");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysAvailable:
		return soap_out_PointerTo_NShday__GetHolidaysAvailable(soap, tag, id, (_NShday__GetHolidaysAvailable *const*)ptr, "NShday:GetHolidaysAvailable");
	case SOAP_TYPE_PointerTo_NShday__GetCountriesAvailableResponse:
		return soap_out_PointerTo_NShday__GetCountriesAvailableResponse(soap, tag, id, (_NShday__GetCountriesAvailableResponse *const*)ptr, "NShday:GetCountriesAvailableResponse");
	case SOAP_TYPE_PointerTo_NShday__GetCountriesAvailable:
		return soap_out_PointerTo_NShday__GetCountriesAvailable(soap, tag, id, (_NShday__GetCountriesAvailable *const*)ptr, "NShday:GetCountriesAvailable");
	case SOAP_TYPE_PointerTo_NScurrconv__ConversionRateResponse:
		return soap_out_PointerTo_NScurrconv__ConversionRateResponse(soap, tag, id, (_NScurrconv__ConversionRateResponse *const*)ptr, "NScurrconv:ConversionRateResponse");
	case SOAP_TYPE_PointerTo_NScurrconv__ConversionRate:
		return soap_out_PointerTo_NScurrconv__ConversionRate(soap, tag, id, (_NScurrconv__ConversionRate *const*)ptr, "NScurrconv:ConversionRate");
	case SOAP_TYPE_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult:
		return soap_out_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, tag, id, (_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *const*)ptr, "NSdeath:SearchDeceasedInfoReturnDataSetResponse-SearchDeceasedInfoReturnDataSetResult");
	case SOAP_TYPE_PointerToNSdeath__DeceasedInfo:
		return soap_out_PointerToNSdeath__DeceasedInfo(soap, tag, id, (NSdeath__DeceasedInfo *const*)ptr, "NSdeath:DeceasedInfo");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult:
		return soap_out_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, tag, id, (_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *const*)ptr, "NShday:GetHolidaysForDateRangeResponse-GetHolidaysForDateRangeResult");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult:
		return soap_out_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, tag, id, (_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *const*)ptr, "NShday:GetHolidaysForMonthResponse-GetHolidaysForMonthResult");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult:
		return soap_out_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, tag, id, (_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *const*)ptr, "NShday:GetHolidaysForYearResponse-GetHolidaysForYearResult");
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult:
		return soap_out_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, tag, id, (_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *const*)ptr, "NShday:GetHolidaysAvailableResponse-GetHolidaysAvailableResult");
	case SOAP_TYPE_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult:
		return soap_out_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, tag, id, (_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *const*)ptr, "NShday:GetCountriesAvailableResponse-GetCountriesAvailableResult");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTotime:
		return soap_out_PointerTotime(soap, tag, id, (time_t *const*)ptr, "xsd:dateTime");
	case SOAP_TYPE__xsd__schema:
		return soap_out_string(soap, "xsd:schema", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult:
		((_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult:
		((_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult:
		((_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult:
		((_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult:
		((_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult:
		((_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__NSdeath__DataSet:
		((_NSdeath__DataSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse:
		((_NSdeath__SearchDeceasedInfoReturnDataSetResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSet:
		((_NSdeath__SearchDeceasedInfoReturnDataSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NSdeath__DeceasedBySSNResponse:
		((_NSdeath__DeceasedBySSNResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NSdeath__DeceasedBySSN:
		((_NSdeath__DeceasedBySSN *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_NSdeath__DeceasedInfo:
		((NSdeath__DeceasedInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__DataSet:
		((_NShday__DataSet *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse:
		((_NShday__GetHolidaysForDateRangeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetHolidaysForDateRange:
		((_NShday__GetHolidaysForDateRange *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetHolidaysForMonthResponse:
		((_NShday__GetHolidaysForMonthResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetHolidaysForMonth:
		((_NShday__GetHolidaysForMonth *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetHolidaysForYearResponse:
		((_NShday__GetHolidaysForYearResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetHolidaysForYear:
		((_NShday__GetHolidaysForYear *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetHolidayDateResponse:
		((_NShday__GetHolidayDateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetHolidayDate:
		((_NShday__GetHolidayDate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetHolidaysAvailableResponse:
		((_NShday__GetHolidaysAvailableResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetHolidaysAvailable:
		((_NShday__GetHolidaysAvailable *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetCountriesAvailableResponse:
		((_NShday__GetCountriesAvailableResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NShday__GetCountriesAvailable:
		((_NShday__GetCountriesAvailable *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NStrans__TranslateResponse:
		((_NStrans__TranslateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NStrans__Translate:
		((_NStrans__Translate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NScurrconv__ConversionRateResponse:
		((_NScurrconv__ConversionRateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NScurrconv__ConversionRate:
		((_NScurrconv__ConversionRate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NSgmt__gmtResponse:
		((_NSgmt__gmtResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__NSgmt__gmt:
		((_NSgmt__gmt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns3__SearchDeceasedInfoReturnDataSet:
		soap_serialize___ns3__SearchDeceasedInfoReturnDataSet(soap, (const struct __ns3__SearchDeceasedInfoReturnDataSet *)ptr);
		break;
	case SOAP_TYPE___ns3__DeceasedBySSN:
		soap_serialize___ns3__DeceasedBySSN(soap, (const struct __ns3__DeceasedBySSN *)ptr);
		break;
	case SOAP_TYPE___ns2__SearchDeceasedInfoReturnDataSet:
		soap_serialize___ns2__SearchDeceasedInfoReturnDataSet(soap, (const struct __ns2__SearchDeceasedInfoReturnDataSet *)ptr);
		break;
	case SOAP_TYPE___ns2__DeceasedBySSN:
		soap_serialize___ns2__DeceasedBySSN(soap, (const struct __ns2__DeceasedBySSN *)ptr);
		break;
	case SOAP_TYPE___ns1__gmt:
		soap_serialize___ns1__gmt(soap, (const struct __ns1__gmt *)ptr);
		break;
	case SOAP_TYPE___NStrans__Translate:
		soap_serialize___NStrans__Translate(soap, (const struct __NStrans__Translate *)ptr);
		break;
	case SOAP_TYPE___NShday__GetHolidaysForDateRange:
		soap_serialize___NShday__GetHolidaysForDateRange(soap, (const struct __NShday__GetHolidaysForDateRange *)ptr);
		break;
	case SOAP_TYPE___NShday__GetHolidaysForMonth:
		soap_serialize___NShday__GetHolidaysForMonth(soap, (const struct __NShday__GetHolidaysForMonth *)ptr);
		break;
	case SOAP_TYPE___NShday__GetHolidaysForYear:
		soap_serialize___NShday__GetHolidaysForYear(soap, (const struct __NShday__GetHolidaysForYear *)ptr);
		break;
	case SOAP_TYPE___NShday__GetHolidayDate:
		soap_serialize___NShday__GetHolidayDate(soap, (const struct __NShday__GetHolidayDate *)ptr);
		break;
	case SOAP_TYPE___NShday__GetHolidaysAvailable:
		soap_serialize___NShday__GetHolidaysAvailable(soap, (const struct __NShday__GetHolidaysAvailable *)ptr);
		break;
	case SOAP_TYPE___NShday__GetCountriesAvailable:
		soap_serialize___NShday__GetCountriesAvailable(soap, (const struct __NShday__GetCountriesAvailable *)ptr);
		break;
	case SOAP_TYPE___NScurrconv__ConversionRate:
		soap_serialize___NScurrconv__ConversionRate(soap, (const struct __NScurrconv__ConversionRate *)ptr);
		break;
	case SOAP_TYPE_NScalc__pow:
		soap_serialize_NScalc__pow(soap, (const struct NScalc__pow *)ptr);
		break;
	case SOAP_TYPE_NScalc__powResponse:
		soap_serialize_NScalc__powResponse(soap, (const struct NScalc__powResponse *)ptr);
		break;
	case SOAP_TYPE_NScalc__div:
		soap_serialize_NScalc__div(soap, (const struct NScalc__div *)ptr);
		break;
	case SOAP_TYPE_NScalc__divResponse:
		soap_serialize_NScalc__divResponse(soap, (const struct NScalc__divResponse *)ptr);
		break;
	case SOAP_TYPE_NScalc__mul:
		soap_serialize_NScalc__mul(soap, (const struct NScalc__mul *)ptr);
		break;
	case SOAP_TYPE_NScalc__mulResponse:
		soap_serialize_NScalc__mulResponse(soap, (const struct NScalc__mulResponse *)ptr);
		break;
	case SOAP_TYPE_NScalc__sub:
		soap_serialize_NScalc__sub(soap, (const struct NScalc__sub *)ptr);
		break;
	case SOAP_TYPE_NScalc__subResponse:
		soap_serialize_NScalc__subResponse(soap, (const struct NScalc__subResponse *)ptr);
		break;
	case SOAP_TYPE_NScalc__add:
		soap_serialize_NScalc__add(soap, (const struct NScalc__add *)ptr);
		break;
	case SOAP_TYPE_NScalc__addResponse:
		soap_serialize_NScalc__addResponse(soap, (const struct NScalc__addResponse *)ptr);
		break;
	case SOAP_TYPE_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse:
		soap_serialize_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse(soap, (_NSdeath__SearchDeceasedInfoReturnDataSetResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet:
		soap_serialize_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(soap, (_NSdeath__SearchDeceasedInfoReturnDataSet *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NSdeath__DeceasedBySSNResponse:
		soap_serialize_PointerTo_NSdeath__DeceasedBySSNResponse(soap, (_NSdeath__DeceasedBySSNResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NSdeath__DeceasedBySSN:
		soap_serialize_PointerTo_NSdeath__DeceasedBySSN(soap, (_NSdeath__DeceasedBySSN *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NSgmt__gmtResponse:
		soap_serialize_PointerTo_NSgmt__gmtResponse(soap, (_NSgmt__gmtResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NSgmt__gmt:
		soap_serialize_PointerTo_NSgmt__gmt(soap, (_NSgmt__gmt *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NStrans__TranslateResponse:
		soap_serialize_PointerTo_NStrans__TranslateResponse(soap, (_NStrans__TranslateResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NStrans__Translate:
		soap_serialize_PointerTo_NStrans__Translate(soap, (_NStrans__Translate *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForDateRangeResponse:
		soap_serialize_PointerTo_NShday__GetHolidaysForDateRangeResponse(soap, (_NShday__GetHolidaysForDateRangeResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForDateRange:
		soap_serialize_PointerTo_NShday__GetHolidaysForDateRange(soap, (_NShday__GetHolidaysForDateRange *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForMonthResponse:
		soap_serialize_PointerTo_NShday__GetHolidaysForMonthResponse(soap, (_NShday__GetHolidaysForMonthResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForMonth:
		soap_serialize_PointerTo_NShday__GetHolidaysForMonth(soap, (_NShday__GetHolidaysForMonth *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForYearResponse:
		soap_serialize_PointerTo_NShday__GetHolidaysForYearResponse(soap, (_NShday__GetHolidaysForYearResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForYear:
		soap_serialize_PointerTo_NShday__GetHolidaysForYear(soap, (_NShday__GetHolidaysForYear *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetHolidayDateResponse:
		soap_serialize_PointerTo_NShday__GetHolidayDateResponse(soap, (_NShday__GetHolidayDateResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetHolidayDate:
		soap_serialize_PointerTo_NShday__GetHolidayDate(soap, (_NShday__GetHolidayDate *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysAvailableResponse:
		soap_serialize_PointerTo_NShday__GetHolidaysAvailableResponse(soap, (_NShday__GetHolidaysAvailableResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysAvailable:
		soap_serialize_PointerTo_NShday__GetHolidaysAvailable(soap, (_NShday__GetHolidaysAvailable *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetCountriesAvailableResponse:
		soap_serialize_PointerTo_NShday__GetCountriesAvailableResponse(soap, (_NShday__GetCountriesAvailableResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetCountriesAvailable:
		soap_serialize_PointerTo_NShday__GetCountriesAvailable(soap, (_NShday__GetCountriesAvailable *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NScurrconv__ConversionRateResponse:
		soap_serialize_PointerTo_NScurrconv__ConversionRateResponse(soap, (_NScurrconv__ConversionRateResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NScurrconv__ConversionRate:
		soap_serialize_PointerTo_NScurrconv__ConversionRate(soap, (_NScurrconv__ConversionRate *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult:
		soap_serialize_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, (_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerToNSdeath__DeceasedInfo:
		soap_serialize_PointerToNSdeath__DeceasedInfo(soap, (NSdeath__DeceasedInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult:
		soap_serialize_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, (_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult:
		soap_serialize_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, (_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult:
		soap_serialize_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, (_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult:
		soap_serialize_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, (_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult:
		soap_serialize_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, (_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTotime:
		soap_serialize_PointerTotime(soap, (time_t *const*)ptr);
		break;
	case SOAP_TYPE__xsd__schema:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE__NSgmt__gmt:
		return (void*)soap_instantiate__NSgmt__gmt(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NSgmt__gmtResponse:
		return (void*)soap_instantiate__NSgmt__gmtResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NScurrconv__ConversionRate:
		return (void*)soap_instantiate__NScurrconv__ConversionRate(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NScurrconv__ConversionRateResponse:
		return (void*)soap_instantiate__NScurrconv__ConversionRateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NStrans__Translate:
		return (void*)soap_instantiate__NStrans__Translate(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NStrans__TranslateResponse:
		return (void*)soap_instantiate__NStrans__TranslateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetCountriesAvailable:
		return (void*)soap_instantiate__NShday__GetCountriesAvailable(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult:
		return (void*)soap_instantiate__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetCountriesAvailableResponse:
		return (void*)soap_instantiate__NShday__GetCountriesAvailableResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetHolidaysAvailable:
		return (void*)soap_instantiate__NShday__GetHolidaysAvailable(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult:
		return (void*)soap_instantiate__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetHolidaysAvailableResponse:
		return (void*)soap_instantiate__NShday__GetHolidaysAvailableResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetHolidayDate:
		return (void*)soap_instantiate__NShday__GetHolidayDate(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetHolidayDateResponse:
		return (void*)soap_instantiate__NShday__GetHolidayDateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetHolidaysForYear:
		return (void*)soap_instantiate__NShday__GetHolidaysForYear(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult:
		return (void*)soap_instantiate__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetHolidaysForYearResponse:
		return (void*)soap_instantiate__NShday__GetHolidaysForYearResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetHolidaysForMonth:
		return (void*)soap_instantiate__NShday__GetHolidaysForMonth(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult:
		return (void*)soap_instantiate__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetHolidaysForMonthResponse:
		return (void*)soap_instantiate__NShday__GetHolidaysForMonthResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetHolidaysForDateRange:
		return (void*)soap_instantiate__NShday__GetHolidaysForDateRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult:
		return (void*)soap_instantiate__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse:
		return (void*)soap_instantiate__NShday__GetHolidaysForDateRangeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NShday__DataSet:
		return (void*)soap_instantiate__NShday__DataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE_NSdeath__DeceasedInfo:
		return (void*)soap_instantiate_NSdeath__DeceasedInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NSdeath__DeceasedBySSN:
		return (void*)soap_instantiate__NSdeath__DeceasedBySSN(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NSdeath__DeceasedBySSNResponse:
		return (void*)soap_instantiate__NSdeath__DeceasedBySSNResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSet:
		return (void*)soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult:
		return (void*)soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse:
		return (void*)soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSetResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__NSdeath__DataSet:
		return (void*)soap_instantiate__NSdeath__DataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE_NScalc__addResponse:
		return (void*)soap_instantiate_NScalc__addResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_NScalc__add:
		return (void*)soap_instantiate_NScalc__add(soap, -1, type, arrayType, n);
	case SOAP_TYPE_NScalc__subResponse:
		return (void*)soap_instantiate_NScalc__subResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_NScalc__sub:
		return (void*)soap_instantiate_NScalc__sub(soap, -1, type, arrayType, n);
	case SOAP_TYPE_NScalc__mulResponse:
		return (void*)soap_instantiate_NScalc__mulResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_NScalc__mul:
		return (void*)soap_instantiate_NScalc__mul(soap, -1, type, arrayType, n);
	case SOAP_TYPE_NScalc__divResponse:
		return (void*)soap_instantiate_NScalc__divResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_NScalc__div:
		return (void*)soap_instantiate_NScalc__div(soap, -1, type, arrayType, n);
	case SOAP_TYPE_NScalc__powResponse:
		return (void*)soap_instantiate_NScalc__powResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_NScalc__pow:
		return (void*)soap_instantiate_NScalc__pow(soap, -1, type, arrayType, n);
	case SOAP_TYPE___NScurrconv__ConversionRate:
		return (void*)soap_instantiate___NScurrconv__ConversionRate(soap, -1, type, arrayType, n);
	case SOAP_TYPE___NShday__GetCountriesAvailable:
		return (void*)soap_instantiate___NShday__GetCountriesAvailable(soap, -1, type, arrayType, n);
	case SOAP_TYPE___NShday__GetHolidaysAvailable:
		return (void*)soap_instantiate___NShday__GetHolidaysAvailable(soap, -1, type, arrayType, n);
	case SOAP_TYPE___NShday__GetHolidayDate:
		return (void*)soap_instantiate___NShday__GetHolidayDate(soap, -1, type, arrayType, n);
	case SOAP_TYPE___NShday__GetHolidaysForYear:
		return (void*)soap_instantiate___NShday__GetHolidaysForYear(soap, -1, type, arrayType, n);
	case SOAP_TYPE___NShday__GetHolidaysForMonth:
		return (void*)soap_instantiate___NShday__GetHolidaysForMonth(soap, -1, type, arrayType, n);
	case SOAP_TYPE___NShday__GetHolidaysForDateRange:
		return (void*)soap_instantiate___NShday__GetHolidaysForDateRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE___NStrans__Translate:
		return (void*)soap_instantiate___NStrans__Translate(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__gmt:
		return (void*)soap_instantiate___ns1__gmt(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__DeceasedBySSN:
		return (void*)soap_instantiate___ns2__DeceasedBySSN(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__SearchDeceasedInfoReturnDataSet:
		return (void*)soap_instantiate___ns2__SearchDeceasedInfoReturnDataSet(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__DeceasedBySSN:
		return (void*)soap_instantiate___ns3__DeceasedBySSN(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__SearchDeceasedInfoReturnDataSet:
		return (void*)soap_instantiate___ns3__SearchDeceasedInfoReturnDataSet(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE__NSgmt__gmt:
		if (p->size < 0)
			delete (_NSgmt__gmt*)p->ptr;
		else
			delete[] (_NSgmt__gmt*)p->ptr;
		break;
	case SOAP_TYPE__NSgmt__gmtResponse:
		if (p->size < 0)
			delete (_NSgmt__gmtResponse*)p->ptr;
		else
			delete[] (_NSgmt__gmtResponse*)p->ptr;
		break;
	case SOAP_TYPE__NScurrconv__ConversionRate:
		if (p->size < 0)
			delete (_NScurrconv__ConversionRate*)p->ptr;
		else
			delete[] (_NScurrconv__ConversionRate*)p->ptr;
		break;
	case SOAP_TYPE__NScurrconv__ConversionRateResponse:
		if (p->size < 0)
			delete (_NScurrconv__ConversionRateResponse*)p->ptr;
		else
			delete[] (_NScurrconv__ConversionRateResponse*)p->ptr;
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE__NStrans__Translate:
		if (p->size < 0)
			delete (_NStrans__Translate*)p->ptr;
		else
			delete[] (_NStrans__Translate*)p->ptr;
		break;
	case SOAP_TYPE__NStrans__TranslateResponse:
		if (p->size < 0)
			delete (_NStrans__TranslateResponse*)p->ptr;
		else
			delete[] (_NStrans__TranslateResponse*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetCountriesAvailable:
		if (p->size < 0)
			delete (_NShday__GetCountriesAvailable*)p->ptr;
		else
			delete[] (_NShday__GetCountriesAvailable*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult:
		if (p->size < 0)
			delete (_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult*)p->ptr;
		else
			delete[] (_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetCountriesAvailableResponse:
		if (p->size < 0)
			delete (_NShday__GetCountriesAvailableResponse*)p->ptr;
		else
			delete[] (_NShday__GetCountriesAvailableResponse*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetHolidaysAvailable:
		if (p->size < 0)
			delete (_NShday__GetHolidaysAvailable*)p->ptr;
		else
			delete[] (_NShday__GetHolidaysAvailable*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult:
		if (p->size < 0)
			delete (_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult*)p->ptr;
		else
			delete[] (_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetHolidaysAvailableResponse:
		if (p->size < 0)
			delete (_NShday__GetHolidaysAvailableResponse*)p->ptr;
		else
			delete[] (_NShday__GetHolidaysAvailableResponse*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetHolidayDate:
		if (p->size < 0)
			delete (_NShday__GetHolidayDate*)p->ptr;
		else
			delete[] (_NShday__GetHolidayDate*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetHolidayDateResponse:
		if (p->size < 0)
			delete (_NShday__GetHolidayDateResponse*)p->ptr;
		else
			delete[] (_NShday__GetHolidayDateResponse*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetHolidaysForYear:
		if (p->size < 0)
			delete (_NShday__GetHolidaysForYear*)p->ptr;
		else
			delete[] (_NShday__GetHolidaysForYear*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult:
		if (p->size < 0)
			delete (_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult*)p->ptr;
		else
			delete[] (_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetHolidaysForYearResponse:
		if (p->size < 0)
			delete (_NShday__GetHolidaysForYearResponse*)p->ptr;
		else
			delete[] (_NShday__GetHolidaysForYearResponse*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetHolidaysForMonth:
		if (p->size < 0)
			delete (_NShday__GetHolidaysForMonth*)p->ptr;
		else
			delete[] (_NShday__GetHolidaysForMonth*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult:
		if (p->size < 0)
			delete (_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult*)p->ptr;
		else
			delete[] (_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetHolidaysForMonthResponse:
		if (p->size < 0)
			delete (_NShday__GetHolidaysForMonthResponse*)p->ptr;
		else
			delete[] (_NShday__GetHolidaysForMonthResponse*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetHolidaysForDateRange:
		if (p->size < 0)
			delete (_NShday__GetHolidaysForDateRange*)p->ptr;
		else
			delete[] (_NShday__GetHolidaysForDateRange*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult:
		if (p->size < 0)
			delete (_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult*)p->ptr;
		else
			delete[] (_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult*)p->ptr;
		break;
	case SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse:
		if (p->size < 0)
			delete (_NShday__GetHolidaysForDateRangeResponse*)p->ptr;
		else
			delete[] (_NShday__GetHolidaysForDateRangeResponse*)p->ptr;
		break;
	case SOAP_TYPE__NShday__DataSet:
		if (p->size < 0)
			delete (_NShday__DataSet*)p->ptr;
		else
			delete[] (_NShday__DataSet*)p->ptr;
		break;
	case SOAP_TYPE_NSdeath__DeceasedInfo:
		if (p->size < 0)
			delete (NSdeath__DeceasedInfo*)p->ptr;
		else
			delete[] (NSdeath__DeceasedInfo*)p->ptr;
		break;
	case SOAP_TYPE__NSdeath__DeceasedBySSN:
		if (p->size < 0)
			delete (_NSdeath__DeceasedBySSN*)p->ptr;
		else
			delete[] (_NSdeath__DeceasedBySSN*)p->ptr;
		break;
	case SOAP_TYPE__NSdeath__DeceasedBySSNResponse:
		if (p->size < 0)
			delete (_NSdeath__DeceasedBySSNResponse*)p->ptr;
		else
			delete[] (_NSdeath__DeceasedBySSNResponse*)p->ptr;
		break;
	case SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSet:
		if (p->size < 0)
			delete (_NSdeath__SearchDeceasedInfoReturnDataSet*)p->ptr;
		else
			delete[] (_NSdeath__SearchDeceasedInfoReturnDataSet*)p->ptr;
		break;
	case SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult:
		if (p->size < 0)
			delete (_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult*)p->ptr;
		else
			delete[] (_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult*)p->ptr;
		break;
	case SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse:
		if (p->size < 0)
			delete (_NSdeath__SearchDeceasedInfoReturnDataSetResponse*)p->ptr;
		else
			delete[] (_NSdeath__SearchDeceasedInfoReturnDataSetResponse*)p->ptr;
		break;
	case SOAP_TYPE__NSdeath__DataSet:
		if (p->size < 0)
			delete (_NSdeath__DataSet*)p->ptr;
		else
			delete[] (_NSdeath__DataSet*)p->ptr;
		break;
	case SOAP_TYPE_NScalc__addResponse:
		if (p->size < 0)
			delete (struct NScalc__addResponse*)p->ptr;
		else
			delete[] (struct NScalc__addResponse*)p->ptr;
		break;
	case SOAP_TYPE_NScalc__add:
		if (p->size < 0)
			delete (struct NScalc__add*)p->ptr;
		else
			delete[] (struct NScalc__add*)p->ptr;
		break;
	case SOAP_TYPE_NScalc__subResponse:
		if (p->size < 0)
			delete (struct NScalc__subResponse*)p->ptr;
		else
			delete[] (struct NScalc__subResponse*)p->ptr;
		break;
	case SOAP_TYPE_NScalc__sub:
		if (p->size < 0)
			delete (struct NScalc__sub*)p->ptr;
		else
			delete[] (struct NScalc__sub*)p->ptr;
		break;
	case SOAP_TYPE_NScalc__mulResponse:
		if (p->size < 0)
			delete (struct NScalc__mulResponse*)p->ptr;
		else
			delete[] (struct NScalc__mulResponse*)p->ptr;
		break;
	case SOAP_TYPE_NScalc__mul:
		if (p->size < 0)
			delete (struct NScalc__mul*)p->ptr;
		else
			delete[] (struct NScalc__mul*)p->ptr;
		break;
	case SOAP_TYPE_NScalc__divResponse:
		if (p->size < 0)
			delete (struct NScalc__divResponse*)p->ptr;
		else
			delete[] (struct NScalc__divResponse*)p->ptr;
		break;
	case SOAP_TYPE_NScalc__div:
		if (p->size < 0)
			delete (struct NScalc__div*)p->ptr;
		else
			delete[] (struct NScalc__div*)p->ptr;
		break;
	case SOAP_TYPE_NScalc__powResponse:
		if (p->size < 0)
			delete (struct NScalc__powResponse*)p->ptr;
		else
			delete[] (struct NScalc__powResponse*)p->ptr;
		break;
	case SOAP_TYPE_NScalc__pow:
		if (p->size < 0)
			delete (struct NScalc__pow*)p->ptr;
		else
			delete[] (struct NScalc__pow*)p->ptr;
		break;
	case SOAP_TYPE___NScurrconv__ConversionRate:
		if (p->size < 0)
			delete (struct __NScurrconv__ConversionRate*)p->ptr;
		else
			delete[] (struct __NScurrconv__ConversionRate*)p->ptr;
		break;
	case SOAP_TYPE___NShday__GetCountriesAvailable:
		if (p->size < 0)
			delete (struct __NShday__GetCountriesAvailable*)p->ptr;
		else
			delete[] (struct __NShday__GetCountriesAvailable*)p->ptr;
		break;
	case SOAP_TYPE___NShday__GetHolidaysAvailable:
		if (p->size < 0)
			delete (struct __NShday__GetHolidaysAvailable*)p->ptr;
		else
			delete[] (struct __NShday__GetHolidaysAvailable*)p->ptr;
		break;
	case SOAP_TYPE___NShday__GetHolidayDate:
		if (p->size < 0)
			delete (struct __NShday__GetHolidayDate*)p->ptr;
		else
			delete[] (struct __NShday__GetHolidayDate*)p->ptr;
		break;
	case SOAP_TYPE___NShday__GetHolidaysForYear:
		if (p->size < 0)
			delete (struct __NShday__GetHolidaysForYear*)p->ptr;
		else
			delete[] (struct __NShday__GetHolidaysForYear*)p->ptr;
		break;
	case SOAP_TYPE___NShday__GetHolidaysForMonth:
		if (p->size < 0)
			delete (struct __NShday__GetHolidaysForMonth*)p->ptr;
		else
			delete[] (struct __NShday__GetHolidaysForMonth*)p->ptr;
		break;
	case SOAP_TYPE___NShday__GetHolidaysForDateRange:
		if (p->size < 0)
			delete (struct __NShday__GetHolidaysForDateRange*)p->ptr;
		else
			delete[] (struct __NShday__GetHolidaysForDateRange*)p->ptr;
		break;
	case SOAP_TYPE___NStrans__Translate:
		if (p->size < 0)
			delete (struct __NStrans__Translate*)p->ptr;
		else
			delete[] (struct __NStrans__Translate*)p->ptr;
		break;
	case SOAP_TYPE___ns1__gmt:
		if (p->size < 0)
			delete (struct __ns1__gmt*)p->ptr;
		else
			delete[] (struct __ns1__gmt*)p->ptr;
		break;
	case SOAP_TYPE___ns2__DeceasedBySSN:
		if (p->size < 0)
			delete (struct __ns2__DeceasedBySSN*)p->ptr;
		else
			delete[] (struct __ns2__DeceasedBySSN*)p->ptr;
		break;
	case SOAP_TYPE___ns2__SearchDeceasedInfoReturnDataSet:
		if (p->size < 0)
			delete (struct __ns2__SearchDeceasedInfoReturnDataSet*)p->ptr;
		else
			delete[] (struct __ns2__SearchDeceasedInfoReturnDataSet*)p->ptr;
		break;
	case SOAP_TYPE___ns3__DeceasedBySSN:
		if (p->size < 0)
			delete (struct __ns3__DeceasedBySSN*)p->ptr;
		else
			delete[] (struct __ns3__DeceasedBySSN*)p->ptr;
		break;
	case SOAP_TYPE___ns3__SearchDeceasedInfoReturnDataSet:
		if (p->size < 0)
			delete (struct __ns3__SearchDeceasedInfoReturnDataSet*)p->ptr;
		else
			delete[] (struct __ns3__SearchDeceasedInfoReturnDataSet*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time);
	if (soap_out_time(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_NStrans__Language(struct soap *soap, enum NStrans__Language *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_NStrans__Language
	*a = SOAP_DEFAULT_NStrans__Language;
#else
	*a = (enum NStrans__Language)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_NStrans__Language(struct soap *soap, const enum NStrans__Language *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_NStrans__Language);
	if (soap_out_NStrans__Language(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_NStrans__Language[] =
{	{ (long)NStrans__Language__EnglishTOChinese, "EnglishTOChinese" },
	{ (long)NStrans__Language__EnglishTOFrench, "EnglishTOFrench" },
	{ (long)NStrans__Language__EnglishTOGerman, "EnglishTOGerman" },
	{ (long)NStrans__Language__EnglishTOItalian, "EnglishTOItalian" },
	{ (long)NStrans__Language__EnglishTOJapanese, "EnglishTOJapanese" },
	{ (long)NStrans__Language__EnglishTOKorean, "EnglishTOKorean" },
	{ (long)NStrans__Language__EnglishTOPortuguese, "EnglishTOPortuguese" },
	{ (long)NStrans__Language__EnglishTOSpanish, "EnglishTOSpanish" },
	{ (long)NStrans__Language__ChineseTOEnglish, "ChineseTOEnglish" },
	{ (long)NStrans__Language__FrenchTOEnglish, "FrenchTOEnglish" },
	{ (long)NStrans__Language__FrenchTOGerman, "FrenchTOGerman" },
	{ (long)NStrans__Language__GermanTOEnglish, "GermanTOEnglish" },
	{ (long)NStrans__Language__GermanTOFrench, "GermanTOFrench" },
	{ (long)NStrans__Language__ItalianTOEnglish, "ItalianTOEnglish" },
	{ (long)NStrans__Language__JapaneseTOEnglish, "JapaneseTOEnglish" },
	{ (long)NStrans__Language__KoreanTOEnglish, "KoreanTOEnglish" },
	{ (long)NStrans__Language__PortugueseTOEnglish, "PortugueseTOEnglish" },
	{ (long)NStrans__Language__RussianTOEnglish, "RussianTOEnglish" },
	{ (long)NStrans__Language__SpanishTOEnglish, "SpanishTOEnglish" },
	{ (long)NStrans__Language__SpanishToFrench, "SpanishToFrench" },
	{ (long)NStrans__Language__PortugueseToFrench, "PortugueseToFrench" },
	{ (long)NStrans__Language__ItalianToFrench, "ItalianToFrench" },
	{ (long)NStrans__Language__GreekToFrench, "GreekToFrench" },
	{ (long)NStrans__Language__GermanToFrench, "GermanToFrench" },
	{ (long)NStrans__Language__FrenchToGreek, "FrenchToGreek" },
	{ (long)NStrans__Language__FrenchToItalian, "FrenchToItalian" },
	{ (long)NStrans__Language__FrenchToPortuguese, "FrenchToPortuguese" },
	{ (long)NStrans__Language__FrenchToDutch, "FrenchToDutch" },
	{ (long)NStrans__Language__FrenchToSpanish, "FrenchToSpanish" },
	{ (long)NStrans__Language__EnglishToRussian, "EnglishToRussian" },
	{ (long)NStrans__Language__EnglishToDutch, "EnglishToDutch" },
	{ (long)NStrans__Language__DutchToEnglish, "DutchToEnglish" },
	{ (long)NStrans__Language__DutchToFrench, "DutchToFrench" },
	{ (long)NStrans__Language__GreekToEnglish, "GreekToEnglish" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_NStrans__Language2s(struct soap *soap, enum NStrans__Language n)
{	const char *s = soap_code_str(soap_codes_NStrans__Language, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NStrans__Language(struct soap *soap, const char *tag, int id, const enum NStrans__Language *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NStrans__Language), type) || soap_send(soap, soap_NStrans__Language2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum NStrans__Language * SOAP_FMAC4 soap_get_NStrans__Language(struct soap *soap, enum NStrans__Language *p, const char *tag, const char *type)
{
	if ((p = soap_in_NStrans__Language(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2NStrans__Language(struct soap *soap, const char *s, enum NStrans__Language *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_NStrans__Language, s);
	if (map)
		*a = (enum NStrans__Language)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 33)))
			return soap->error = SOAP_TYPE;
		*a = (enum NStrans__Language)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum NStrans__Language * SOAP_FMAC4 soap_in_NStrans__Language(struct soap *soap, const char *tag, enum NStrans__Language *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum NStrans__Language *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_NStrans__Language, sizeof(enum NStrans__Language), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2NStrans__Language(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum NStrans__Language *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NStrans__Language, 0, sizeof(enum NStrans__Language), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_NScurrconv__Currency(struct soap *soap, enum NScurrconv__Currency *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_NScurrconv__Currency
	*a = SOAP_DEFAULT_NScurrconv__Currency;
#else
	*a = (enum NScurrconv__Currency)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_NScurrconv__Currency(struct soap *soap, const enum NScurrconv__Currency *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_NScurrconv__Currency);
	if (soap_out_NScurrconv__Currency(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_NScurrconv__Currency[] =
{	{ (long)NScurrconv__Currency__AFA, "AFA" },
	{ (long)NScurrconv__Currency__ALL, "ALL" },
	{ (long)NScurrconv__Currency__DZD, "DZD" },
	{ (long)NScurrconv__Currency__ARS, "ARS" },
	{ (long)NScurrconv__Currency__AWG, "AWG" },
	{ (long)NScurrconv__Currency__AUD, "AUD" },
	{ (long)NScurrconv__Currency__BSD, "BSD" },
	{ (long)NScurrconv__Currency__BHD, "BHD" },
	{ (long)NScurrconv__Currency__BDT, "BDT" },
	{ (long)NScurrconv__Currency__BBD, "BBD" },
	{ (long)NScurrconv__Currency__BZD, "BZD" },
	{ (long)NScurrconv__Currency__BMD, "BMD" },
	{ (long)NScurrconv__Currency__BTN, "BTN" },
	{ (long)NScurrconv__Currency__BOB, "BOB" },
	{ (long)NScurrconv__Currency__BWP, "BWP" },
	{ (long)NScurrconv__Currency__BRL, "BRL" },
	{ (long)NScurrconv__Currency__GBP, "GBP" },
	{ (long)NScurrconv__Currency__BND, "BND" },
	{ (long)NScurrconv__Currency__BIF, "BIF" },
	{ (long)NScurrconv__Currency__XOF, "XOF" },
	{ (long)NScurrconv__Currency__XAF, "XAF" },
	{ (long)NScurrconv__Currency__KHR, "KHR" },
	{ (long)NScurrconv__Currency__CAD, "CAD" },
	{ (long)NScurrconv__Currency__CVE, "CVE" },
	{ (long)NScurrconv__Currency__KYD, "KYD" },
	{ (long)NScurrconv__Currency__CLP, "CLP" },
	{ (long)NScurrconv__Currency__CNY, "CNY" },
	{ (long)NScurrconv__Currency__COP, "COP" },
	{ (long)NScurrconv__Currency__KMF, "KMF" },
	{ (long)NScurrconv__Currency__CRC, "CRC" },
	{ (long)NScurrconv__Currency__HRK, "HRK" },
	{ (long)NScurrconv__Currency__CUP, "CUP" },
	{ (long)NScurrconv__Currency__CYP, "CYP" },
	{ (long)NScurrconv__Currency__CZK, "CZK" },
	{ (long)NScurrconv__Currency__DKK, "DKK" },
	{ (long)NScurrconv__Currency__DJF, "DJF" },
	{ (long)NScurrconv__Currency__DOP, "DOP" },
	{ (long)NScurrconv__Currency__XCD, "XCD" },
	{ (long)NScurrconv__Currency__EGP, "EGP" },
	{ (long)NScurrconv__Currency__SVC, "SVC" },
	{ (long)NScurrconv__Currency__EEK, "EEK" },
	{ (long)NScurrconv__Currency__ETB, "ETB" },
	{ (long)NScurrconv__Currency__EUR, "EUR" },
	{ (long)NScurrconv__Currency__FKP, "FKP" },
	{ (long)NScurrconv__Currency__GMD, "GMD" },
	{ (long)NScurrconv__Currency__GHC, "GHC" },
	{ (long)NScurrconv__Currency__GIP, "GIP" },
	{ (long)NScurrconv__Currency__XAU, "XAU" },
	{ (long)NScurrconv__Currency__GTQ, "GTQ" },
	{ (long)NScurrconv__Currency__GNF, "GNF" },
	{ (long)NScurrconv__Currency__GYD, "GYD" },
	{ (long)NScurrconv__Currency__HTG, "HTG" },
	{ (long)NScurrconv__Currency__HNL, "HNL" },
	{ (long)NScurrconv__Currency__HKD, "HKD" },
	{ (long)NScurrconv__Currency__HUF, "HUF" },
	{ (long)NScurrconv__Currency__ISK, "ISK" },
	{ (long)NScurrconv__Currency__INR, "INR" },
	{ (long)NScurrconv__Currency__IDR, "IDR" },
	{ (long)NScurrconv__Currency__IQD, "IQD" },
	{ (long)NScurrconv__Currency__ILS, "ILS" },
	{ (long)NScurrconv__Currency__JMD, "JMD" },
	{ (long)NScurrconv__Currency__JPY, "JPY" },
	{ (long)NScurrconv__Currency__JOD, "JOD" },
	{ (long)NScurrconv__Currency__KZT, "KZT" },
	{ (long)NScurrconv__Currency__KES, "KES" },
	{ (long)NScurrconv__Currency__KRW, "KRW" },
	{ (long)NScurrconv__Currency__KWD, "KWD" },
	{ (long)NScurrconv__Currency__LAK, "LAK" },
	{ (long)NScurrconv__Currency__LVL, "LVL" },
	{ (long)NScurrconv__Currency__LBP, "LBP" },
	{ (long)NScurrconv__Currency__LSL, "LSL" },
	{ (long)NScurrconv__Currency__LRD, "LRD" },
	{ (long)NScurrconv__Currency__LYD, "LYD" },
	{ (long)NScurrconv__Currency__LTL, "LTL" },
	{ (long)NScurrconv__Currency__MOP, "MOP" },
	{ (long)NScurrconv__Currency__MKD, "MKD" },
	{ (long)NScurrconv__Currency__MGF, "MGF" },
	{ (long)NScurrconv__Currency__MWK, "MWK" },
	{ (long)NScurrconv__Currency__MYR, "MYR" },
	{ (long)NScurrconv__Currency__MVR, "MVR" },
	{ (long)NScurrconv__Currency__MTL, "MTL" },
	{ (long)NScurrconv__Currency__MRO, "MRO" },
	{ (long)NScurrconv__Currency__MUR, "MUR" },
	{ (long)NScurrconv__Currency__MXN, "MXN" },
	{ (long)NScurrconv__Currency__MDL, "MDL" },
	{ (long)NScurrconv__Currency__MNT, "MNT" },
	{ (long)NScurrconv__Currency__MAD, "MAD" },
	{ (long)NScurrconv__Currency__MZM, "MZM" },
	{ (long)NScurrconv__Currency__MMK, "MMK" },
	{ (long)NScurrconv__Currency__NAD, "NAD" },
	{ (long)NScurrconv__Currency__NPR, "NPR" },
	{ (long)NScurrconv__Currency__ANG, "ANG" },
	{ (long)NScurrconv__Currency__NZD, "NZD" },
	{ (long)NScurrconv__Currency__NIO, "NIO" },
	{ (long)NScurrconv__Currency__NGN, "NGN" },
	{ (long)NScurrconv__Currency__KPW, "KPW" },
	{ (long)NScurrconv__Currency__NOK, "NOK" },
	{ (long)NScurrconv__Currency__OMR, "OMR" },
	{ (long)NScurrconv__Currency__XPF, "XPF" },
	{ (long)NScurrconv__Currency__PKR, "PKR" },
	{ (long)NScurrconv__Currency__XPD, "XPD" },
	{ (long)NScurrconv__Currency__PAB, "PAB" },
	{ (long)NScurrconv__Currency__PGK, "PGK" },
	{ (long)NScurrconv__Currency__PYG, "PYG" },
	{ (long)NScurrconv__Currency__PEN, "PEN" },
	{ (long)NScurrconv__Currency__PHP, "PHP" },
	{ (long)NScurrconv__Currency__XPT, "XPT" },
	{ (long)NScurrconv__Currency__PLN, "PLN" },
	{ (long)NScurrconv__Currency__QAR, "QAR" },
	{ (long)NScurrconv__Currency__ROL, "ROL" },
	{ (long)NScurrconv__Currency__RUB, "RUB" },
	{ (long)NScurrconv__Currency__WST, "WST" },
	{ (long)NScurrconv__Currency__STD, "STD" },
	{ (long)NScurrconv__Currency__SAR, "SAR" },
	{ (long)NScurrconv__Currency__SCR, "SCR" },
	{ (long)NScurrconv__Currency__SLL, "SLL" },
	{ (long)NScurrconv__Currency__XAG, "XAG" },
	{ (long)NScurrconv__Currency__SGD, "SGD" },
	{ (long)NScurrconv__Currency__SKK, "SKK" },
	{ (long)NScurrconv__Currency__SIT, "SIT" },
	{ (long)NScurrconv__Currency__SBD, "SBD" },
	{ (long)NScurrconv__Currency__SOS, "SOS" },
	{ (long)NScurrconv__Currency__ZAR, "ZAR" },
	{ (long)NScurrconv__Currency__LKR, "LKR" },
	{ (long)NScurrconv__Currency__SHP, "SHP" },
	{ (long)NScurrconv__Currency__SDD, "SDD" },
	{ (long)NScurrconv__Currency__SRG, "SRG" },
	{ (long)NScurrconv__Currency__SZL, "SZL" },
	{ (long)NScurrconv__Currency__SEK, "SEK" },
	{ (long)NScurrconv__Currency__CHF, "CHF" },
	{ (long)NScurrconv__Currency__SYP, "SYP" },
	{ (long)NScurrconv__Currency__TWD, "TWD" },
	{ (long)NScurrconv__Currency__TZS, "TZS" },
	{ (long)NScurrconv__Currency__THB, "THB" },
	{ (long)NScurrconv__Currency__TOP, "TOP" },
	{ (long)NScurrconv__Currency__TTD, "TTD" },
	{ (long)NScurrconv__Currency__TND, "TND" },
	{ (long)NScurrconv__Currency__TRL, "TRL" },
	{ (long)NScurrconv__Currency__USD, "USD" },
	{ (long)NScurrconv__Currency__AED, "AED" },
	{ (long)NScurrconv__Currency__UGX, "UGX" },
	{ (long)NScurrconv__Currency__UAH, "UAH" },
	{ (long)NScurrconv__Currency__UYU, "UYU" },
	{ (long)NScurrconv__Currency__VUV, "VUV" },
	{ (long)NScurrconv__Currency__VEB, "VEB" },
	{ (long)NScurrconv__Currency__VND, "VND" },
	{ (long)NScurrconv__Currency__YER, "YER" },
	{ (long)NScurrconv__Currency__YUM, "YUM" },
	{ (long)NScurrconv__Currency__ZMK, "ZMK" },
	{ (long)NScurrconv__Currency__ZWD, "ZWD" },
	{ (long)NScurrconv__Currency__TRY, "TRY" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_NScurrconv__Currency2s(struct soap *soap, enum NScurrconv__Currency n)
{	const char *s = soap_code_str(soap_codes_NScurrconv__Currency, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NScurrconv__Currency(struct soap *soap, const char *tag, int id, const enum NScurrconv__Currency *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NScurrconv__Currency), type) || soap_send(soap, soap_NScurrconv__Currency2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum NScurrconv__Currency * SOAP_FMAC4 soap_get_NScurrconv__Currency(struct soap *soap, enum NScurrconv__Currency *p, const char *tag, const char *type)
{
	if ((p = soap_in_NScurrconv__Currency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2NScurrconv__Currency(struct soap *soap, const char *s, enum NScurrconv__Currency *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_NScurrconv__Currency, s);
	if (map)
		*a = (enum NScurrconv__Currency)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 150)))
			return soap->error = SOAP_TYPE;
		*a = (enum NScurrconv__Currency)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum NScurrconv__Currency * SOAP_FMAC4 soap_in_NScurrconv__Currency(struct soap *soap, const char *tag, enum NScurrconv__Currency *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum NScurrconv__Currency *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_NScurrconv__Currency, sizeof(enum NScurrconv__Currency), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2NScurrconv__Currency(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum NScurrconv__Currency *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NScurrconv__Currency, 0, sizeof(enum NScurrconv__Currency), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

void _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default__xsd__schema(soap, &this->_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult::xsd__schema);
	this->_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult::__any = NULL;
}

void _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__xsd__schema(soap, &this->_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult::xsd__schema);
}

int _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(struct soap *soap, const char *tag, int id, const _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult), type))
		return soap->error;
	if (soap_out__xsd__schema(soap, "xsd:schema", -1, &(a->_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult::xsd__schema), ""))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult::__any), NULL);
	return soap_element_end_out(soap, tag);
}

void *_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, this, tag, type);
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult * SOAP_FMAC4 soap_get__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, tag, this, type);
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult * SOAP_FMAC4 soap_in__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(struct soap *soap, const char *tag, _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult, sizeof(_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__xsd__schema(soap, "xsd:schema", &(a->_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult::xsd__schema), ""))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult, 0, sizeof(_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult), 0, soap_copy__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xsd__schema1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult * SOAP_FMAC6 soap_new__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(struct soap *soap, int n)
{	return soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult * SOAP_FMAC4 soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult;
		if (size)
			*size = sizeof(_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult);
	}
	else
	{	cp->ptr = (void*)new _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult %p -> %p\n", q, p));
	*(_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult*)p = *(_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult*)q;
}

void _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default__xsd__schema(soap, &this->_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult::xsd__schema);
	this->_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult::__any = NULL;
}

void _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__xsd__schema(soap, &this->_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult::xsd__schema);
}

int _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(struct soap *soap, const char *tag, int id, const _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult), type))
		return soap->error;
	if (soap_out__xsd__schema(soap, "xsd:schema", -1, &(a->_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult::xsd__schema), ""))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult::__any), NULL);
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult * SOAP_FMAC4 soap_get__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(struct soap *soap, _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult * SOAP_FMAC4 soap_in__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(struct soap *soap, const char *tag, _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult, sizeof(_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__xsd__schema(soap, "xsd:schema", &(a->_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult::xsd__schema), ""))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult, 0, sizeof(_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult), 0, soap_copy__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xsd__schema1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult * SOAP_FMAC6 soap_new__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(struct soap *soap, _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult * SOAP_FMAC4 soap_instantiate__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult;
		if (size)
			*size = sizeof(_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult);
	}
	else
	{	cp->ptr = (void*)new _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult %p -> %p\n", q, p));
	*(_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult*)p = *(_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult*)q;
}

void _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default__xsd__schema(soap, &this->_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult::xsd__schema);
	this->_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult::__any = NULL;
}

void _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__xsd__schema(soap, &this->_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult::xsd__schema);
}

int _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(struct soap *soap, const char *tag, int id, const _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult), type))
		return soap->error;
	if (soap_out__xsd__schema(soap, "xsd:schema", -1, &(a->_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult::xsd__schema), ""))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult::__any), NULL);
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult * SOAP_FMAC4 soap_get__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(struct soap *soap, _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult * SOAP_FMAC4 soap_in__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(struct soap *soap, const char *tag, _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult, sizeof(_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__xsd__schema(soap, "xsd:schema", &(a->_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult::xsd__schema), ""))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult, 0, sizeof(_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult), 0, soap_copy__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xsd__schema1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult * SOAP_FMAC6 soap_new__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(struct soap *soap, _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult * SOAP_FMAC4 soap_instantiate__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult;
		if (size)
			*size = sizeof(_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult);
	}
	else
	{	cp->ptr = (void*)new _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult %p -> %p\n", q, p));
	*(_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult*)p = *(_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult*)q;
}

void _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default__xsd__schema(soap, &this->_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult::xsd__schema);
	this->_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult::__any = NULL;
}

void _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__xsd__schema(soap, &this->_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult::xsd__schema);
}

int _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(struct soap *soap, const char *tag, int id, const _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult), type))
		return soap->error;
	if (soap_out__xsd__schema(soap, "xsd:schema", -1, &(a->_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult::xsd__schema), ""))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult::__any), NULL);
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult * SOAP_FMAC4 soap_get__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(struct soap *soap, _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult * SOAP_FMAC4 soap_in__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(struct soap *soap, const char *tag, _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult, sizeof(_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__xsd__schema(soap, "xsd:schema", &(a->_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult::xsd__schema), ""))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult, 0, sizeof(_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult), 0, soap_copy__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xsd__schema1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult * SOAP_FMAC6 soap_new__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(struct soap *soap, _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult * SOAP_FMAC4 soap_instantiate__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult;
		if (size)
			*size = sizeof(_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult);
	}
	else
	{	cp->ptr = (void*)new _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult %p -> %p\n", q, p));
	*(_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult*)p = *(_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult*)q;
}

void _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default__xsd__schema(soap, &this->_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult::xsd__schema);
	this->_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult::__any = NULL;
}

void _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__xsd__schema(soap, &this->_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult::xsd__schema);
}

int _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(struct soap *soap, const char *tag, int id, const _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult), type))
		return soap->error;
	if (soap_out__xsd__schema(soap, "xsd:schema", -1, &(a->_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult::xsd__schema), ""))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult::__any), NULL);
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult * SOAP_FMAC4 soap_get__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(struct soap *soap, _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult * SOAP_FMAC4 soap_in__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(struct soap *soap, const char *tag, _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult, sizeof(_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__xsd__schema(soap, "xsd:schema", &(a->_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult::xsd__schema), ""))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult, 0, sizeof(_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult), 0, soap_copy__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xsd__schema1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult * SOAP_FMAC6 soap_new__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(struct soap *soap, _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult * SOAP_FMAC4 soap_instantiate__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult;
		if (size)
			*size = sizeof(_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult);
	}
	else
	{	cp->ptr = (void*)new _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult %p -> %p\n", q, p));
	*(_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult*)p = *(_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult*)q;
}

void _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default__xsd__schema(soap, &this->_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult::xsd__schema);
	this->_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult::__any = NULL;
}

void _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__xsd__schema(soap, &this->_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult::xsd__schema);
}

int _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(struct soap *soap, const char *tag, int id, const _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult), type))
		return soap->error;
	if (soap_out__xsd__schema(soap, "xsd:schema", -1, &(a->_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult::xsd__schema), ""))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult::__any), NULL);
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult * SOAP_FMAC4 soap_get__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(struct soap *soap, _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult * SOAP_FMAC4 soap_in__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(struct soap *soap, const char *tag, _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult, sizeof(_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__xsd__schema(soap, "xsd:schema", &(a->_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult::xsd__schema), ""))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult, 0, sizeof(_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult), 0, soap_copy__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xsd__schema1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult * SOAP_FMAC6 soap_new__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(struct soap *soap, _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult * SOAP_FMAC4 soap_instantiate__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult;
		if (size)
			*size = sizeof(_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult);
	}
	else
	{	cp->ptr = (void*)new _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult %p -> %p\n", q, p));
	*(_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult*)p = *(_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _NSdeath__DataSet::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default__xsd__schema(soap, &this->_NSdeath__DataSet::xsd__schema);
	this->_NSdeath__DataSet::__any = NULL;
	/* transient soap skipped */
}

void _NSdeath__DataSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__xsd__schema(soap, &this->_NSdeath__DataSet::xsd__schema);
	/* transient soap skipped */
}

int _NSdeath__DataSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NSdeath__DataSet);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NSdeath__DataSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NSdeath__DataSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NSdeath__DataSet(struct soap *soap, const char *tag, int id, const _NSdeath__DataSet *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NSdeath__DataSet), type))
		return soap->error;
	if (soap_out__xsd__schema(soap, "xsd:schema", -1, &(a->_NSdeath__DataSet::xsd__schema), ""))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_NSdeath__DataSet::__any), NULL);
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NSdeath__DataSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NSdeath__DataSet(soap, this, tag, type);
}

SOAP_FMAC3 _NSdeath__DataSet * SOAP_FMAC4 soap_get__NSdeath__DataSet(struct soap *soap, _NSdeath__DataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in__NSdeath__DataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NSdeath__DataSet::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NSdeath__DataSet(soap, tag, this, type);
}

SOAP_FMAC3 _NSdeath__DataSet * SOAP_FMAC4 soap_in__NSdeath__DataSet(struct soap *soap, const char *tag, _NSdeath__DataSet *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NSdeath__DataSet *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NSdeath__DataSet, sizeof(_NSdeath__DataSet), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NSdeath__DataSet)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NSdeath__DataSet *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__xsd__schema(soap, "xsd:schema", &(a->_NSdeath__DataSet::xsd__schema), ""))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_NSdeath__DataSet::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NSdeath__DataSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NSdeath__DataSet, 0, sizeof(_NSdeath__DataSet), 0, soap_copy__NSdeath__DataSet);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xsd__schema1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NSdeath__DataSet * SOAP_FMAC6 soap_new__NSdeath__DataSet(struct soap *soap, int n)
{	return soap_instantiate__NSdeath__DataSet(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NSdeath__DataSet(struct soap *soap, _NSdeath__DataSet *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NSdeath__DataSet * SOAP_FMAC4 soap_instantiate__NSdeath__DataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NSdeath__DataSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NSdeath__DataSet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NSdeath__DataSet;
		if (size)
			*size = sizeof(_NSdeath__DataSet);
		((_NSdeath__DataSet*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NSdeath__DataSet[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NSdeath__DataSet);
		for (int i = 0; i < n; i++)
			((_NSdeath__DataSet*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NSdeath__DataSet*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NSdeath__DataSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NSdeath__DataSet %p -> %p\n", q, p));
	*(_NSdeath__DataSet*)p = *(_NSdeath__DataSet*)q;
}

void _NSdeath__SearchDeceasedInfoReturnDataSetResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NSdeath__SearchDeceasedInfoReturnDataSetResponse::SearchDeceasedInfoReturnDataSetResult = NULL;
	/* transient soap skipped */
}

void _NSdeath__SearchDeceasedInfoReturnDataSetResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, &this->_NSdeath__SearchDeceasedInfoReturnDataSetResponse::SearchDeceasedInfoReturnDataSetResult);
	/* transient soap skipped */
}

int _NSdeath__SearchDeceasedInfoReturnDataSetResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NSdeath__SearchDeceasedInfoReturnDataSetResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NSdeath__SearchDeceasedInfoReturnDataSetResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NSdeath__SearchDeceasedInfoReturnDataSetResponse(struct soap *soap, const char *tag, int id, const _NSdeath__SearchDeceasedInfoReturnDataSetResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse), type))
		return soap->error;
	if (a->SearchDeceasedInfoReturnDataSetResult)
		soap_element_result(soap, "NSdeath:SearchDeceasedInfoReturnDataSetResult");
	if (soap_out_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, "NSdeath:SearchDeceasedInfoReturnDataSetResult", -1, &(a->_NSdeath__SearchDeceasedInfoReturnDataSetResponse::SearchDeceasedInfoReturnDataSetResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NSdeath__SearchDeceasedInfoReturnDataSetResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NSdeath__SearchDeceasedInfoReturnDataSetResponse(soap, this, tag, type);
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSetResponse * SOAP_FMAC4 soap_get__NSdeath__SearchDeceasedInfoReturnDataSetResponse(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSetResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__NSdeath__SearchDeceasedInfoReturnDataSetResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NSdeath__SearchDeceasedInfoReturnDataSetResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NSdeath__SearchDeceasedInfoReturnDataSetResponse(soap, tag, this, type);
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSetResponse * SOAP_FMAC4 soap_in__NSdeath__SearchDeceasedInfoReturnDataSetResponse(struct soap *soap, const char *tag, _NSdeath__SearchDeceasedInfoReturnDataSetResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NSdeath__SearchDeceasedInfoReturnDataSetResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse, sizeof(_NSdeath__SearchDeceasedInfoReturnDataSetResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NSdeath__SearchDeceasedInfoReturnDataSetResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SearchDeceasedInfoReturnDataSetResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SearchDeceasedInfoReturnDataSetResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, "NSdeath:SearchDeceasedInfoReturnDataSetResult", &(a->_NSdeath__SearchDeceasedInfoReturnDataSetResponse::SearchDeceasedInfoReturnDataSetResult), ""))
				{	soap_flag_SearchDeceasedInfoReturnDataSetResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "NSdeath:SearchDeceasedInfoReturnDataSetResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NSdeath__SearchDeceasedInfoReturnDataSetResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse, 0, sizeof(_NSdeath__SearchDeceasedInfoReturnDataSetResponse), 0, soap_copy__NSdeath__SearchDeceasedInfoReturnDataSetResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _NSdeath__SearchDeceasedInfoReturnDataSetResponse * SOAP_FMAC6 soap_new__NSdeath__SearchDeceasedInfoReturnDataSetResponse(struct soap *soap, int n)
{	return soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSetResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NSdeath__SearchDeceasedInfoReturnDataSetResponse(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSetResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSetResponse * SOAP_FMAC4 soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSetResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSetResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NSdeath__SearchDeceasedInfoReturnDataSetResponse;
		if (size)
			*size = sizeof(_NSdeath__SearchDeceasedInfoReturnDataSetResponse);
		((_NSdeath__SearchDeceasedInfoReturnDataSetResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NSdeath__SearchDeceasedInfoReturnDataSetResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NSdeath__SearchDeceasedInfoReturnDataSetResponse);
		for (int i = 0; i < n; i++)
			((_NSdeath__SearchDeceasedInfoReturnDataSetResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NSdeath__SearchDeceasedInfoReturnDataSetResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NSdeath__SearchDeceasedInfoReturnDataSetResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NSdeath__SearchDeceasedInfoReturnDataSetResponse %p -> %p\n", q, p));
	*(_NSdeath__SearchDeceasedInfoReturnDataSetResponse*)p = *(_NSdeath__SearchDeceasedInfoReturnDataSetResponse*)q;
}

void _NSdeath__SearchDeceasedInfoReturnDataSet::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NSdeath__SearchDeceasedInfoReturnDataSet::LastName = NULL;
	this->_NSdeath__SearchDeceasedInfoReturnDataSet::FirstName = NULL;
	this->_NSdeath__SearchDeceasedInfoReturnDataSet::StateAbbrev = NULL;
	this->_NSdeath__SearchDeceasedInfoReturnDataSet::LicenseKey = NULL;
	this->_NSdeath__SearchDeceasedInfoReturnDataSet::GreaterThanYear = NULL;
	/* transient soap skipped */
}

void _NSdeath__SearchDeceasedInfoReturnDataSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_NSdeath__SearchDeceasedInfoReturnDataSet::LastName);
	soap_serialize_PointerTostd__string(soap, &this->_NSdeath__SearchDeceasedInfoReturnDataSet::FirstName);
	soap_serialize_PointerTostd__string(soap, &this->_NSdeath__SearchDeceasedInfoReturnDataSet::StateAbbrev);
	soap_serialize_PointerTostd__string(soap, &this->_NSdeath__SearchDeceasedInfoReturnDataSet::LicenseKey);
	soap_serialize_PointerTostd__string(soap, &this->_NSdeath__SearchDeceasedInfoReturnDataSet::GreaterThanYear);
	/* transient soap skipped */
}

int _NSdeath__SearchDeceasedInfoReturnDataSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSet);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NSdeath__SearchDeceasedInfoReturnDataSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NSdeath__SearchDeceasedInfoReturnDataSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NSdeath__SearchDeceasedInfoReturnDataSet(struct soap *soap, const char *tag, int id, const _NSdeath__SearchDeceasedInfoReturnDataSet *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSet), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:LastName", -1, &(a->_NSdeath__SearchDeceasedInfoReturnDataSet::LastName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:FirstName", -1, &(a->_NSdeath__SearchDeceasedInfoReturnDataSet::FirstName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:StateAbbrev", -1, &(a->_NSdeath__SearchDeceasedInfoReturnDataSet::StateAbbrev), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:LicenseKey", -1, &(a->_NSdeath__SearchDeceasedInfoReturnDataSet::LicenseKey), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:GreaterThanYear", -1, &(a->_NSdeath__SearchDeceasedInfoReturnDataSet::GreaterThanYear), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NSdeath__SearchDeceasedInfoReturnDataSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NSdeath__SearchDeceasedInfoReturnDataSet(soap, this, tag, type);
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSet * SOAP_FMAC4 soap_get__NSdeath__SearchDeceasedInfoReturnDataSet(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in__NSdeath__SearchDeceasedInfoReturnDataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NSdeath__SearchDeceasedInfoReturnDataSet::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NSdeath__SearchDeceasedInfoReturnDataSet(soap, tag, this, type);
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSet * SOAP_FMAC4 soap_in__NSdeath__SearchDeceasedInfoReturnDataSet(struct soap *soap, const char *tag, _NSdeath__SearchDeceasedInfoReturnDataSet *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NSdeath__SearchDeceasedInfoReturnDataSet *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSet, sizeof(_NSdeath__SearchDeceasedInfoReturnDataSet), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSet)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NSdeath__SearchDeceasedInfoReturnDataSet *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LastName1 = 1;
	size_t soap_flag_FirstName1 = 1;
	size_t soap_flag_StateAbbrev1 = 1;
	size_t soap_flag_LicenseKey1 = 1;
	size_t soap_flag_GreaterThanYear1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LastName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:LastName", &(a->_NSdeath__SearchDeceasedInfoReturnDataSet::LastName), "xsd:string"))
				{	soap_flag_LastName1--;
					continue;
				}
			if (soap_flag_FirstName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:FirstName", &(a->_NSdeath__SearchDeceasedInfoReturnDataSet::FirstName), "xsd:string"))
				{	soap_flag_FirstName1--;
					continue;
				}
			if (soap_flag_StateAbbrev1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:StateAbbrev", &(a->_NSdeath__SearchDeceasedInfoReturnDataSet::StateAbbrev), "xsd:string"))
				{	soap_flag_StateAbbrev1--;
					continue;
				}
			if (soap_flag_LicenseKey1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:LicenseKey", &(a->_NSdeath__SearchDeceasedInfoReturnDataSet::LicenseKey), "xsd:string"))
				{	soap_flag_LicenseKey1--;
					continue;
				}
			if (soap_flag_GreaterThanYear1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:GreaterThanYear", &(a->_NSdeath__SearchDeceasedInfoReturnDataSet::GreaterThanYear), "xsd:string"))
				{	soap_flag_GreaterThanYear1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NSdeath__SearchDeceasedInfoReturnDataSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSet, 0, sizeof(_NSdeath__SearchDeceasedInfoReturnDataSet), 0, soap_copy__NSdeath__SearchDeceasedInfoReturnDataSet);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _NSdeath__SearchDeceasedInfoReturnDataSet * SOAP_FMAC6 soap_new__NSdeath__SearchDeceasedInfoReturnDataSet(struct soap *soap, int n)
{	return soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSet(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NSdeath__SearchDeceasedInfoReturnDataSet(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSet *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSet * SOAP_FMAC4 soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NSdeath__SearchDeceasedInfoReturnDataSet;
		if (size)
			*size = sizeof(_NSdeath__SearchDeceasedInfoReturnDataSet);
		((_NSdeath__SearchDeceasedInfoReturnDataSet*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NSdeath__SearchDeceasedInfoReturnDataSet[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NSdeath__SearchDeceasedInfoReturnDataSet);
		for (int i = 0; i < n; i++)
			((_NSdeath__SearchDeceasedInfoReturnDataSet*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NSdeath__SearchDeceasedInfoReturnDataSet*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NSdeath__SearchDeceasedInfoReturnDataSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NSdeath__SearchDeceasedInfoReturnDataSet %p -> %p\n", q, p));
	*(_NSdeath__SearchDeceasedInfoReturnDataSet*)p = *(_NSdeath__SearchDeceasedInfoReturnDataSet*)q;
}

void _NSdeath__DeceasedBySSNResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NSdeath__DeceasedBySSNResponse::DeceasedBySSNResult = NULL;
	/* transient soap skipped */
}

void _NSdeath__DeceasedBySSNResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToNSdeath__DeceasedInfo(soap, &this->_NSdeath__DeceasedBySSNResponse::DeceasedBySSNResult);
	/* transient soap skipped */
}

int _NSdeath__DeceasedBySSNResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NSdeath__DeceasedBySSNResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NSdeath__DeceasedBySSNResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NSdeath__DeceasedBySSNResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NSdeath__DeceasedBySSNResponse(struct soap *soap, const char *tag, int id, const _NSdeath__DeceasedBySSNResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NSdeath__DeceasedBySSNResponse), type))
		return soap->error;
	if (a->DeceasedBySSNResult)
		soap_element_result(soap, "NSdeath:DeceasedBySSNResult");
	if (soap_out_PointerToNSdeath__DeceasedInfo(soap, "NSdeath:DeceasedBySSNResult", -1, &(a->_NSdeath__DeceasedBySSNResponse::DeceasedBySSNResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NSdeath__DeceasedBySSNResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NSdeath__DeceasedBySSNResponse(soap, this, tag, type);
}

SOAP_FMAC3 _NSdeath__DeceasedBySSNResponse * SOAP_FMAC4 soap_get__NSdeath__DeceasedBySSNResponse(struct soap *soap, _NSdeath__DeceasedBySSNResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__NSdeath__DeceasedBySSNResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NSdeath__DeceasedBySSNResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NSdeath__DeceasedBySSNResponse(soap, tag, this, type);
}

SOAP_FMAC3 _NSdeath__DeceasedBySSNResponse * SOAP_FMAC4 soap_in__NSdeath__DeceasedBySSNResponse(struct soap *soap, const char *tag, _NSdeath__DeceasedBySSNResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NSdeath__DeceasedBySSNResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NSdeath__DeceasedBySSNResponse, sizeof(_NSdeath__DeceasedBySSNResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NSdeath__DeceasedBySSNResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NSdeath__DeceasedBySSNResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DeceasedBySSNResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DeceasedBySSNResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToNSdeath__DeceasedInfo(soap, "NSdeath:DeceasedBySSNResult", &(a->_NSdeath__DeceasedBySSNResponse::DeceasedBySSNResult), "NSdeath:DeceasedInfo"))
				{	soap_flag_DeceasedBySSNResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "NSdeath:DeceasedBySSNResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NSdeath__DeceasedBySSNResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NSdeath__DeceasedBySSNResponse, 0, sizeof(_NSdeath__DeceasedBySSNResponse), 0, soap_copy__NSdeath__DeceasedBySSNResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DeceasedBySSNResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NSdeath__DeceasedBySSNResponse * SOAP_FMAC6 soap_new__NSdeath__DeceasedBySSNResponse(struct soap *soap, int n)
{	return soap_instantiate__NSdeath__DeceasedBySSNResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NSdeath__DeceasedBySSNResponse(struct soap *soap, _NSdeath__DeceasedBySSNResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NSdeath__DeceasedBySSNResponse * SOAP_FMAC4 soap_instantiate__NSdeath__DeceasedBySSNResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NSdeath__DeceasedBySSNResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NSdeath__DeceasedBySSNResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NSdeath__DeceasedBySSNResponse;
		if (size)
			*size = sizeof(_NSdeath__DeceasedBySSNResponse);
		((_NSdeath__DeceasedBySSNResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NSdeath__DeceasedBySSNResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NSdeath__DeceasedBySSNResponse);
		for (int i = 0; i < n; i++)
			((_NSdeath__DeceasedBySSNResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NSdeath__DeceasedBySSNResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NSdeath__DeceasedBySSNResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NSdeath__DeceasedBySSNResponse %p -> %p\n", q, p));
	*(_NSdeath__DeceasedBySSNResponse*)p = *(_NSdeath__DeceasedBySSNResponse*)q;
}

void _NSdeath__DeceasedBySSN::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NSdeath__DeceasedBySSN::ssn = NULL;
	this->_NSdeath__DeceasedBySSN::LicenseKey = NULL;
	/* transient soap skipped */
}

void _NSdeath__DeceasedBySSN::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_NSdeath__DeceasedBySSN::ssn);
	soap_serialize_PointerTostd__string(soap, &this->_NSdeath__DeceasedBySSN::LicenseKey);
	/* transient soap skipped */
}

int _NSdeath__DeceasedBySSN::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NSdeath__DeceasedBySSN);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NSdeath__DeceasedBySSN::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NSdeath__DeceasedBySSN(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NSdeath__DeceasedBySSN(struct soap *soap, const char *tag, int id, const _NSdeath__DeceasedBySSN *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NSdeath__DeceasedBySSN), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:ssn", -1, &(a->_NSdeath__DeceasedBySSN::ssn), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:LicenseKey", -1, &(a->_NSdeath__DeceasedBySSN::LicenseKey), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NSdeath__DeceasedBySSN::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NSdeath__DeceasedBySSN(soap, this, tag, type);
}

SOAP_FMAC3 _NSdeath__DeceasedBySSN * SOAP_FMAC4 soap_get__NSdeath__DeceasedBySSN(struct soap *soap, _NSdeath__DeceasedBySSN *p, const char *tag, const char *type)
{
	if ((p = soap_in__NSdeath__DeceasedBySSN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NSdeath__DeceasedBySSN::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NSdeath__DeceasedBySSN(soap, tag, this, type);
}

SOAP_FMAC3 _NSdeath__DeceasedBySSN * SOAP_FMAC4 soap_in__NSdeath__DeceasedBySSN(struct soap *soap, const char *tag, _NSdeath__DeceasedBySSN *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NSdeath__DeceasedBySSN *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NSdeath__DeceasedBySSN, sizeof(_NSdeath__DeceasedBySSN), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NSdeath__DeceasedBySSN)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NSdeath__DeceasedBySSN *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ssn1 = 1;
	size_t soap_flag_LicenseKey1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ssn1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:ssn", &(a->_NSdeath__DeceasedBySSN::ssn), "xsd:string"))
				{	soap_flag_ssn1--;
					continue;
				}
			if (soap_flag_LicenseKey1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:LicenseKey", &(a->_NSdeath__DeceasedBySSN::LicenseKey), "xsd:string"))
				{	soap_flag_LicenseKey1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NSdeath__DeceasedBySSN *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NSdeath__DeceasedBySSN, 0, sizeof(_NSdeath__DeceasedBySSN), 0, soap_copy__NSdeath__DeceasedBySSN);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _NSdeath__DeceasedBySSN * SOAP_FMAC6 soap_new__NSdeath__DeceasedBySSN(struct soap *soap, int n)
{	return soap_instantiate__NSdeath__DeceasedBySSN(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NSdeath__DeceasedBySSN(struct soap *soap, _NSdeath__DeceasedBySSN *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NSdeath__DeceasedBySSN * SOAP_FMAC4 soap_instantiate__NSdeath__DeceasedBySSN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NSdeath__DeceasedBySSN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NSdeath__DeceasedBySSN, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NSdeath__DeceasedBySSN;
		if (size)
			*size = sizeof(_NSdeath__DeceasedBySSN);
		((_NSdeath__DeceasedBySSN*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NSdeath__DeceasedBySSN[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NSdeath__DeceasedBySSN);
		for (int i = 0; i < n; i++)
			((_NSdeath__DeceasedBySSN*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NSdeath__DeceasedBySSN*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NSdeath__DeceasedBySSN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NSdeath__DeceasedBySSN %p -> %p\n", q, p));
	*(_NSdeath__DeceasedBySSN*)p = *(_NSdeath__DeceasedBySSN*)q;
}

void NSdeath__DeceasedInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->NSdeath__DeceasedInfo::SSN = NULL;
	this->NSdeath__DeceasedInfo::NameSuffix = NULL;
	this->NSdeath__DeceasedInfo::LastName = NULL;
	this->NSdeath__DeceasedInfo::FirstName = NULL;
	this->NSdeath__DeceasedInfo::MiddleName = NULL;
	this->NSdeath__DeceasedInfo::Verified = NULL;
	soap_default_time(soap, &this->NSdeath__DeceasedInfo::BirthDate);
	soap_default_time(soap, &this->NSdeath__DeceasedInfo::DeathDate);
	this->NSdeath__DeceasedInfo::ZipLastResidence = NULL;
	this->NSdeath__DeceasedInfo::ZipLumpSumPay = NULL;
	soap_default_bool(soap, &this->NSdeath__DeceasedInfo::Match);
	this->NSdeath__DeceasedInfo::ErrorText = NULL;
	/* transient soap skipped */
}

void NSdeath__DeceasedInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->NSdeath__DeceasedInfo::SSN);
	soap_serialize_PointerTostd__string(soap, &this->NSdeath__DeceasedInfo::NameSuffix);
	soap_serialize_PointerTostd__string(soap, &this->NSdeath__DeceasedInfo::LastName);
	soap_serialize_PointerTostd__string(soap, &this->NSdeath__DeceasedInfo::FirstName);
	soap_serialize_PointerTostd__string(soap, &this->NSdeath__DeceasedInfo::MiddleName);
	soap_serialize_PointerTostd__string(soap, &this->NSdeath__DeceasedInfo::Verified);
	soap_embedded(soap, &this->NSdeath__DeceasedInfo::BirthDate, SOAP_TYPE_time);
	soap_embedded(soap, &this->NSdeath__DeceasedInfo::DeathDate, SOAP_TYPE_time);
	soap_serialize_PointerTostd__string(soap, &this->NSdeath__DeceasedInfo::ZipLastResidence);
	soap_serialize_PointerTostd__string(soap, &this->NSdeath__DeceasedInfo::ZipLumpSumPay);
	soap_serialize_PointerTostd__string(soap, &this->NSdeath__DeceasedInfo::ErrorText);
	/* transient soap skipped */
}

int NSdeath__DeceasedInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_NSdeath__DeceasedInfo);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int NSdeath__DeceasedInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_NSdeath__DeceasedInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NSdeath__DeceasedInfo(struct soap *soap, const char *tag, int id, const NSdeath__DeceasedInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NSdeath__DeceasedInfo), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:SSN", -1, &(a->NSdeath__DeceasedInfo::SSN), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:NameSuffix", -1, &(a->NSdeath__DeceasedInfo::NameSuffix), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:LastName", -1, &(a->NSdeath__DeceasedInfo::LastName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:FirstName", -1, &(a->NSdeath__DeceasedInfo::FirstName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:MiddleName", -1, &(a->NSdeath__DeceasedInfo::MiddleName), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:Verified", -1, &(a->NSdeath__DeceasedInfo::Verified), ""))
		return soap->error;
	if (soap_out_time(soap, "NSdeath:BirthDate", -1, &(a->NSdeath__DeceasedInfo::BirthDate), ""))
		return soap->error;
	if (soap_out_time(soap, "NSdeath:DeathDate", -1, &(a->NSdeath__DeceasedInfo::DeathDate), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:ZipLastResidence", -1, &(a->NSdeath__DeceasedInfo::ZipLastResidence), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:ZipLumpSumPay", -1, &(a->NSdeath__DeceasedInfo::ZipLumpSumPay), ""))
		return soap->error;
	if (soap_out_bool(soap, "NSdeath:Match", -1, &(a->NSdeath__DeceasedInfo::Match), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NSdeath:ErrorText", -1, &(a->NSdeath__DeceasedInfo::ErrorText), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *NSdeath__DeceasedInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_NSdeath__DeceasedInfo(soap, this, tag, type);
}

SOAP_FMAC3 NSdeath__DeceasedInfo * SOAP_FMAC4 soap_get_NSdeath__DeceasedInfo(struct soap *soap, NSdeath__DeceasedInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_NSdeath__DeceasedInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *NSdeath__DeceasedInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_NSdeath__DeceasedInfo(soap, tag, this, type);
}

SOAP_FMAC3 NSdeath__DeceasedInfo * SOAP_FMAC4 soap_in_NSdeath__DeceasedInfo(struct soap *soap, const char *tag, NSdeath__DeceasedInfo *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (NSdeath__DeceasedInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_NSdeath__DeceasedInfo, sizeof(NSdeath__DeceasedInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_NSdeath__DeceasedInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (NSdeath__DeceasedInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SSN1 = 1;
	size_t soap_flag_NameSuffix1 = 1;
	size_t soap_flag_LastName1 = 1;
	size_t soap_flag_FirstName1 = 1;
	size_t soap_flag_MiddleName1 = 1;
	size_t soap_flag_Verified1 = 1;
	size_t soap_flag_BirthDate1 = 1;
	size_t soap_flag_DeathDate1 = 1;
	size_t soap_flag_ZipLastResidence1 = 1;
	size_t soap_flag_ZipLumpSumPay1 = 1;
	size_t soap_flag_Match1 = 1;
	size_t soap_flag_ErrorText1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SSN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:SSN", &(a->NSdeath__DeceasedInfo::SSN), "xsd:string"))
				{	soap_flag_SSN1--;
					continue;
				}
			if (soap_flag_NameSuffix1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:NameSuffix", &(a->NSdeath__DeceasedInfo::NameSuffix), "xsd:string"))
				{	soap_flag_NameSuffix1--;
					continue;
				}
			if (soap_flag_LastName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:LastName", &(a->NSdeath__DeceasedInfo::LastName), "xsd:string"))
				{	soap_flag_LastName1--;
					continue;
				}
			if (soap_flag_FirstName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:FirstName", &(a->NSdeath__DeceasedInfo::FirstName), "xsd:string"))
				{	soap_flag_FirstName1--;
					continue;
				}
			if (soap_flag_MiddleName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:MiddleName", &(a->NSdeath__DeceasedInfo::MiddleName), "xsd:string"))
				{	soap_flag_MiddleName1--;
					continue;
				}
			if (soap_flag_Verified1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:Verified", &(a->NSdeath__DeceasedInfo::Verified), "xsd:string"))
				{	soap_flag_Verified1--;
					continue;
				}
			if (soap_flag_BirthDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "NSdeath:BirthDate", &(a->NSdeath__DeceasedInfo::BirthDate), "xsd:dateTime"))
				{	soap_flag_BirthDate1--;
					continue;
				}
			if (soap_flag_DeathDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "NSdeath:DeathDate", &(a->NSdeath__DeceasedInfo::DeathDate), "xsd:dateTime"))
				{	soap_flag_DeathDate1--;
					continue;
				}
			if (soap_flag_ZipLastResidence1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:ZipLastResidence", &(a->NSdeath__DeceasedInfo::ZipLastResidence), "xsd:string"))
				{	soap_flag_ZipLastResidence1--;
					continue;
				}
			if (soap_flag_ZipLumpSumPay1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:ZipLumpSumPay", &(a->NSdeath__DeceasedInfo::ZipLumpSumPay), "xsd:string"))
				{	soap_flag_ZipLumpSumPay1--;
					continue;
				}
			if (soap_flag_Match1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "NSdeath:Match", &(a->NSdeath__DeceasedInfo::Match), "xsd:boolean"))
				{	soap_flag_Match1--;
					continue;
				}
			if (soap_flag_ErrorText1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NSdeath:ErrorText", &(a->NSdeath__DeceasedInfo::ErrorText), "xsd:string"))
				{	soap_flag_ErrorText1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (NSdeath__DeceasedInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NSdeath__DeceasedInfo, 0, sizeof(NSdeath__DeceasedInfo), 0, soap_copy_NSdeath__DeceasedInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_BirthDate1 > 0 || soap_flag_DeathDate1 > 0 || soap_flag_Match1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 NSdeath__DeceasedInfo * SOAP_FMAC6 soap_new_NSdeath__DeceasedInfo(struct soap *soap, int n)
{	return soap_instantiate_NSdeath__DeceasedInfo(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_NSdeath__DeceasedInfo(struct soap *soap, NSdeath__DeceasedInfo *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 NSdeath__DeceasedInfo * SOAP_FMAC4 soap_instantiate_NSdeath__DeceasedInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_NSdeath__DeceasedInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_NSdeath__DeceasedInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new NSdeath__DeceasedInfo;
		if (size)
			*size = sizeof(NSdeath__DeceasedInfo);
		((NSdeath__DeceasedInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new NSdeath__DeceasedInfo[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(NSdeath__DeceasedInfo);
		for (int i = 0; i < n; i++)
			((NSdeath__DeceasedInfo*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (NSdeath__DeceasedInfo*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NSdeath__DeceasedInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying NSdeath__DeceasedInfo %p -> %p\n", q, p));
	*(NSdeath__DeceasedInfo*)p = *(NSdeath__DeceasedInfo*)q;
}

void _NShday__DataSet::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default__xsd__schema(soap, &this->_NShday__DataSet::xsd__schema);
	this->_NShday__DataSet::__any = NULL;
	/* transient soap skipped */
}

void _NShday__DataSet::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__xsd__schema(soap, &this->_NShday__DataSet::xsd__schema);
	/* transient soap skipped */
}

int _NShday__DataSet::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__DataSet);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__DataSet::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__DataSet(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__DataSet(struct soap *soap, const char *tag, int id, const _NShday__DataSet *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__DataSet), type))
		return soap->error;
	if (soap_out__xsd__schema(soap, "xsd:schema", -1, &(a->_NShday__DataSet::xsd__schema), ""))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_NShday__DataSet::__any), NULL);
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NShday__DataSet::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__DataSet(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__DataSet * SOAP_FMAC4 soap_get__NShday__DataSet(struct soap *soap, _NShday__DataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__DataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__DataSet::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__DataSet(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__DataSet * SOAP_FMAC4 soap_in__NShday__DataSet(struct soap *soap, const char *tag, _NShday__DataSet *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__DataSet *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__DataSet, sizeof(_NShday__DataSet), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__DataSet)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__DataSet *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_xsd__schema1 = 1;
	size_t soap_flag___any1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xsd__schema1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__xsd__schema(soap, "xsd:schema", &(a->_NShday__DataSet::xsd__schema), ""))
				{	soap_flag_xsd__schema1--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_NShday__DataSet::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__DataSet *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__DataSet, 0, sizeof(_NShday__DataSet), 0, soap_copy__NShday__DataSet);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xsd__schema1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__DataSet * SOAP_FMAC6 soap_new__NShday__DataSet(struct soap *soap, int n)
{	return soap_instantiate__NShday__DataSet(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__DataSet(struct soap *soap, _NShday__DataSet *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__DataSet * SOAP_FMAC4 soap_instantiate__NShday__DataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__DataSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__DataSet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__DataSet;
		if (size)
			*size = sizeof(_NShday__DataSet);
		((_NShday__DataSet*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NShday__DataSet[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__DataSet);
		for (int i = 0; i < n; i++)
			((_NShday__DataSet*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__DataSet*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__DataSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__DataSet %p -> %p\n", q, p));
	*(_NShday__DataSet*)p = *(_NShday__DataSet*)q;
}

void _NShday__GetHolidaysForDateRangeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NShday__GetHolidaysForDateRangeResponse::GetHolidaysForDateRangeResult = NULL;
	/* transient soap skipped */
}

void _NShday__GetHolidaysForDateRangeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, &this->_NShday__GetHolidaysForDateRangeResponse::GetHolidaysForDateRangeResult);
	/* transient soap skipped */
}

int _NShday__GetHolidaysForDateRangeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetHolidaysForDateRangeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetHolidaysForDateRangeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetHolidaysForDateRangeResponse(struct soap *soap, const char *tag, int id, const _NShday__GetHolidaysForDateRangeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse), type))
		return soap->error;
	if (a->GetHolidaysForDateRangeResult)
		soap_element_result(soap, "NShday:GetHolidaysForDateRangeResult");
	if (soap_out_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, "NShday:GetHolidaysForDateRangeResult", -1, &(a->_NShday__GetHolidaysForDateRangeResponse::GetHolidaysForDateRangeResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetHolidaysForDateRangeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetHolidaysForDateRangeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRangeResponse * SOAP_FMAC4 soap_get__NShday__GetHolidaysForDateRangeResponse(struct soap *soap, _NShday__GetHolidaysForDateRangeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetHolidaysForDateRangeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetHolidaysForDateRangeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetHolidaysForDateRangeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRangeResponse * SOAP_FMAC4 soap_in__NShday__GetHolidaysForDateRangeResponse(struct soap *soap, const char *tag, _NShday__GetHolidaysForDateRangeResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetHolidaysForDateRangeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse, sizeof(_NShday__GetHolidaysForDateRangeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetHolidaysForDateRangeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetHolidaysForDateRangeResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetHolidaysForDateRangeResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, "NShday:GetHolidaysForDateRangeResult", &(a->_NShday__GetHolidaysForDateRangeResponse::GetHolidaysForDateRangeResult), ""))
				{	soap_flag_GetHolidaysForDateRangeResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "NShday:GetHolidaysForDateRangeResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetHolidaysForDateRangeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse, 0, sizeof(_NShday__GetHolidaysForDateRangeResponse), 0, soap_copy__NShday__GetHolidaysForDateRangeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetHolidaysForDateRangeResponse * SOAP_FMAC6 soap_new__NShday__GetHolidaysForDateRangeResponse(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetHolidaysForDateRangeResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetHolidaysForDateRangeResponse(struct soap *soap, _NShday__GetHolidaysForDateRangeResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRangeResponse * SOAP_FMAC4 soap_instantiate__NShday__GetHolidaysForDateRangeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetHolidaysForDateRangeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetHolidaysForDateRangeResponse;
		if (size)
			*size = sizeof(_NShday__GetHolidaysForDateRangeResponse);
		((_NShday__GetHolidaysForDateRangeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NShday__GetHolidaysForDateRangeResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetHolidaysForDateRangeResponse);
		for (int i = 0; i < n; i++)
			((_NShday__GetHolidaysForDateRangeResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetHolidaysForDateRangeResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetHolidaysForDateRangeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetHolidaysForDateRangeResponse %p -> %p\n", q, p));
	*(_NShday__GetHolidaysForDateRangeResponse*)p = *(_NShday__GetHolidaysForDateRangeResponse*)q;
}

void _NShday__GetHolidaysForDateRange::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NShday__GetHolidaysForDateRange::countryCode = NULL;
	soap_default_time(soap, &this->_NShday__GetHolidaysForDateRange::startDate);
	soap_default_time(soap, &this->_NShday__GetHolidaysForDateRange::endDate);
	/* transient soap skipped */
}

void _NShday__GetHolidaysForDateRange::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_NShday__GetHolidaysForDateRange::countryCode);
	soap_embedded(soap, &this->_NShday__GetHolidaysForDateRange::startDate, SOAP_TYPE_time);
	soap_embedded(soap, &this->_NShday__GetHolidaysForDateRange::endDate, SOAP_TYPE_time);
	/* transient soap skipped */
}

int _NShday__GetHolidaysForDateRange::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetHolidaysForDateRange);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetHolidaysForDateRange::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetHolidaysForDateRange(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetHolidaysForDateRange(struct soap *soap, const char *tag, int id, const _NShday__GetHolidaysForDateRange *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetHolidaysForDateRange), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NShday:countryCode", -1, &(a->_NShday__GetHolidaysForDateRange::countryCode), ""))
		return soap->error;
	if (soap_out_time(soap, "NShday:startDate", -1, &(a->_NShday__GetHolidaysForDateRange::startDate), ""))
		return soap->error;
	if (soap_out_time(soap, "NShday:endDate", -1, &(a->_NShday__GetHolidaysForDateRange::endDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetHolidaysForDateRange::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetHolidaysForDateRange(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRange * SOAP_FMAC4 soap_get__NShday__GetHolidaysForDateRange(struct soap *soap, _NShday__GetHolidaysForDateRange *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetHolidaysForDateRange(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetHolidaysForDateRange::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetHolidaysForDateRange(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRange * SOAP_FMAC4 soap_in__NShday__GetHolidaysForDateRange(struct soap *soap, const char *tag, _NShday__GetHolidaysForDateRange *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetHolidaysForDateRange *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetHolidaysForDateRange, sizeof(_NShday__GetHolidaysForDateRange), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetHolidaysForDateRange)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetHolidaysForDateRange *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_countryCode1 = 1;
	size_t soap_flag_startDate1 = 1;
	size_t soap_flag_endDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_countryCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NShday:countryCode", &(a->_NShday__GetHolidaysForDateRange::countryCode), "xsd:string"))
				{	soap_flag_countryCode1--;
					continue;
				}
			if (soap_flag_startDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "NShday:startDate", &(a->_NShday__GetHolidaysForDateRange::startDate), "xsd:dateTime"))
				{	soap_flag_startDate1--;
					continue;
				}
			if (soap_flag_endDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "NShday:endDate", &(a->_NShday__GetHolidaysForDateRange::endDate), "xsd:dateTime"))
				{	soap_flag_endDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetHolidaysForDateRange *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetHolidaysForDateRange, 0, sizeof(_NShday__GetHolidaysForDateRange), 0, soap_copy__NShday__GetHolidaysForDateRange);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_startDate1 > 0 || soap_flag_endDate1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetHolidaysForDateRange * SOAP_FMAC6 soap_new__NShday__GetHolidaysForDateRange(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetHolidaysForDateRange(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetHolidaysForDateRange(struct soap *soap, _NShday__GetHolidaysForDateRange *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRange * SOAP_FMAC4 soap_instantiate__NShday__GetHolidaysForDateRange(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetHolidaysForDateRange(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetHolidaysForDateRange, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetHolidaysForDateRange;
		if (size)
			*size = sizeof(_NShday__GetHolidaysForDateRange);
		((_NShday__GetHolidaysForDateRange*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NShday__GetHolidaysForDateRange[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetHolidaysForDateRange);
		for (int i = 0; i < n; i++)
			((_NShday__GetHolidaysForDateRange*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetHolidaysForDateRange*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetHolidaysForDateRange(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetHolidaysForDateRange %p -> %p\n", q, p));
	*(_NShday__GetHolidaysForDateRange*)p = *(_NShday__GetHolidaysForDateRange*)q;
}

void _NShday__GetHolidaysForMonthResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NShday__GetHolidaysForMonthResponse::GetHolidaysForMonthResult = NULL;
	/* transient soap skipped */
}

void _NShday__GetHolidaysForMonthResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, &this->_NShday__GetHolidaysForMonthResponse::GetHolidaysForMonthResult);
	/* transient soap skipped */
}

int _NShday__GetHolidaysForMonthResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetHolidaysForMonthResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetHolidaysForMonthResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetHolidaysForMonthResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetHolidaysForMonthResponse(struct soap *soap, const char *tag, int id, const _NShday__GetHolidaysForMonthResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetHolidaysForMonthResponse), type))
		return soap->error;
	if (a->GetHolidaysForMonthResult)
		soap_element_result(soap, "NShday:GetHolidaysForMonthResult");
	if (soap_out_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, "NShday:GetHolidaysForMonthResult", -1, &(a->_NShday__GetHolidaysForMonthResponse::GetHolidaysForMonthResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetHolidaysForMonthResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetHolidaysForMonthResponse(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForMonthResponse * SOAP_FMAC4 soap_get__NShday__GetHolidaysForMonthResponse(struct soap *soap, _NShday__GetHolidaysForMonthResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetHolidaysForMonthResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetHolidaysForMonthResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetHolidaysForMonthResponse(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForMonthResponse * SOAP_FMAC4 soap_in__NShday__GetHolidaysForMonthResponse(struct soap *soap, const char *tag, _NShday__GetHolidaysForMonthResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetHolidaysForMonthResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetHolidaysForMonthResponse, sizeof(_NShday__GetHolidaysForMonthResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetHolidaysForMonthResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetHolidaysForMonthResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetHolidaysForMonthResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetHolidaysForMonthResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, "NShday:GetHolidaysForMonthResult", &(a->_NShday__GetHolidaysForMonthResponse::GetHolidaysForMonthResult), ""))
				{	soap_flag_GetHolidaysForMonthResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "NShday:GetHolidaysForMonthResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetHolidaysForMonthResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetHolidaysForMonthResponse, 0, sizeof(_NShday__GetHolidaysForMonthResponse), 0, soap_copy__NShday__GetHolidaysForMonthResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetHolidaysForMonthResponse * SOAP_FMAC6 soap_new__NShday__GetHolidaysForMonthResponse(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetHolidaysForMonthResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetHolidaysForMonthResponse(struct soap *soap, _NShday__GetHolidaysForMonthResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetHolidaysForMonthResponse * SOAP_FMAC4 soap_instantiate__NShday__GetHolidaysForMonthResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetHolidaysForMonthResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetHolidaysForMonthResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetHolidaysForMonthResponse;
		if (size)
			*size = sizeof(_NShday__GetHolidaysForMonthResponse);
		((_NShday__GetHolidaysForMonthResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NShday__GetHolidaysForMonthResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetHolidaysForMonthResponse);
		for (int i = 0; i < n; i++)
			((_NShday__GetHolidaysForMonthResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetHolidaysForMonthResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetHolidaysForMonthResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetHolidaysForMonthResponse %p -> %p\n", q, p));
	*(_NShday__GetHolidaysForMonthResponse*)p = *(_NShday__GetHolidaysForMonthResponse*)q;
}

void _NShday__GetHolidaysForMonth::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NShday__GetHolidaysForMonth::countryCode = NULL;
	soap_default_int(soap, &this->_NShday__GetHolidaysForMonth::year);
	soap_default_int(soap, &this->_NShday__GetHolidaysForMonth::month);
	/* transient soap skipped */
}

void _NShday__GetHolidaysForMonth::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_NShday__GetHolidaysForMonth::countryCode);
	/* transient soap skipped */
}

int _NShday__GetHolidaysForMonth::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetHolidaysForMonth);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetHolidaysForMonth::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetHolidaysForMonth(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetHolidaysForMonth(struct soap *soap, const char *tag, int id, const _NShday__GetHolidaysForMonth *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetHolidaysForMonth), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NShday:countryCode", -1, &(a->_NShday__GetHolidaysForMonth::countryCode), ""))
		return soap->error;
	if (soap_out_int(soap, "NShday:year", -1, &(a->_NShday__GetHolidaysForMonth::year), ""))
		return soap->error;
	if (soap_out_int(soap, "NShday:month", -1, &(a->_NShday__GetHolidaysForMonth::month), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetHolidaysForMonth::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetHolidaysForMonth(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForMonth * SOAP_FMAC4 soap_get__NShday__GetHolidaysForMonth(struct soap *soap, _NShday__GetHolidaysForMonth *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetHolidaysForMonth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetHolidaysForMonth::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetHolidaysForMonth(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForMonth * SOAP_FMAC4 soap_in__NShday__GetHolidaysForMonth(struct soap *soap, const char *tag, _NShday__GetHolidaysForMonth *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetHolidaysForMonth *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetHolidaysForMonth, sizeof(_NShday__GetHolidaysForMonth), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetHolidaysForMonth)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetHolidaysForMonth *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_countryCode1 = 1;
	size_t soap_flag_year1 = 1;
	size_t soap_flag_month1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_countryCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NShday:countryCode", &(a->_NShday__GetHolidaysForMonth::countryCode), "xsd:string"))
				{	soap_flag_countryCode1--;
					continue;
				}
			if (soap_flag_year1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "NShday:year", &(a->_NShday__GetHolidaysForMonth::year), "xsd:int"))
				{	soap_flag_year1--;
					continue;
				}
			if (soap_flag_month1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "NShday:month", &(a->_NShday__GetHolidaysForMonth::month), "xsd:int"))
				{	soap_flag_month1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetHolidaysForMonth *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetHolidaysForMonth, 0, sizeof(_NShday__GetHolidaysForMonth), 0, soap_copy__NShday__GetHolidaysForMonth);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_year1 > 0 || soap_flag_month1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetHolidaysForMonth * SOAP_FMAC6 soap_new__NShday__GetHolidaysForMonth(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetHolidaysForMonth(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetHolidaysForMonth(struct soap *soap, _NShday__GetHolidaysForMonth *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetHolidaysForMonth * SOAP_FMAC4 soap_instantiate__NShday__GetHolidaysForMonth(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetHolidaysForMonth(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetHolidaysForMonth, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetHolidaysForMonth;
		if (size)
			*size = sizeof(_NShday__GetHolidaysForMonth);
		((_NShday__GetHolidaysForMonth*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NShday__GetHolidaysForMonth[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetHolidaysForMonth);
		for (int i = 0; i < n; i++)
			((_NShday__GetHolidaysForMonth*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetHolidaysForMonth*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetHolidaysForMonth(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetHolidaysForMonth %p -> %p\n", q, p));
	*(_NShday__GetHolidaysForMonth*)p = *(_NShday__GetHolidaysForMonth*)q;
}

void _NShday__GetHolidaysForYearResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NShday__GetHolidaysForYearResponse::GetHolidaysForYearResult = NULL;
	/* transient soap skipped */
}

void _NShday__GetHolidaysForYearResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, &this->_NShday__GetHolidaysForYearResponse::GetHolidaysForYearResult);
	/* transient soap skipped */
}

int _NShday__GetHolidaysForYearResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetHolidaysForYearResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetHolidaysForYearResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetHolidaysForYearResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetHolidaysForYearResponse(struct soap *soap, const char *tag, int id, const _NShday__GetHolidaysForYearResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetHolidaysForYearResponse), type))
		return soap->error;
	if (a->GetHolidaysForYearResult)
		soap_element_result(soap, "NShday:GetHolidaysForYearResult");
	if (soap_out_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, "NShday:GetHolidaysForYearResult", -1, &(a->_NShday__GetHolidaysForYearResponse::GetHolidaysForYearResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetHolidaysForYearResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetHolidaysForYearResponse(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForYearResponse * SOAP_FMAC4 soap_get__NShday__GetHolidaysForYearResponse(struct soap *soap, _NShday__GetHolidaysForYearResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetHolidaysForYearResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetHolidaysForYearResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetHolidaysForYearResponse(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForYearResponse * SOAP_FMAC4 soap_in__NShday__GetHolidaysForYearResponse(struct soap *soap, const char *tag, _NShday__GetHolidaysForYearResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetHolidaysForYearResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetHolidaysForYearResponse, sizeof(_NShday__GetHolidaysForYearResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetHolidaysForYearResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetHolidaysForYearResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetHolidaysForYearResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetHolidaysForYearResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, "NShday:GetHolidaysForYearResult", &(a->_NShday__GetHolidaysForYearResponse::GetHolidaysForYearResult), ""))
				{	soap_flag_GetHolidaysForYearResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "NShday:GetHolidaysForYearResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetHolidaysForYearResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetHolidaysForYearResponse, 0, sizeof(_NShday__GetHolidaysForYearResponse), 0, soap_copy__NShday__GetHolidaysForYearResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetHolidaysForYearResponse * SOAP_FMAC6 soap_new__NShday__GetHolidaysForYearResponse(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetHolidaysForYearResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetHolidaysForYearResponse(struct soap *soap, _NShday__GetHolidaysForYearResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetHolidaysForYearResponse * SOAP_FMAC4 soap_instantiate__NShday__GetHolidaysForYearResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetHolidaysForYearResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetHolidaysForYearResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetHolidaysForYearResponse;
		if (size)
			*size = sizeof(_NShday__GetHolidaysForYearResponse);
		((_NShday__GetHolidaysForYearResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NShday__GetHolidaysForYearResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetHolidaysForYearResponse);
		for (int i = 0; i < n; i++)
			((_NShday__GetHolidaysForYearResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetHolidaysForYearResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetHolidaysForYearResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetHolidaysForYearResponse %p -> %p\n", q, p));
	*(_NShday__GetHolidaysForYearResponse*)p = *(_NShday__GetHolidaysForYearResponse*)q;
}

void _NShday__GetHolidaysForYear::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NShday__GetHolidaysForYear::countryCode = NULL;
	soap_default_int(soap, &this->_NShday__GetHolidaysForYear::year);
	/* transient soap skipped */
}

void _NShday__GetHolidaysForYear::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_NShday__GetHolidaysForYear::countryCode);
	/* transient soap skipped */
}

int _NShday__GetHolidaysForYear::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetHolidaysForYear);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetHolidaysForYear::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetHolidaysForYear(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetHolidaysForYear(struct soap *soap, const char *tag, int id, const _NShday__GetHolidaysForYear *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetHolidaysForYear), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NShday:countryCode", -1, &(a->_NShday__GetHolidaysForYear::countryCode), ""))
		return soap->error;
	if (soap_out_int(soap, "NShday:year", -1, &(a->_NShday__GetHolidaysForYear::year), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetHolidaysForYear::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetHolidaysForYear(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForYear * SOAP_FMAC4 soap_get__NShday__GetHolidaysForYear(struct soap *soap, _NShday__GetHolidaysForYear *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetHolidaysForYear(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetHolidaysForYear::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetHolidaysForYear(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForYear * SOAP_FMAC4 soap_in__NShday__GetHolidaysForYear(struct soap *soap, const char *tag, _NShday__GetHolidaysForYear *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetHolidaysForYear *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetHolidaysForYear, sizeof(_NShday__GetHolidaysForYear), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetHolidaysForYear)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetHolidaysForYear *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_countryCode1 = 1;
	size_t soap_flag_year1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_countryCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NShday:countryCode", &(a->_NShday__GetHolidaysForYear::countryCode), "xsd:string"))
				{	soap_flag_countryCode1--;
					continue;
				}
			if (soap_flag_year1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "NShday:year", &(a->_NShday__GetHolidaysForYear::year), "xsd:int"))
				{	soap_flag_year1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetHolidaysForYear *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetHolidaysForYear, 0, sizeof(_NShday__GetHolidaysForYear), 0, soap_copy__NShday__GetHolidaysForYear);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_year1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetHolidaysForYear * SOAP_FMAC6 soap_new__NShday__GetHolidaysForYear(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetHolidaysForYear(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetHolidaysForYear(struct soap *soap, _NShday__GetHolidaysForYear *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetHolidaysForYear * SOAP_FMAC4 soap_instantiate__NShday__GetHolidaysForYear(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetHolidaysForYear(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetHolidaysForYear, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetHolidaysForYear;
		if (size)
			*size = sizeof(_NShday__GetHolidaysForYear);
		((_NShday__GetHolidaysForYear*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NShday__GetHolidaysForYear[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetHolidaysForYear);
		for (int i = 0; i < n; i++)
			((_NShday__GetHolidaysForYear*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetHolidaysForYear*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetHolidaysForYear(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetHolidaysForYear %p -> %p\n", q, p));
	*(_NShday__GetHolidaysForYear*)p = *(_NShday__GetHolidaysForYear*)q;
}

void _NShday__GetHolidayDateResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_time(soap, &this->_NShday__GetHolidayDateResponse::GetHolidayDateResult);
	/* transient soap skipped */
}

void _NShday__GetHolidayDateResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_NShday__GetHolidayDateResponse::GetHolidayDateResult, SOAP_TYPE_time);
	/* transient soap skipped */
}

int _NShday__GetHolidayDateResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetHolidayDateResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetHolidayDateResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetHolidayDateResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetHolidayDateResponse(struct soap *soap, const char *tag, int id, const _NShday__GetHolidayDateResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetHolidayDateResponse), type))
		return soap->error;
	soap_element_result(soap, "NShday:GetHolidayDateResult");
	if (soap_out_time(soap, "NShday:GetHolidayDateResult", -1, &(a->_NShday__GetHolidayDateResponse::GetHolidayDateResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetHolidayDateResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetHolidayDateResponse(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetHolidayDateResponse * SOAP_FMAC4 soap_get__NShday__GetHolidayDateResponse(struct soap *soap, _NShday__GetHolidayDateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetHolidayDateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetHolidayDateResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetHolidayDateResponse(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetHolidayDateResponse * SOAP_FMAC4 soap_in__NShday__GetHolidayDateResponse(struct soap *soap, const char *tag, _NShday__GetHolidayDateResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetHolidayDateResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetHolidayDateResponse, sizeof(_NShday__GetHolidayDateResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetHolidayDateResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetHolidayDateResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetHolidayDateResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetHolidayDateResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "NShday:GetHolidayDateResult", &(a->_NShday__GetHolidayDateResponse::GetHolidayDateResult), "xsd:dateTime"))
				{	soap_flag_GetHolidayDateResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "NShday:GetHolidayDateResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetHolidayDateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetHolidayDateResponse, 0, sizeof(_NShday__GetHolidayDateResponse), 0, soap_copy__NShday__GetHolidayDateResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetHolidayDateResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetHolidayDateResponse * SOAP_FMAC6 soap_new__NShday__GetHolidayDateResponse(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetHolidayDateResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetHolidayDateResponse(struct soap *soap, _NShday__GetHolidayDateResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetHolidayDateResponse * SOAP_FMAC4 soap_instantiate__NShday__GetHolidayDateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetHolidayDateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetHolidayDateResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetHolidayDateResponse;
		if (size)
			*size = sizeof(_NShday__GetHolidayDateResponse);
		((_NShday__GetHolidayDateResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NShday__GetHolidayDateResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetHolidayDateResponse);
		for (int i = 0; i < n; i++)
			((_NShday__GetHolidayDateResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetHolidayDateResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetHolidayDateResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetHolidayDateResponse %p -> %p\n", q, p));
	*(_NShday__GetHolidayDateResponse*)p = *(_NShday__GetHolidayDateResponse*)q;
}

void _NShday__GetHolidayDate::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NShday__GetHolidayDate::countryCode = NULL;
	this->_NShday__GetHolidayDate::holidayName = NULL;
	soap_default_int(soap, &this->_NShday__GetHolidayDate::year);
	/* transient soap skipped */
}

void _NShday__GetHolidayDate::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_NShday__GetHolidayDate::countryCode);
	soap_serialize_PointerTostd__string(soap, &this->_NShday__GetHolidayDate::holidayName);
	/* transient soap skipped */
}

int _NShday__GetHolidayDate::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetHolidayDate);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetHolidayDate::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetHolidayDate(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetHolidayDate(struct soap *soap, const char *tag, int id, const _NShday__GetHolidayDate *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetHolidayDate), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NShday:countryCode", -1, &(a->_NShday__GetHolidayDate::countryCode), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NShday:holidayName", -1, &(a->_NShday__GetHolidayDate::holidayName), ""))
		return soap->error;
	if (soap_out_int(soap, "NShday:year", -1, &(a->_NShday__GetHolidayDate::year), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetHolidayDate::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetHolidayDate(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetHolidayDate * SOAP_FMAC4 soap_get__NShday__GetHolidayDate(struct soap *soap, _NShday__GetHolidayDate *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetHolidayDate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetHolidayDate::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetHolidayDate(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetHolidayDate * SOAP_FMAC4 soap_in__NShday__GetHolidayDate(struct soap *soap, const char *tag, _NShday__GetHolidayDate *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetHolidayDate *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetHolidayDate, sizeof(_NShday__GetHolidayDate), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetHolidayDate)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetHolidayDate *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_countryCode1 = 1;
	size_t soap_flag_holidayName1 = 1;
	size_t soap_flag_year1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_countryCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NShday:countryCode", &(a->_NShday__GetHolidayDate::countryCode), "xsd:string"))
				{	soap_flag_countryCode1--;
					continue;
				}
			if (soap_flag_holidayName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NShday:holidayName", &(a->_NShday__GetHolidayDate::holidayName), "xsd:string"))
				{	soap_flag_holidayName1--;
					continue;
				}
			if (soap_flag_year1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "NShday:year", &(a->_NShday__GetHolidayDate::year), "xsd:int"))
				{	soap_flag_year1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetHolidayDate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetHolidayDate, 0, sizeof(_NShday__GetHolidayDate), 0, soap_copy__NShday__GetHolidayDate);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_year1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetHolidayDate * SOAP_FMAC6 soap_new__NShday__GetHolidayDate(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetHolidayDate(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetHolidayDate(struct soap *soap, _NShday__GetHolidayDate *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetHolidayDate * SOAP_FMAC4 soap_instantiate__NShday__GetHolidayDate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetHolidayDate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetHolidayDate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetHolidayDate;
		if (size)
			*size = sizeof(_NShday__GetHolidayDate);
		((_NShday__GetHolidayDate*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NShday__GetHolidayDate[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetHolidayDate);
		for (int i = 0; i < n; i++)
			((_NShday__GetHolidayDate*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetHolidayDate*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetHolidayDate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetHolidayDate %p -> %p\n", q, p));
	*(_NShday__GetHolidayDate*)p = *(_NShday__GetHolidayDate*)q;
}

void _NShday__GetHolidaysAvailableResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NShday__GetHolidaysAvailableResponse::GetHolidaysAvailableResult = NULL;
	/* transient soap skipped */
}

void _NShday__GetHolidaysAvailableResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, &this->_NShday__GetHolidaysAvailableResponse::GetHolidaysAvailableResult);
	/* transient soap skipped */
}

int _NShday__GetHolidaysAvailableResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetHolidaysAvailableResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetHolidaysAvailableResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetHolidaysAvailableResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetHolidaysAvailableResponse(struct soap *soap, const char *tag, int id, const _NShday__GetHolidaysAvailableResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetHolidaysAvailableResponse), type))
		return soap->error;
	if (a->GetHolidaysAvailableResult)
		soap_element_result(soap, "NShday:GetHolidaysAvailableResult");
	if (soap_out_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, "NShday:GetHolidaysAvailableResult", -1, &(a->_NShday__GetHolidaysAvailableResponse::GetHolidaysAvailableResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetHolidaysAvailableResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetHolidaysAvailableResponse(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetHolidaysAvailableResponse * SOAP_FMAC4 soap_get__NShday__GetHolidaysAvailableResponse(struct soap *soap, _NShday__GetHolidaysAvailableResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetHolidaysAvailableResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetHolidaysAvailableResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetHolidaysAvailableResponse(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetHolidaysAvailableResponse * SOAP_FMAC4 soap_in__NShday__GetHolidaysAvailableResponse(struct soap *soap, const char *tag, _NShday__GetHolidaysAvailableResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetHolidaysAvailableResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetHolidaysAvailableResponse, sizeof(_NShday__GetHolidaysAvailableResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetHolidaysAvailableResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetHolidaysAvailableResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetHolidaysAvailableResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetHolidaysAvailableResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, "NShday:GetHolidaysAvailableResult", &(a->_NShday__GetHolidaysAvailableResponse::GetHolidaysAvailableResult), ""))
				{	soap_flag_GetHolidaysAvailableResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "NShday:GetHolidaysAvailableResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetHolidaysAvailableResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetHolidaysAvailableResponse, 0, sizeof(_NShday__GetHolidaysAvailableResponse), 0, soap_copy__NShday__GetHolidaysAvailableResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetHolidaysAvailableResponse * SOAP_FMAC6 soap_new__NShday__GetHolidaysAvailableResponse(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetHolidaysAvailableResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetHolidaysAvailableResponse(struct soap *soap, _NShday__GetHolidaysAvailableResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetHolidaysAvailableResponse * SOAP_FMAC4 soap_instantiate__NShday__GetHolidaysAvailableResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetHolidaysAvailableResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetHolidaysAvailableResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetHolidaysAvailableResponse;
		if (size)
			*size = sizeof(_NShday__GetHolidaysAvailableResponse);
		((_NShday__GetHolidaysAvailableResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NShday__GetHolidaysAvailableResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetHolidaysAvailableResponse);
		for (int i = 0; i < n; i++)
			((_NShday__GetHolidaysAvailableResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetHolidaysAvailableResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetHolidaysAvailableResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetHolidaysAvailableResponse %p -> %p\n", q, p));
	*(_NShday__GetHolidaysAvailableResponse*)p = *(_NShday__GetHolidaysAvailableResponse*)q;
}

void _NShday__GetHolidaysAvailable::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NShday__GetHolidaysAvailable::countryCode = NULL;
	/* transient soap skipped */
}

void _NShday__GetHolidaysAvailable::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_NShday__GetHolidaysAvailable::countryCode);
	/* transient soap skipped */
}

int _NShday__GetHolidaysAvailable::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetHolidaysAvailable);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetHolidaysAvailable::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetHolidaysAvailable(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetHolidaysAvailable(struct soap *soap, const char *tag, int id, const _NShday__GetHolidaysAvailable *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetHolidaysAvailable), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NShday:countryCode", -1, &(a->_NShday__GetHolidaysAvailable::countryCode), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetHolidaysAvailable::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetHolidaysAvailable(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetHolidaysAvailable * SOAP_FMAC4 soap_get__NShday__GetHolidaysAvailable(struct soap *soap, _NShday__GetHolidaysAvailable *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetHolidaysAvailable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetHolidaysAvailable::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetHolidaysAvailable(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetHolidaysAvailable * SOAP_FMAC4 soap_in__NShday__GetHolidaysAvailable(struct soap *soap, const char *tag, _NShday__GetHolidaysAvailable *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetHolidaysAvailable *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetHolidaysAvailable, sizeof(_NShday__GetHolidaysAvailable), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetHolidaysAvailable)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetHolidaysAvailable *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_countryCode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_countryCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NShday:countryCode", &(a->_NShday__GetHolidaysAvailable::countryCode), "xsd:string"))
				{	soap_flag_countryCode1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetHolidaysAvailable *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetHolidaysAvailable, 0, sizeof(_NShday__GetHolidaysAvailable), 0, soap_copy__NShday__GetHolidaysAvailable);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetHolidaysAvailable * SOAP_FMAC6 soap_new__NShday__GetHolidaysAvailable(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetHolidaysAvailable(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetHolidaysAvailable(struct soap *soap, _NShday__GetHolidaysAvailable *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetHolidaysAvailable * SOAP_FMAC4 soap_instantiate__NShday__GetHolidaysAvailable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetHolidaysAvailable(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetHolidaysAvailable, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetHolidaysAvailable;
		if (size)
			*size = sizeof(_NShday__GetHolidaysAvailable);
		((_NShday__GetHolidaysAvailable*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NShday__GetHolidaysAvailable[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetHolidaysAvailable);
		for (int i = 0; i < n; i++)
			((_NShday__GetHolidaysAvailable*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetHolidaysAvailable*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetHolidaysAvailable(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetHolidaysAvailable %p -> %p\n", q, p));
	*(_NShday__GetHolidaysAvailable*)p = *(_NShday__GetHolidaysAvailable*)q;
}

void _NShday__GetCountriesAvailableResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NShday__GetCountriesAvailableResponse::GetCountriesAvailableResult = NULL;
	/* transient soap skipped */
}

void _NShday__GetCountriesAvailableResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, &this->_NShday__GetCountriesAvailableResponse::GetCountriesAvailableResult);
	/* transient soap skipped */
}

int _NShday__GetCountriesAvailableResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetCountriesAvailableResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetCountriesAvailableResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetCountriesAvailableResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetCountriesAvailableResponse(struct soap *soap, const char *tag, int id, const _NShday__GetCountriesAvailableResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetCountriesAvailableResponse), type))
		return soap->error;
	if (a->GetCountriesAvailableResult)
		soap_element_result(soap, "NShday:GetCountriesAvailableResult");
	if (soap_out_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, "NShday:GetCountriesAvailableResult", -1, &(a->_NShday__GetCountriesAvailableResponse::GetCountriesAvailableResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetCountriesAvailableResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetCountriesAvailableResponse(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetCountriesAvailableResponse * SOAP_FMAC4 soap_get__NShday__GetCountriesAvailableResponse(struct soap *soap, _NShday__GetCountriesAvailableResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetCountriesAvailableResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetCountriesAvailableResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetCountriesAvailableResponse(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetCountriesAvailableResponse * SOAP_FMAC4 soap_in__NShday__GetCountriesAvailableResponse(struct soap *soap, const char *tag, _NShday__GetCountriesAvailableResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetCountriesAvailableResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetCountriesAvailableResponse, sizeof(_NShday__GetCountriesAvailableResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetCountriesAvailableResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetCountriesAvailableResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetCountriesAvailableResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetCountriesAvailableResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, "NShday:GetCountriesAvailableResult", &(a->_NShday__GetCountriesAvailableResponse::GetCountriesAvailableResult), ""))
				{	soap_flag_GetCountriesAvailableResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "NShday:GetCountriesAvailableResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetCountriesAvailableResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetCountriesAvailableResponse, 0, sizeof(_NShday__GetCountriesAvailableResponse), 0, soap_copy__NShday__GetCountriesAvailableResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetCountriesAvailableResponse * SOAP_FMAC6 soap_new__NShday__GetCountriesAvailableResponse(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetCountriesAvailableResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetCountriesAvailableResponse(struct soap *soap, _NShday__GetCountriesAvailableResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetCountriesAvailableResponse * SOAP_FMAC4 soap_instantiate__NShday__GetCountriesAvailableResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetCountriesAvailableResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetCountriesAvailableResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetCountriesAvailableResponse;
		if (size)
			*size = sizeof(_NShday__GetCountriesAvailableResponse);
		((_NShday__GetCountriesAvailableResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NShday__GetCountriesAvailableResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetCountriesAvailableResponse);
		for (int i = 0; i < n; i++)
			((_NShday__GetCountriesAvailableResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetCountriesAvailableResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetCountriesAvailableResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetCountriesAvailableResponse %p -> %p\n", q, p));
	*(_NShday__GetCountriesAvailableResponse*)p = *(_NShday__GetCountriesAvailableResponse*)q;
}

void _NShday__GetCountriesAvailable::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _NShday__GetCountriesAvailable::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _NShday__GetCountriesAvailable::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NShday__GetCountriesAvailable);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NShday__GetCountriesAvailable::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NShday__GetCountriesAvailable(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NShday__GetCountriesAvailable(struct soap *soap, const char *tag, int id, const _NShday__GetCountriesAvailable *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NShday__GetCountriesAvailable), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NShday__GetCountriesAvailable::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NShday__GetCountriesAvailable(soap, this, tag, type);
}

SOAP_FMAC3 _NShday__GetCountriesAvailable * SOAP_FMAC4 soap_get__NShday__GetCountriesAvailable(struct soap *soap, _NShday__GetCountriesAvailable *p, const char *tag, const char *type)
{
	if ((p = soap_in__NShday__GetCountriesAvailable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NShday__GetCountriesAvailable::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NShday__GetCountriesAvailable(soap, tag, this, type);
}

SOAP_FMAC3 _NShday__GetCountriesAvailable * SOAP_FMAC4 soap_in__NShday__GetCountriesAvailable(struct soap *soap, const char *tag, _NShday__GetCountriesAvailable *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NShday__GetCountriesAvailable *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NShday__GetCountriesAvailable, sizeof(_NShday__GetCountriesAvailable), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NShday__GetCountriesAvailable)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NShday__GetCountriesAvailable *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NShday__GetCountriesAvailable *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NShday__GetCountriesAvailable, 0, sizeof(_NShday__GetCountriesAvailable), 0, soap_copy__NShday__GetCountriesAvailable);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _NShday__GetCountriesAvailable * SOAP_FMAC6 soap_new__NShday__GetCountriesAvailable(struct soap *soap, int n)
{	return soap_instantiate__NShday__GetCountriesAvailable(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NShday__GetCountriesAvailable(struct soap *soap, _NShday__GetCountriesAvailable *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NShday__GetCountriesAvailable * SOAP_FMAC4 soap_instantiate__NShday__GetCountriesAvailable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NShday__GetCountriesAvailable(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NShday__GetCountriesAvailable, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NShday__GetCountriesAvailable;
		if (size)
			*size = sizeof(_NShday__GetCountriesAvailable);
		((_NShday__GetCountriesAvailable*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NShday__GetCountriesAvailable[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NShday__GetCountriesAvailable);
		for (int i = 0; i < n; i++)
			((_NShday__GetCountriesAvailable*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NShday__GetCountriesAvailable*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NShday__GetCountriesAvailable(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NShday__GetCountriesAvailable %p -> %p\n", q, p));
	*(_NShday__GetCountriesAvailable*)p = *(_NShday__GetCountriesAvailable*)q;
}

void _NStrans__TranslateResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NStrans__TranslateResponse::TranslateResult = NULL;
	/* transient soap skipped */
}

void _NStrans__TranslateResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_NStrans__TranslateResponse::TranslateResult);
	/* transient soap skipped */
}

int _NStrans__TranslateResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NStrans__TranslateResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NStrans__TranslateResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NStrans__TranslateResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NStrans__TranslateResponse(struct soap *soap, const char *tag, int id, const _NStrans__TranslateResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NStrans__TranslateResponse), type))
		return soap->error;
	if (a->TranslateResult)
		soap_element_result(soap, "NStrans:TranslateResult");
	if (soap_out_PointerTostd__string(soap, "NStrans:TranslateResult", -1, &(a->_NStrans__TranslateResponse::TranslateResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NStrans__TranslateResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NStrans__TranslateResponse(soap, this, tag, type);
}

SOAP_FMAC3 _NStrans__TranslateResponse * SOAP_FMAC4 soap_get__NStrans__TranslateResponse(struct soap *soap, _NStrans__TranslateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__NStrans__TranslateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NStrans__TranslateResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NStrans__TranslateResponse(soap, tag, this, type);
}

SOAP_FMAC3 _NStrans__TranslateResponse * SOAP_FMAC4 soap_in__NStrans__TranslateResponse(struct soap *soap, const char *tag, _NStrans__TranslateResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NStrans__TranslateResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NStrans__TranslateResponse, sizeof(_NStrans__TranslateResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NStrans__TranslateResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NStrans__TranslateResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_TranslateResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TranslateResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NStrans:TranslateResult", &(a->_NStrans__TranslateResponse::TranslateResult), "xsd:string"))
				{	soap_flag_TranslateResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "NStrans:TranslateResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NStrans__TranslateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NStrans__TranslateResponse, 0, sizeof(_NStrans__TranslateResponse), 0, soap_copy__NStrans__TranslateResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _NStrans__TranslateResponse * SOAP_FMAC6 soap_new__NStrans__TranslateResponse(struct soap *soap, int n)
{	return soap_instantiate__NStrans__TranslateResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NStrans__TranslateResponse(struct soap *soap, _NStrans__TranslateResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NStrans__TranslateResponse * SOAP_FMAC4 soap_instantiate__NStrans__TranslateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NStrans__TranslateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NStrans__TranslateResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NStrans__TranslateResponse;
		if (size)
			*size = sizeof(_NStrans__TranslateResponse);
		((_NStrans__TranslateResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NStrans__TranslateResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NStrans__TranslateResponse);
		for (int i = 0; i < n; i++)
			((_NStrans__TranslateResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NStrans__TranslateResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NStrans__TranslateResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NStrans__TranslateResponse %p -> %p\n", q, p));
	*(_NStrans__TranslateResponse*)p = *(_NStrans__TranslateResponse*)q;
}

void _NStrans__Translate::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_NStrans__Language(soap, &this->_NStrans__Translate::LanguageMode);
	this->_NStrans__Translate::Text = NULL;
	/* transient soap skipped */
}

void _NStrans__Translate::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_NStrans__Translate::Text);
	/* transient soap skipped */
}

int _NStrans__Translate::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NStrans__Translate);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NStrans__Translate::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NStrans__Translate(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NStrans__Translate(struct soap *soap, const char *tag, int id, const _NStrans__Translate *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NStrans__Translate), type))
		return soap->error;
	if (soap_out_NStrans__Language(soap, "NStrans:LanguageMode", -1, &(a->_NStrans__Translate::LanguageMode), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "NStrans:Text", -1, &(a->_NStrans__Translate::Text), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NStrans__Translate::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NStrans__Translate(soap, this, tag, type);
}

SOAP_FMAC3 _NStrans__Translate * SOAP_FMAC4 soap_get__NStrans__Translate(struct soap *soap, _NStrans__Translate *p, const char *tag, const char *type)
{
	if ((p = soap_in__NStrans__Translate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NStrans__Translate::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NStrans__Translate(soap, tag, this, type);
}

SOAP_FMAC3 _NStrans__Translate * SOAP_FMAC4 soap_in__NStrans__Translate(struct soap *soap, const char *tag, _NStrans__Translate *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NStrans__Translate *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NStrans__Translate, sizeof(_NStrans__Translate), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NStrans__Translate)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NStrans__Translate *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LanguageMode1 = 1;
	size_t soap_flag_Text1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LanguageMode1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_NStrans__Language(soap, "NStrans:LanguageMode", &(a->_NStrans__Translate::LanguageMode), "NStrans:Language"))
				{	soap_flag_LanguageMode1--;
					continue;
				}
			if (soap_flag_Text1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "NStrans:Text", &(a->_NStrans__Translate::Text), "xsd:string"))
				{	soap_flag_Text1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NStrans__Translate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NStrans__Translate, 0, sizeof(_NStrans__Translate), 0, soap_copy__NStrans__Translate);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_LanguageMode1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NStrans__Translate * SOAP_FMAC6 soap_new__NStrans__Translate(struct soap *soap, int n)
{	return soap_instantiate__NStrans__Translate(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NStrans__Translate(struct soap *soap, _NStrans__Translate *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NStrans__Translate * SOAP_FMAC4 soap_instantiate__NStrans__Translate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NStrans__Translate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NStrans__Translate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NStrans__Translate;
		if (size)
			*size = sizeof(_NStrans__Translate);
		((_NStrans__Translate*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NStrans__Translate[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NStrans__Translate);
		for (int i = 0; i < n; i++)
			((_NStrans__Translate*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NStrans__Translate*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NStrans__Translate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NStrans__Translate %p -> %p\n", q, p));
	*(_NStrans__Translate*)p = *(_NStrans__Translate*)q;
}

void _NScurrconv__ConversionRateResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_double(soap, &this->_NScurrconv__ConversionRateResponse::ConversionRateResult);
	/* transient soap skipped */
}

void _NScurrconv__ConversionRateResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _NScurrconv__ConversionRateResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NScurrconv__ConversionRateResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NScurrconv__ConversionRateResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NScurrconv__ConversionRateResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NScurrconv__ConversionRateResponse(struct soap *soap, const char *tag, int id, const _NScurrconv__ConversionRateResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NScurrconv__ConversionRateResponse), type))
		return soap->error;
	soap_element_result(soap, "NScurrconv:ConversionRateResult");
	if (soap_out_double(soap, "NScurrconv:ConversionRateResult", -1, &(a->_NScurrconv__ConversionRateResponse::ConversionRateResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NScurrconv__ConversionRateResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NScurrconv__ConversionRateResponse(soap, this, tag, type);
}

SOAP_FMAC3 _NScurrconv__ConversionRateResponse * SOAP_FMAC4 soap_get__NScurrconv__ConversionRateResponse(struct soap *soap, _NScurrconv__ConversionRateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__NScurrconv__ConversionRateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NScurrconv__ConversionRateResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NScurrconv__ConversionRateResponse(soap, tag, this, type);
}

SOAP_FMAC3 _NScurrconv__ConversionRateResponse * SOAP_FMAC4 soap_in__NScurrconv__ConversionRateResponse(struct soap *soap, const char *tag, _NScurrconv__ConversionRateResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NScurrconv__ConversionRateResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NScurrconv__ConversionRateResponse, sizeof(_NScurrconv__ConversionRateResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NScurrconv__ConversionRateResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NScurrconv__ConversionRateResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ConversionRateResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ConversionRateResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "NScurrconv:ConversionRateResult", &(a->_NScurrconv__ConversionRateResponse::ConversionRateResult), "xsd:double"))
				{	soap_flag_ConversionRateResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "NScurrconv:ConversionRateResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NScurrconv__ConversionRateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NScurrconv__ConversionRateResponse, 0, sizeof(_NScurrconv__ConversionRateResponse), 0, soap_copy__NScurrconv__ConversionRateResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ConversionRateResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NScurrconv__ConversionRateResponse * SOAP_FMAC6 soap_new__NScurrconv__ConversionRateResponse(struct soap *soap, int n)
{	return soap_instantiate__NScurrconv__ConversionRateResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NScurrconv__ConversionRateResponse(struct soap *soap, _NScurrconv__ConversionRateResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NScurrconv__ConversionRateResponse * SOAP_FMAC4 soap_instantiate__NScurrconv__ConversionRateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NScurrconv__ConversionRateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NScurrconv__ConversionRateResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NScurrconv__ConversionRateResponse;
		if (size)
			*size = sizeof(_NScurrconv__ConversionRateResponse);
		((_NScurrconv__ConversionRateResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NScurrconv__ConversionRateResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NScurrconv__ConversionRateResponse);
		for (int i = 0; i < n; i++)
			((_NScurrconv__ConversionRateResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NScurrconv__ConversionRateResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NScurrconv__ConversionRateResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NScurrconv__ConversionRateResponse %p -> %p\n", q, p));
	*(_NScurrconv__ConversionRateResponse*)p = *(_NScurrconv__ConversionRateResponse*)q;
}

void _NScurrconv__ConversionRate::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_NScurrconv__Currency(soap, &this->_NScurrconv__ConversionRate::FromCurrency);
	soap_default_NScurrconv__Currency(soap, &this->_NScurrconv__ConversionRate::ToCurrency);
	/* transient soap skipped */
}

void _NScurrconv__ConversionRate::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _NScurrconv__ConversionRate::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NScurrconv__ConversionRate);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NScurrconv__ConversionRate::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NScurrconv__ConversionRate(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NScurrconv__ConversionRate(struct soap *soap, const char *tag, int id, const _NScurrconv__ConversionRate *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NScurrconv__ConversionRate), type))
		return soap->error;
	if (soap_out_NScurrconv__Currency(soap, "NScurrconv:FromCurrency", -1, &(a->_NScurrconv__ConversionRate::FromCurrency), ""))
		return soap->error;
	if (soap_out_NScurrconv__Currency(soap, "NScurrconv:ToCurrency", -1, &(a->_NScurrconv__ConversionRate::ToCurrency), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NScurrconv__ConversionRate::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NScurrconv__ConversionRate(soap, this, tag, type);
}

SOAP_FMAC3 _NScurrconv__ConversionRate * SOAP_FMAC4 soap_get__NScurrconv__ConversionRate(struct soap *soap, _NScurrconv__ConversionRate *p, const char *tag, const char *type)
{
	if ((p = soap_in__NScurrconv__ConversionRate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NScurrconv__ConversionRate::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NScurrconv__ConversionRate(soap, tag, this, type);
}

SOAP_FMAC3 _NScurrconv__ConversionRate * SOAP_FMAC4 soap_in__NScurrconv__ConversionRate(struct soap *soap, const char *tag, _NScurrconv__ConversionRate *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NScurrconv__ConversionRate *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NScurrconv__ConversionRate, sizeof(_NScurrconv__ConversionRate), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NScurrconv__ConversionRate)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NScurrconv__ConversionRate *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_FromCurrency1 = 1;
	size_t soap_flag_ToCurrency1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_FromCurrency1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_NScurrconv__Currency(soap, "NScurrconv:FromCurrency", &(a->_NScurrconv__ConversionRate::FromCurrency), "NScurrconv:Currency"))
				{	soap_flag_FromCurrency1--;
					continue;
				}
			if (soap_flag_ToCurrency1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_NScurrconv__Currency(soap, "NScurrconv:ToCurrency", &(a->_NScurrconv__ConversionRate::ToCurrency), "NScurrconv:Currency"))
				{	soap_flag_ToCurrency1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NScurrconv__ConversionRate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NScurrconv__ConversionRate, 0, sizeof(_NScurrconv__ConversionRate), 0, soap_copy__NScurrconv__ConversionRate);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_FromCurrency1 > 0 || soap_flag_ToCurrency1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _NScurrconv__ConversionRate * SOAP_FMAC6 soap_new__NScurrconv__ConversionRate(struct soap *soap, int n)
{	return soap_instantiate__NScurrconv__ConversionRate(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NScurrconv__ConversionRate(struct soap *soap, _NScurrconv__ConversionRate *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NScurrconv__ConversionRate * SOAP_FMAC4 soap_instantiate__NScurrconv__ConversionRate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NScurrconv__ConversionRate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NScurrconv__ConversionRate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NScurrconv__ConversionRate;
		if (size)
			*size = sizeof(_NScurrconv__ConversionRate);
		((_NScurrconv__ConversionRate*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NScurrconv__ConversionRate[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NScurrconv__ConversionRate);
		for (int i = 0; i < n; i++)
			((_NScurrconv__ConversionRate*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NScurrconv__ConversionRate*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NScurrconv__ConversionRate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NScurrconv__ConversionRate %p -> %p\n", q, p));
	*(_NScurrconv__ConversionRate*)p = *(_NScurrconv__ConversionRate*)q;
}

void _NSgmt__gmtResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_NSgmt__gmtResponse::param_1 = NULL;
	/* transient soap skipped */
}

void _NSgmt__gmtResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTotime(soap, &this->_NSgmt__gmtResponse::param_1);
	/* transient soap skipped */
}

int _NSgmt__gmtResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NSgmt__gmtResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NSgmt__gmtResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NSgmt__gmtResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NSgmt__gmtResponse(struct soap *soap, const char *tag, int id, const _NSgmt__gmtResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NSgmt__gmtResponse), type))
		return soap->error;
	if (soap_out_PointerTotime(soap, "param-1", -1, &(a->_NSgmt__gmtResponse::param_1), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NSgmt__gmtResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NSgmt__gmtResponse(soap, this, tag, type);
}

SOAP_FMAC3 _NSgmt__gmtResponse * SOAP_FMAC4 soap_get__NSgmt__gmtResponse(struct soap *soap, _NSgmt__gmtResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__NSgmt__gmtResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NSgmt__gmtResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NSgmt__gmtResponse(soap, tag, this, type);
}

SOAP_FMAC3 _NSgmt__gmtResponse * SOAP_FMAC4 soap_in__NSgmt__gmtResponse(struct soap *soap, const char *tag, _NSgmt__gmtResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NSgmt__gmtResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NSgmt__gmtResponse, sizeof(_NSgmt__gmtResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NSgmt__gmtResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NSgmt__gmtResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_param_11 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param_11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotime(soap, "param-1", &(a->_NSgmt__gmtResponse::param_1), "xsd:dateTime"))
				{	soap_flag_param_11--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NSgmt__gmtResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NSgmt__gmtResponse, 0, sizeof(_NSgmt__gmtResponse), 0, soap_copy__NSgmt__gmtResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _NSgmt__gmtResponse * SOAP_FMAC6 soap_new__NSgmt__gmtResponse(struct soap *soap, int n)
{	return soap_instantiate__NSgmt__gmtResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NSgmt__gmtResponse(struct soap *soap, _NSgmt__gmtResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NSgmt__gmtResponse * SOAP_FMAC4 soap_instantiate__NSgmt__gmtResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NSgmt__gmtResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NSgmt__gmtResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NSgmt__gmtResponse;
		if (size)
			*size = sizeof(_NSgmt__gmtResponse);
		((_NSgmt__gmtResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NSgmt__gmtResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NSgmt__gmtResponse);
		for (int i = 0; i < n; i++)
			((_NSgmt__gmtResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NSgmt__gmtResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NSgmt__gmtResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NSgmt__gmtResponse %p -> %p\n", q, p));
	*(_NSgmt__gmtResponse*)p = *(_NSgmt__gmtResponse*)q;
}

void _NSgmt__gmt::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _NSgmt__gmt::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _NSgmt__gmt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__NSgmt__gmt);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _NSgmt__gmt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__NSgmt__gmt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__NSgmt__gmt(struct soap *soap, const char *tag, int id, const _NSgmt__gmt *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__NSgmt__gmt), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_NSgmt__gmt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__NSgmt__gmt(soap, this, tag, type);
}

SOAP_FMAC3 _NSgmt__gmt * SOAP_FMAC4 soap_get__NSgmt__gmt(struct soap *soap, _NSgmt__gmt *p, const char *tag, const char *type)
{
	if ((p = soap_in__NSgmt__gmt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_NSgmt__gmt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__NSgmt__gmt(soap, tag, this, type);
}

SOAP_FMAC3 _NSgmt__gmt * SOAP_FMAC4 soap_in__NSgmt__gmt(struct soap *soap, const char *tag, _NSgmt__gmt *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_NSgmt__gmt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__NSgmt__gmt, sizeof(_NSgmt__gmt), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__NSgmt__gmt)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_NSgmt__gmt *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_NSgmt__gmt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__NSgmt__gmt, 0, sizeof(_NSgmt__gmt), 0, soap_copy__NSgmt__gmt);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _NSgmt__gmt * SOAP_FMAC6 soap_new__NSgmt__gmt(struct soap *soap, int n)
{	return soap_instantiate__NSgmt__gmt(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__NSgmt__gmt(struct soap *soap, _NSgmt__gmt *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _NSgmt__gmt * SOAP_FMAC4 soap_instantiate__NSgmt__gmt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__NSgmt__gmt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__NSgmt__gmt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _NSgmt__gmt;
		if (size)
			*size = sizeof(_NSgmt__gmt);
		((_NSgmt__gmt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _NSgmt__gmt[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_NSgmt__gmt);
		for (int i = 0; i < n; i++)
			((_NSgmt__gmt*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_NSgmt__gmt*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__NSgmt__gmt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _NSgmt__gmt %p -> %p\n", q, p));
	*(_NSgmt__gmt*)p = *(_NSgmt__gmt*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__SearchDeceasedInfoReturnDataSet(struct soap *soap, struct __ns3__SearchDeceasedInfoReturnDataSet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->NSdeath__SearchDeceasedInfoReturnDataSet = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__SearchDeceasedInfoReturnDataSet(struct soap *soap, const struct __ns3__SearchDeceasedInfoReturnDataSet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(soap, &a->NSdeath__SearchDeceasedInfoReturnDataSet);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__SearchDeceasedInfoReturnDataSet(struct soap *soap, const struct __ns3__SearchDeceasedInfoReturnDataSet *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__SearchDeceasedInfoReturnDataSet(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__SearchDeceasedInfoReturnDataSet(struct soap *soap, const char *tag, int id, const struct __ns3__SearchDeceasedInfoReturnDataSet *a, const char *type)
{
	if (soap_out_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(soap, "NSdeath:SearchDeceasedInfoReturnDataSet", -1, &a->NSdeath__SearchDeceasedInfoReturnDataSet, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__SearchDeceasedInfoReturnDataSet * SOAP_FMAC4 soap_get___ns3__SearchDeceasedInfoReturnDataSet(struct soap *soap, struct __ns3__SearchDeceasedInfoReturnDataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__SearchDeceasedInfoReturnDataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__SearchDeceasedInfoReturnDataSet * SOAP_FMAC4 soap_in___ns3__SearchDeceasedInfoReturnDataSet(struct soap *soap, const char *tag, struct __ns3__SearchDeceasedInfoReturnDataSet *a, const char *type)
{
	size_t soap_flag_NSdeath__SearchDeceasedInfoReturnDataSet = 1;
	short soap_flag;
	a = (struct __ns3__SearchDeceasedInfoReturnDataSet *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__SearchDeceasedInfoReturnDataSet, sizeof(struct __ns3__SearchDeceasedInfoReturnDataSet), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__SearchDeceasedInfoReturnDataSet(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NSdeath__SearchDeceasedInfoReturnDataSet && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(soap, "NSdeath:SearchDeceasedInfoReturnDataSet", &a->NSdeath__SearchDeceasedInfoReturnDataSet, ""))
				{	soap_flag_NSdeath__SearchDeceasedInfoReturnDataSet--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__SearchDeceasedInfoReturnDataSet * SOAP_FMAC6 soap_new___ns3__SearchDeceasedInfoReturnDataSet(struct soap *soap, int n)
{	return soap_instantiate___ns3__SearchDeceasedInfoReturnDataSet(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__SearchDeceasedInfoReturnDataSet(struct soap *soap, struct __ns3__SearchDeceasedInfoReturnDataSet *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__SearchDeceasedInfoReturnDataSet * SOAP_FMAC4 soap_instantiate___ns3__SearchDeceasedInfoReturnDataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__SearchDeceasedInfoReturnDataSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__SearchDeceasedInfoReturnDataSet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__SearchDeceasedInfoReturnDataSet;
		if (size)
			*size = sizeof(struct __ns3__SearchDeceasedInfoReturnDataSet);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__SearchDeceasedInfoReturnDataSet[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__SearchDeceasedInfoReturnDataSet);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__SearchDeceasedInfoReturnDataSet*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__SearchDeceasedInfoReturnDataSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__SearchDeceasedInfoReturnDataSet %p -> %p\n", q, p));
	*(struct __ns3__SearchDeceasedInfoReturnDataSet*)p = *(struct __ns3__SearchDeceasedInfoReturnDataSet*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__DeceasedBySSN(struct soap *soap, struct __ns3__DeceasedBySSN *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->NSdeath__DeceasedBySSN = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__DeceasedBySSN(struct soap *soap, const struct __ns3__DeceasedBySSN *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NSdeath__DeceasedBySSN(soap, &a->NSdeath__DeceasedBySSN);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__DeceasedBySSN(struct soap *soap, const struct __ns3__DeceasedBySSN *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__DeceasedBySSN(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__DeceasedBySSN(struct soap *soap, const char *tag, int id, const struct __ns3__DeceasedBySSN *a, const char *type)
{
	if (soap_out_PointerTo_NSdeath__DeceasedBySSN(soap, "NSdeath:DeceasedBySSN", -1, &a->NSdeath__DeceasedBySSN, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__DeceasedBySSN * SOAP_FMAC4 soap_get___ns3__DeceasedBySSN(struct soap *soap, struct __ns3__DeceasedBySSN *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__DeceasedBySSN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__DeceasedBySSN * SOAP_FMAC4 soap_in___ns3__DeceasedBySSN(struct soap *soap, const char *tag, struct __ns3__DeceasedBySSN *a, const char *type)
{
	size_t soap_flag_NSdeath__DeceasedBySSN = 1;
	short soap_flag;
	a = (struct __ns3__DeceasedBySSN *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__DeceasedBySSN, sizeof(struct __ns3__DeceasedBySSN), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__DeceasedBySSN(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NSdeath__DeceasedBySSN && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NSdeath__DeceasedBySSN(soap, "NSdeath:DeceasedBySSN", &a->NSdeath__DeceasedBySSN, ""))
				{	soap_flag_NSdeath__DeceasedBySSN--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__DeceasedBySSN * SOAP_FMAC6 soap_new___ns3__DeceasedBySSN(struct soap *soap, int n)
{	return soap_instantiate___ns3__DeceasedBySSN(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__DeceasedBySSN(struct soap *soap, struct __ns3__DeceasedBySSN *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__DeceasedBySSN * SOAP_FMAC4 soap_instantiate___ns3__DeceasedBySSN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__DeceasedBySSN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__DeceasedBySSN, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__DeceasedBySSN;
		if (size)
			*size = sizeof(struct __ns3__DeceasedBySSN);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__DeceasedBySSN[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__DeceasedBySSN);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__DeceasedBySSN*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__DeceasedBySSN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__DeceasedBySSN %p -> %p\n", q, p));
	*(struct __ns3__DeceasedBySSN*)p = *(struct __ns3__DeceasedBySSN*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__SearchDeceasedInfoReturnDataSet(struct soap *soap, struct __ns2__SearchDeceasedInfoReturnDataSet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->NSdeath__SearchDeceasedInfoReturnDataSet = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__SearchDeceasedInfoReturnDataSet(struct soap *soap, const struct __ns2__SearchDeceasedInfoReturnDataSet *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(soap, &a->NSdeath__SearchDeceasedInfoReturnDataSet);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__SearchDeceasedInfoReturnDataSet(struct soap *soap, const struct __ns2__SearchDeceasedInfoReturnDataSet *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__SearchDeceasedInfoReturnDataSet(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__SearchDeceasedInfoReturnDataSet(struct soap *soap, const char *tag, int id, const struct __ns2__SearchDeceasedInfoReturnDataSet *a, const char *type)
{
	if (soap_out_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(soap, "NSdeath:SearchDeceasedInfoReturnDataSet", -1, &a->NSdeath__SearchDeceasedInfoReturnDataSet, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__SearchDeceasedInfoReturnDataSet * SOAP_FMAC4 soap_get___ns2__SearchDeceasedInfoReturnDataSet(struct soap *soap, struct __ns2__SearchDeceasedInfoReturnDataSet *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__SearchDeceasedInfoReturnDataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__SearchDeceasedInfoReturnDataSet * SOAP_FMAC4 soap_in___ns2__SearchDeceasedInfoReturnDataSet(struct soap *soap, const char *tag, struct __ns2__SearchDeceasedInfoReturnDataSet *a, const char *type)
{
	size_t soap_flag_NSdeath__SearchDeceasedInfoReturnDataSet = 1;
	short soap_flag;
	a = (struct __ns2__SearchDeceasedInfoReturnDataSet *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__SearchDeceasedInfoReturnDataSet, sizeof(struct __ns2__SearchDeceasedInfoReturnDataSet), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__SearchDeceasedInfoReturnDataSet(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NSdeath__SearchDeceasedInfoReturnDataSet && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(soap, "NSdeath:SearchDeceasedInfoReturnDataSet", &a->NSdeath__SearchDeceasedInfoReturnDataSet, ""))
				{	soap_flag_NSdeath__SearchDeceasedInfoReturnDataSet--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__SearchDeceasedInfoReturnDataSet * SOAP_FMAC6 soap_new___ns2__SearchDeceasedInfoReturnDataSet(struct soap *soap, int n)
{	return soap_instantiate___ns2__SearchDeceasedInfoReturnDataSet(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__SearchDeceasedInfoReturnDataSet(struct soap *soap, struct __ns2__SearchDeceasedInfoReturnDataSet *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__SearchDeceasedInfoReturnDataSet * SOAP_FMAC4 soap_instantiate___ns2__SearchDeceasedInfoReturnDataSet(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__SearchDeceasedInfoReturnDataSet(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__SearchDeceasedInfoReturnDataSet, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__SearchDeceasedInfoReturnDataSet;
		if (size)
			*size = sizeof(struct __ns2__SearchDeceasedInfoReturnDataSet);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__SearchDeceasedInfoReturnDataSet[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__SearchDeceasedInfoReturnDataSet);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__SearchDeceasedInfoReturnDataSet*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__SearchDeceasedInfoReturnDataSet(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__SearchDeceasedInfoReturnDataSet %p -> %p\n", q, p));
	*(struct __ns2__SearchDeceasedInfoReturnDataSet*)p = *(struct __ns2__SearchDeceasedInfoReturnDataSet*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__DeceasedBySSN(struct soap *soap, struct __ns2__DeceasedBySSN *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->NSdeath__DeceasedBySSN = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__DeceasedBySSN(struct soap *soap, const struct __ns2__DeceasedBySSN *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NSdeath__DeceasedBySSN(soap, &a->NSdeath__DeceasedBySSN);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__DeceasedBySSN(struct soap *soap, const struct __ns2__DeceasedBySSN *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__DeceasedBySSN(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__DeceasedBySSN(struct soap *soap, const char *tag, int id, const struct __ns2__DeceasedBySSN *a, const char *type)
{
	if (soap_out_PointerTo_NSdeath__DeceasedBySSN(soap, "NSdeath:DeceasedBySSN", -1, &a->NSdeath__DeceasedBySSN, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__DeceasedBySSN * SOAP_FMAC4 soap_get___ns2__DeceasedBySSN(struct soap *soap, struct __ns2__DeceasedBySSN *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__DeceasedBySSN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__DeceasedBySSN * SOAP_FMAC4 soap_in___ns2__DeceasedBySSN(struct soap *soap, const char *tag, struct __ns2__DeceasedBySSN *a, const char *type)
{
	size_t soap_flag_NSdeath__DeceasedBySSN = 1;
	short soap_flag;
	a = (struct __ns2__DeceasedBySSN *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__DeceasedBySSN, sizeof(struct __ns2__DeceasedBySSN), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__DeceasedBySSN(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NSdeath__DeceasedBySSN && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NSdeath__DeceasedBySSN(soap, "NSdeath:DeceasedBySSN", &a->NSdeath__DeceasedBySSN, ""))
				{	soap_flag_NSdeath__DeceasedBySSN--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__DeceasedBySSN * SOAP_FMAC6 soap_new___ns2__DeceasedBySSN(struct soap *soap, int n)
{	return soap_instantiate___ns2__DeceasedBySSN(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__DeceasedBySSN(struct soap *soap, struct __ns2__DeceasedBySSN *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__DeceasedBySSN * SOAP_FMAC4 soap_instantiate___ns2__DeceasedBySSN(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__DeceasedBySSN(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__DeceasedBySSN, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__DeceasedBySSN;
		if (size)
			*size = sizeof(struct __ns2__DeceasedBySSN);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__DeceasedBySSN[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__DeceasedBySSN);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__DeceasedBySSN*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__DeceasedBySSN(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__DeceasedBySSN %p -> %p\n", q, p));
	*(struct __ns2__DeceasedBySSN*)p = *(struct __ns2__DeceasedBySSN*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__gmt(struct soap *soap, struct __ns1__gmt *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->NSgmt__gmt = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__gmt(struct soap *soap, const struct __ns1__gmt *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NSgmt__gmt(soap, &a->NSgmt__gmt);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__gmt(struct soap *soap, const struct __ns1__gmt *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__gmt(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__gmt(struct soap *soap, const char *tag, int id, const struct __ns1__gmt *a, const char *type)
{
	if (soap_out_PointerTo_NSgmt__gmt(soap, "NSgmt:gmt", -1, &a->NSgmt__gmt, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__gmt * SOAP_FMAC4 soap_get___ns1__gmt(struct soap *soap, struct __ns1__gmt *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__gmt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns1__gmt * SOAP_FMAC4 soap_in___ns1__gmt(struct soap *soap, const char *tag, struct __ns1__gmt *a, const char *type)
{
	size_t soap_flag_NSgmt__gmt = 1;
	short soap_flag;
	a = (struct __ns1__gmt *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__gmt, sizeof(struct __ns1__gmt), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__gmt(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NSgmt__gmt && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NSgmt__gmt(soap, "NSgmt:gmt", &a->NSgmt__gmt, ""))
				{	soap_flag_NSgmt__gmt--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns1__gmt * SOAP_FMAC6 soap_new___ns1__gmt(struct soap *soap, int n)
{	return soap_instantiate___ns1__gmt(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns1__gmt(struct soap *soap, struct __ns1__gmt *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns1__gmt * SOAP_FMAC4 soap_instantiate___ns1__gmt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__gmt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__gmt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns1__gmt;
		if (size)
			*size = sizeof(struct __ns1__gmt);
	}
	else
	{	cp->ptr = (void*)new struct __ns1__gmt[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__gmt);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__gmt*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__gmt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__gmt %p -> %p\n", q, p));
	*(struct __ns1__gmt*)p = *(struct __ns1__gmt*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___NStrans__Translate(struct soap *soap, struct __NStrans__Translate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->NStrans__Translate = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___NStrans__Translate(struct soap *soap, const struct __NStrans__Translate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NStrans__Translate(soap, &a->NStrans__Translate);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___NStrans__Translate(struct soap *soap, const struct __NStrans__Translate *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___NStrans__Translate(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___NStrans__Translate(struct soap *soap, const char *tag, int id, const struct __NStrans__Translate *a, const char *type)
{
	if (soap_out_PointerTo_NStrans__Translate(soap, "NStrans:Translate", -1, &a->NStrans__Translate, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __NStrans__Translate * SOAP_FMAC4 soap_get___NStrans__Translate(struct soap *soap, struct __NStrans__Translate *p, const char *tag, const char *type)
{
	if ((p = soap_in___NStrans__Translate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __NStrans__Translate * SOAP_FMAC4 soap_in___NStrans__Translate(struct soap *soap, const char *tag, struct __NStrans__Translate *a, const char *type)
{
	size_t soap_flag_NStrans__Translate = 1;
	short soap_flag;
	a = (struct __NStrans__Translate *)soap_id_enter(soap, "", a, SOAP_TYPE___NStrans__Translate, sizeof(struct __NStrans__Translate), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___NStrans__Translate(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NStrans__Translate && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NStrans__Translate(soap, "NStrans:Translate", &a->NStrans__Translate, ""))
				{	soap_flag_NStrans__Translate--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __NStrans__Translate * SOAP_FMAC6 soap_new___NStrans__Translate(struct soap *soap, int n)
{	return soap_instantiate___NStrans__Translate(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___NStrans__Translate(struct soap *soap, struct __NStrans__Translate *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __NStrans__Translate * SOAP_FMAC4 soap_instantiate___NStrans__Translate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___NStrans__Translate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___NStrans__Translate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __NStrans__Translate;
		if (size)
			*size = sizeof(struct __NStrans__Translate);
	}
	else
	{	cp->ptr = (void*)new struct __NStrans__Translate[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __NStrans__Translate);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __NStrans__Translate*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___NStrans__Translate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __NStrans__Translate %p -> %p\n", q, p));
	*(struct __NStrans__Translate*)p = *(struct __NStrans__Translate*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___NShday__GetHolidaysForDateRange(struct soap *soap, struct __NShday__GetHolidaysForDateRange *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->NShday__GetHolidaysForDateRange = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___NShday__GetHolidaysForDateRange(struct soap *soap, const struct __NShday__GetHolidaysForDateRange *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NShday__GetHolidaysForDateRange(soap, &a->NShday__GetHolidaysForDateRange);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___NShday__GetHolidaysForDateRange(struct soap *soap, const struct __NShday__GetHolidaysForDateRange *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___NShday__GetHolidaysForDateRange(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___NShday__GetHolidaysForDateRange(struct soap *soap, const char *tag, int id, const struct __NShday__GetHolidaysForDateRange *a, const char *type)
{
	if (soap_out_PointerTo_NShday__GetHolidaysForDateRange(soap, "NShday:GetHolidaysForDateRange", -1, &a->NShday__GetHolidaysForDateRange, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __NShday__GetHolidaysForDateRange * SOAP_FMAC4 soap_get___NShday__GetHolidaysForDateRange(struct soap *soap, struct __NShday__GetHolidaysForDateRange *p, const char *tag, const char *type)
{
	if ((p = soap_in___NShday__GetHolidaysForDateRange(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __NShday__GetHolidaysForDateRange * SOAP_FMAC4 soap_in___NShday__GetHolidaysForDateRange(struct soap *soap, const char *tag, struct __NShday__GetHolidaysForDateRange *a, const char *type)
{
	size_t soap_flag_NShday__GetHolidaysForDateRange = 1;
	short soap_flag;
	a = (struct __NShday__GetHolidaysForDateRange *)soap_id_enter(soap, "", a, SOAP_TYPE___NShday__GetHolidaysForDateRange, sizeof(struct __NShday__GetHolidaysForDateRange), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___NShday__GetHolidaysForDateRange(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NShday__GetHolidaysForDateRange && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NShday__GetHolidaysForDateRange(soap, "NShday:GetHolidaysForDateRange", &a->NShday__GetHolidaysForDateRange, ""))
				{	soap_flag_NShday__GetHolidaysForDateRange--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __NShday__GetHolidaysForDateRange * SOAP_FMAC6 soap_new___NShday__GetHolidaysForDateRange(struct soap *soap, int n)
{	return soap_instantiate___NShday__GetHolidaysForDateRange(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___NShday__GetHolidaysForDateRange(struct soap *soap, struct __NShday__GetHolidaysForDateRange *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __NShday__GetHolidaysForDateRange * SOAP_FMAC4 soap_instantiate___NShday__GetHolidaysForDateRange(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___NShday__GetHolidaysForDateRange(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___NShday__GetHolidaysForDateRange, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __NShday__GetHolidaysForDateRange;
		if (size)
			*size = sizeof(struct __NShday__GetHolidaysForDateRange);
	}
	else
	{	cp->ptr = (void*)new struct __NShday__GetHolidaysForDateRange[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __NShday__GetHolidaysForDateRange);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __NShday__GetHolidaysForDateRange*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___NShday__GetHolidaysForDateRange(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __NShday__GetHolidaysForDateRange %p -> %p\n", q, p));
	*(struct __NShday__GetHolidaysForDateRange*)p = *(struct __NShday__GetHolidaysForDateRange*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___NShday__GetHolidaysForMonth(struct soap *soap, struct __NShday__GetHolidaysForMonth *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->NShday__GetHolidaysForMonth = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___NShday__GetHolidaysForMonth(struct soap *soap, const struct __NShday__GetHolidaysForMonth *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NShday__GetHolidaysForMonth(soap, &a->NShday__GetHolidaysForMonth);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___NShday__GetHolidaysForMonth(struct soap *soap, const struct __NShday__GetHolidaysForMonth *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___NShday__GetHolidaysForMonth(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___NShday__GetHolidaysForMonth(struct soap *soap, const char *tag, int id, const struct __NShday__GetHolidaysForMonth *a, const char *type)
{
	if (soap_out_PointerTo_NShday__GetHolidaysForMonth(soap, "NShday:GetHolidaysForMonth", -1, &a->NShday__GetHolidaysForMonth, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __NShday__GetHolidaysForMonth * SOAP_FMAC4 soap_get___NShday__GetHolidaysForMonth(struct soap *soap, struct __NShday__GetHolidaysForMonth *p, const char *tag, const char *type)
{
	if ((p = soap_in___NShday__GetHolidaysForMonth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __NShday__GetHolidaysForMonth * SOAP_FMAC4 soap_in___NShday__GetHolidaysForMonth(struct soap *soap, const char *tag, struct __NShday__GetHolidaysForMonth *a, const char *type)
{
	size_t soap_flag_NShday__GetHolidaysForMonth = 1;
	short soap_flag;
	a = (struct __NShday__GetHolidaysForMonth *)soap_id_enter(soap, "", a, SOAP_TYPE___NShday__GetHolidaysForMonth, sizeof(struct __NShday__GetHolidaysForMonth), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___NShday__GetHolidaysForMonth(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NShday__GetHolidaysForMonth && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NShday__GetHolidaysForMonth(soap, "NShday:GetHolidaysForMonth", &a->NShday__GetHolidaysForMonth, ""))
				{	soap_flag_NShday__GetHolidaysForMonth--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __NShday__GetHolidaysForMonth * SOAP_FMAC6 soap_new___NShday__GetHolidaysForMonth(struct soap *soap, int n)
{	return soap_instantiate___NShday__GetHolidaysForMonth(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___NShday__GetHolidaysForMonth(struct soap *soap, struct __NShday__GetHolidaysForMonth *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __NShday__GetHolidaysForMonth * SOAP_FMAC4 soap_instantiate___NShday__GetHolidaysForMonth(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___NShday__GetHolidaysForMonth(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___NShday__GetHolidaysForMonth, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __NShday__GetHolidaysForMonth;
		if (size)
			*size = sizeof(struct __NShday__GetHolidaysForMonth);
	}
	else
	{	cp->ptr = (void*)new struct __NShday__GetHolidaysForMonth[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __NShday__GetHolidaysForMonth);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __NShday__GetHolidaysForMonth*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___NShday__GetHolidaysForMonth(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __NShday__GetHolidaysForMonth %p -> %p\n", q, p));
	*(struct __NShday__GetHolidaysForMonth*)p = *(struct __NShday__GetHolidaysForMonth*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___NShday__GetHolidaysForYear(struct soap *soap, struct __NShday__GetHolidaysForYear *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->NShday__GetHolidaysForYear = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___NShday__GetHolidaysForYear(struct soap *soap, const struct __NShday__GetHolidaysForYear *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NShday__GetHolidaysForYear(soap, &a->NShday__GetHolidaysForYear);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___NShday__GetHolidaysForYear(struct soap *soap, const struct __NShday__GetHolidaysForYear *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___NShday__GetHolidaysForYear(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___NShday__GetHolidaysForYear(struct soap *soap, const char *tag, int id, const struct __NShday__GetHolidaysForYear *a, const char *type)
{
	if (soap_out_PointerTo_NShday__GetHolidaysForYear(soap, "NShday:GetHolidaysForYear", -1, &a->NShday__GetHolidaysForYear, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __NShday__GetHolidaysForYear * SOAP_FMAC4 soap_get___NShday__GetHolidaysForYear(struct soap *soap, struct __NShday__GetHolidaysForYear *p, const char *tag, const char *type)
{
	if ((p = soap_in___NShday__GetHolidaysForYear(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __NShday__GetHolidaysForYear * SOAP_FMAC4 soap_in___NShday__GetHolidaysForYear(struct soap *soap, const char *tag, struct __NShday__GetHolidaysForYear *a, const char *type)
{
	size_t soap_flag_NShday__GetHolidaysForYear = 1;
	short soap_flag;
	a = (struct __NShday__GetHolidaysForYear *)soap_id_enter(soap, "", a, SOAP_TYPE___NShday__GetHolidaysForYear, sizeof(struct __NShday__GetHolidaysForYear), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___NShday__GetHolidaysForYear(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NShday__GetHolidaysForYear && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NShday__GetHolidaysForYear(soap, "NShday:GetHolidaysForYear", &a->NShday__GetHolidaysForYear, ""))
				{	soap_flag_NShday__GetHolidaysForYear--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __NShday__GetHolidaysForYear * SOAP_FMAC6 soap_new___NShday__GetHolidaysForYear(struct soap *soap, int n)
{	return soap_instantiate___NShday__GetHolidaysForYear(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___NShday__GetHolidaysForYear(struct soap *soap, struct __NShday__GetHolidaysForYear *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __NShday__GetHolidaysForYear * SOAP_FMAC4 soap_instantiate___NShday__GetHolidaysForYear(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___NShday__GetHolidaysForYear(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___NShday__GetHolidaysForYear, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __NShday__GetHolidaysForYear;
		if (size)
			*size = sizeof(struct __NShday__GetHolidaysForYear);
	}
	else
	{	cp->ptr = (void*)new struct __NShday__GetHolidaysForYear[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __NShday__GetHolidaysForYear);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __NShday__GetHolidaysForYear*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___NShday__GetHolidaysForYear(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __NShday__GetHolidaysForYear %p -> %p\n", q, p));
	*(struct __NShday__GetHolidaysForYear*)p = *(struct __NShday__GetHolidaysForYear*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___NShday__GetHolidayDate(struct soap *soap, struct __NShday__GetHolidayDate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->NShday__GetHolidayDate = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___NShday__GetHolidayDate(struct soap *soap, const struct __NShday__GetHolidayDate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NShday__GetHolidayDate(soap, &a->NShday__GetHolidayDate);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___NShday__GetHolidayDate(struct soap *soap, const struct __NShday__GetHolidayDate *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___NShday__GetHolidayDate(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___NShday__GetHolidayDate(struct soap *soap, const char *tag, int id, const struct __NShday__GetHolidayDate *a, const char *type)
{
	if (soap_out_PointerTo_NShday__GetHolidayDate(soap, "NShday:GetHolidayDate", -1, &a->NShday__GetHolidayDate, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __NShday__GetHolidayDate * SOAP_FMAC4 soap_get___NShday__GetHolidayDate(struct soap *soap, struct __NShday__GetHolidayDate *p, const char *tag, const char *type)
{
	if ((p = soap_in___NShday__GetHolidayDate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __NShday__GetHolidayDate * SOAP_FMAC4 soap_in___NShday__GetHolidayDate(struct soap *soap, const char *tag, struct __NShday__GetHolidayDate *a, const char *type)
{
	size_t soap_flag_NShday__GetHolidayDate = 1;
	short soap_flag;
	a = (struct __NShday__GetHolidayDate *)soap_id_enter(soap, "", a, SOAP_TYPE___NShday__GetHolidayDate, sizeof(struct __NShday__GetHolidayDate), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___NShday__GetHolidayDate(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NShday__GetHolidayDate && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NShday__GetHolidayDate(soap, "NShday:GetHolidayDate", &a->NShday__GetHolidayDate, ""))
				{	soap_flag_NShday__GetHolidayDate--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __NShday__GetHolidayDate * SOAP_FMAC6 soap_new___NShday__GetHolidayDate(struct soap *soap, int n)
{	return soap_instantiate___NShday__GetHolidayDate(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___NShday__GetHolidayDate(struct soap *soap, struct __NShday__GetHolidayDate *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __NShday__GetHolidayDate * SOAP_FMAC4 soap_instantiate___NShday__GetHolidayDate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___NShday__GetHolidayDate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___NShday__GetHolidayDate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __NShday__GetHolidayDate;
		if (size)
			*size = sizeof(struct __NShday__GetHolidayDate);
	}
	else
	{	cp->ptr = (void*)new struct __NShday__GetHolidayDate[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __NShday__GetHolidayDate);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __NShday__GetHolidayDate*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___NShday__GetHolidayDate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __NShday__GetHolidayDate %p -> %p\n", q, p));
	*(struct __NShday__GetHolidayDate*)p = *(struct __NShday__GetHolidayDate*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___NShday__GetHolidaysAvailable(struct soap *soap, struct __NShday__GetHolidaysAvailable *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->NShday__GetHolidaysAvailable = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___NShday__GetHolidaysAvailable(struct soap *soap, const struct __NShday__GetHolidaysAvailable *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NShday__GetHolidaysAvailable(soap, &a->NShday__GetHolidaysAvailable);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___NShday__GetHolidaysAvailable(struct soap *soap, const struct __NShday__GetHolidaysAvailable *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___NShday__GetHolidaysAvailable(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___NShday__GetHolidaysAvailable(struct soap *soap, const char *tag, int id, const struct __NShday__GetHolidaysAvailable *a, const char *type)
{
	if (soap_out_PointerTo_NShday__GetHolidaysAvailable(soap, "NShday:GetHolidaysAvailable", -1, &a->NShday__GetHolidaysAvailable, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __NShday__GetHolidaysAvailable * SOAP_FMAC4 soap_get___NShday__GetHolidaysAvailable(struct soap *soap, struct __NShday__GetHolidaysAvailable *p, const char *tag, const char *type)
{
	if ((p = soap_in___NShday__GetHolidaysAvailable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __NShday__GetHolidaysAvailable * SOAP_FMAC4 soap_in___NShday__GetHolidaysAvailable(struct soap *soap, const char *tag, struct __NShday__GetHolidaysAvailable *a, const char *type)
{
	size_t soap_flag_NShday__GetHolidaysAvailable = 1;
	short soap_flag;
	a = (struct __NShday__GetHolidaysAvailable *)soap_id_enter(soap, "", a, SOAP_TYPE___NShday__GetHolidaysAvailable, sizeof(struct __NShday__GetHolidaysAvailable), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___NShday__GetHolidaysAvailable(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NShday__GetHolidaysAvailable && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NShday__GetHolidaysAvailable(soap, "NShday:GetHolidaysAvailable", &a->NShday__GetHolidaysAvailable, ""))
				{	soap_flag_NShday__GetHolidaysAvailable--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __NShday__GetHolidaysAvailable * SOAP_FMAC6 soap_new___NShday__GetHolidaysAvailable(struct soap *soap, int n)
{	return soap_instantiate___NShday__GetHolidaysAvailable(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___NShday__GetHolidaysAvailable(struct soap *soap, struct __NShday__GetHolidaysAvailable *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __NShday__GetHolidaysAvailable * SOAP_FMAC4 soap_instantiate___NShday__GetHolidaysAvailable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___NShday__GetHolidaysAvailable(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___NShday__GetHolidaysAvailable, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __NShday__GetHolidaysAvailable;
		if (size)
			*size = sizeof(struct __NShday__GetHolidaysAvailable);
	}
	else
	{	cp->ptr = (void*)new struct __NShday__GetHolidaysAvailable[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __NShday__GetHolidaysAvailable);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __NShday__GetHolidaysAvailable*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___NShday__GetHolidaysAvailable(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __NShday__GetHolidaysAvailable %p -> %p\n", q, p));
	*(struct __NShday__GetHolidaysAvailable*)p = *(struct __NShday__GetHolidaysAvailable*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___NShday__GetCountriesAvailable(struct soap *soap, struct __NShday__GetCountriesAvailable *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->NShday__GetCountriesAvailable = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___NShday__GetCountriesAvailable(struct soap *soap, const struct __NShday__GetCountriesAvailable *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NShday__GetCountriesAvailable(soap, &a->NShday__GetCountriesAvailable);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___NShday__GetCountriesAvailable(struct soap *soap, const struct __NShday__GetCountriesAvailable *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___NShday__GetCountriesAvailable(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___NShday__GetCountriesAvailable(struct soap *soap, const char *tag, int id, const struct __NShday__GetCountriesAvailable *a, const char *type)
{
	if (soap_out_PointerTo_NShday__GetCountriesAvailable(soap, "NShday:GetCountriesAvailable", -1, &a->NShday__GetCountriesAvailable, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __NShday__GetCountriesAvailable * SOAP_FMAC4 soap_get___NShday__GetCountriesAvailable(struct soap *soap, struct __NShday__GetCountriesAvailable *p, const char *tag, const char *type)
{
	if ((p = soap_in___NShday__GetCountriesAvailable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __NShday__GetCountriesAvailable * SOAP_FMAC4 soap_in___NShday__GetCountriesAvailable(struct soap *soap, const char *tag, struct __NShday__GetCountriesAvailable *a, const char *type)
{
	size_t soap_flag_NShday__GetCountriesAvailable = 1;
	short soap_flag;
	a = (struct __NShday__GetCountriesAvailable *)soap_id_enter(soap, "", a, SOAP_TYPE___NShday__GetCountriesAvailable, sizeof(struct __NShday__GetCountriesAvailable), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___NShday__GetCountriesAvailable(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NShday__GetCountriesAvailable && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NShday__GetCountriesAvailable(soap, "NShday:GetCountriesAvailable", &a->NShday__GetCountriesAvailable, ""))
				{	soap_flag_NShday__GetCountriesAvailable--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __NShday__GetCountriesAvailable * SOAP_FMAC6 soap_new___NShday__GetCountriesAvailable(struct soap *soap, int n)
{	return soap_instantiate___NShday__GetCountriesAvailable(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___NShday__GetCountriesAvailable(struct soap *soap, struct __NShday__GetCountriesAvailable *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __NShday__GetCountriesAvailable * SOAP_FMAC4 soap_instantiate___NShday__GetCountriesAvailable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___NShday__GetCountriesAvailable(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___NShday__GetCountriesAvailable, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __NShday__GetCountriesAvailable;
		if (size)
			*size = sizeof(struct __NShday__GetCountriesAvailable);
	}
	else
	{	cp->ptr = (void*)new struct __NShday__GetCountriesAvailable[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __NShday__GetCountriesAvailable);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __NShday__GetCountriesAvailable*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___NShday__GetCountriesAvailable(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __NShday__GetCountriesAvailable %p -> %p\n", q, p));
	*(struct __NShday__GetCountriesAvailable*)p = *(struct __NShday__GetCountriesAvailable*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___NScurrconv__ConversionRate(struct soap *soap, struct __NScurrconv__ConversionRate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->NScurrconv__ConversionRate = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___NScurrconv__ConversionRate(struct soap *soap, const struct __NScurrconv__ConversionRate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_NScurrconv__ConversionRate(soap, &a->NScurrconv__ConversionRate);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___NScurrconv__ConversionRate(struct soap *soap, const struct __NScurrconv__ConversionRate *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___NScurrconv__ConversionRate(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___NScurrconv__ConversionRate(struct soap *soap, const char *tag, int id, const struct __NScurrconv__ConversionRate *a, const char *type)
{
	if (soap_out_PointerTo_NScurrconv__ConversionRate(soap, "NScurrconv:ConversionRate", -1, &a->NScurrconv__ConversionRate, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __NScurrconv__ConversionRate * SOAP_FMAC4 soap_get___NScurrconv__ConversionRate(struct soap *soap, struct __NScurrconv__ConversionRate *p, const char *tag, const char *type)
{
	if ((p = soap_in___NScurrconv__ConversionRate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __NScurrconv__ConversionRate * SOAP_FMAC4 soap_in___NScurrconv__ConversionRate(struct soap *soap, const char *tag, struct __NScurrconv__ConversionRate *a, const char *type)
{
	size_t soap_flag_NScurrconv__ConversionRate = 1;
	short soap_flag;
	a = (struct __NScurrconv__ConversionRate *)soap_id_enter(soap, "", a, SOAP_TYPE___NScurrconv__ConversionRate, sizeof(struct __NScurrconv__ConversionRate), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___NScurrconv__ConversionRate(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NScurrconv__ConversionRate && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_NScurrconv__ConversionRate(soap, "NScurrconv:ConversionRate", &a->NScurrconv__ConversionRate, ""))
				{	soap_flag_NScurrconv__ConversionRate--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __NScurrconv__ConversionRate * SOAP_FMAC6 soap_new___NScurrconv__ConversionRate(struct soap *soap, int n)
{	return soap_instantiate___NScurrconv__ConversionRate(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___NScurrconv__ConversionRate(struct soap *soap, struct __NScurrconv__ConversionRate *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __NScurrconv__ConversionRate * SOAP_FMAC4 soap_instantiate___NScurrconv__ConversionRate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___NScurrconv__ConversionRate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___NScurrconv__ConversionRate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __NScurrconv__ConversionRate;
		if (size)
			*size = sizeof(struct __NScurrconv__ConversionRate);
	}
	else
	{	cp->ptr = (void*)new struct __NScurrconv__ConversionRate[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __NScurrconv__ConversionRate);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __NScurrconv__ConversionRate*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___NScurrconv__ConversionRate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __NScurrconv__ConversionRate %p -> %p\n", q, p));
	*(struct __NScurrconv__ConversionRate*)p = *(struct __NScurrconv__ConversionRate*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_NScalc__pow(struct soap *soap, struct NScalc__pow *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_double(soap, &a->a);
	soap_default_double(soap, &a->b);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_NScalc__pow(struct soap *soap, const struct NScalc__pow *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_NScalc__pow(struct soap *soap, const struct NScalc__pow *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_NScalc__pow);
	if (soap_out_NScalc__pow(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NScalc__pow(struct soap *soap, const char *tag, int id, const struct NScalc__pow *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NScalc__pow), type))
		return soap->error;
	if (soap_out_double(soap, "a", -1, &a->a, ""))
		return soap->error;
	if (soap_out_double(soap, "b", -1, &a->b, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct NScalc__pow * SOAP_FMAC4 soap_get_NScalc__pow(struct soap *soap, struct NScalc__pow *p, const char *tag, const char *type)
{
	if ((p = soap_in_NScalc__pow(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct NScalc__pow * SOAP_FMAC4 soap_in_NScalc__pow(struct soap *soap, const char *tag, struct NScalc__pow *a, const char *type)
{
	size_t soap_flag_a = 1;
	size_t soap_flag_b = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct NScalc__pow *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_NScalc__pow, sizeof(struct NScalc__pow), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_NScalc__pow(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_a && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "a", &a->a, "xsd:double"))
				{	soap_flag_a--;
					continue;
				}
			if (soap_flag_b && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "b", &a->b, "xsd:double"))
				{	soap_flag_b--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct NScalc__pow *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NScalc__pow, 0, sizeof(struct NScalc__pow), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_a > 0 || soap_flag_b > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct NScalc__pow * SOAP_FMAC6 soap_new_NScalc__pow(struct soap *soap, int n)
{	return soap_instantiate_NScalc__pow(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_NScalc__pow(struct soap *soap, struct NScalc__pow *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct NScalc__pow * SOAP_FMAC4 soap_instantiate_NScalc__pow(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_NScalc__pow(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_NScalc__pow, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct NScalc__pow;
		if (size)
			*size = sizeof(struct NScalc__pow);
	}
	else
	{	cp->ptr = (void*)new struct NScalc__pow[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct NScalc__pow);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct NScalc__pow*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NScalc__pow(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct NScalc__pow %p -> %p\n", q, p));
	*(struct NScalc__pow*)p = *(struct NScalc__pow*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_NScalc__powResponse(struct soap *soap, struct NScalc__powResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_double(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_NScalc__powResponse(struct soap *soap, const struct NScalc__powResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_NScalc__powResponse(struct soap *soap, const struct NScalc__powResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_NScalc__powResponse);
	if (soap_out_NScalc__powResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NScalc__powResponse(struct soap *soap, const char *tag, int id, const struct NScalc__powResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NScalc__powResponse), type))
		return soap->error;
	if (soap_out_double(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct NScalc__powResponse * SOAP_FMAC4 soap_get_NScalc__powResponse(struct soap *soap, struct NScalc__powResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_NScalc__powResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct NScalc__powResponse * SOAP_FMAC4 soap_in_NScalc__powResponse(struct soap *soap, const char *tag, struct NScalc__powResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct NScalc__powResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_NScalc__powResponse, sizeof(struct NScalc__powResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_NScalc__powResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "result", &a->result, "xsd:double"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct NScalc__powResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NScalc__powResponse, 0, sizeof(struct NScalc__powResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct NScalc__powResponse * SOAP_FMAC6 soap_new_NScalc__powResponse(struct soap *soap, int n)
{	return soap_instantiate_NScalc__powResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_NScalc__powResponse(struct soap *soap, struct NScalc__powResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct NScalc__powResponse * SOAP_FMAC4 soap_instantiate_NScalc__powResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_NScalc__powResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_NScalc__powResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct NScalc__powResponse;
		if (size)
			*size = sizeof(struct NScalc__powResponse);
	}
	else
	{	cp->ptr = (void*)new struct NScalc__powResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct NScalc__powResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct NScalc__powResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NScalc__powResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct NScalc__powResponse %p -> %p\n", q, p));
	*(struct NScalc__powResponse*)p = *(struct NScalc__powResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_NScalc__div(struct soap *soap, struct NScalc__div *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_double(soap, &a->a);
	soap_default_double(soap, &a->b);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_NScalc__div(struct soap *soap, const struct NScalc__div *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_NScalc__div(struct soap *soap, const struct NScalc__div *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_NScalc__div);
	if (soap_out_NScalc__div(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NScalc__div(struct soap *soap, const char *tag, int id, const struct NScalc__div *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NScalc__div), type))
		return soap->error;
	if (soap_out_double(soap, "a", -1, &a->a, ""))
		return soap->error;
	if (soap_out_double(soap, "b", -1, &a->b, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct NScalc__div * SOAP_FMAC4 soap_get_NScalc__div(struct soap *soap, struct NScalc__div *p, const char *tag, const char *type)
{
	if ((p = soap_in_NScalc__div(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct NScalc__div * SOAP_FMAC4 soap_in_NScalc__div(struct soap *soap, const char *tag, struct NScalc__div *a, const char *type)
{
	size_t soap_flag_a = 1;
	size_t soap_flag_b = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct NScalc__div *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_NScalc__div, sizeof(struct NScalc__div), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_NScalc__div(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_a && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "a", &a->a, "xsd:double"))
				{	soap_flag_a--;
					continue;
				}
			if (soap_flag_b && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "b", &a->b, "xsd:double"))
				{	soap_flag_b--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct NScalc__div *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NScalc__div, 0, sizeof(struct NScalc__div), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_a > 0 || soap_flag_b > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct NScalc__div * SOAP_FMAC6 soap_new_NScalc__div(struct soap *soap, int n)
{	return soap_instantiate_NScalc__div(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_NScalc__div(struct soap *soap, struct NScalc__div *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct NScalc__div * SOAP_FMAC4 soap_instantiate_NScalc__div(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_NScalc__div(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_NScalc__div, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct NScalc__div;
		if (size)
			*size = sizeof(struct NScalc__div);
	}
	else
	{	cp->ptr = (void*)new struct NScalc__div[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct NScalc__div);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct NScalc__div*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NScalc__div(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct NScalc__div %p -> %p\n", q, p));
	*(struct NScalc__div*)p = *(struct NScalc__div*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_NScalc__divResponse(struct soap *soap, struct NScalc__divResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_double(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_NScalc__divResponse(struct soap *soap, const struct NScalc__divResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_NScalc__divResponse(struct soap *soap, const struct NScalc__divResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_NScalc__divResponse);
	if (soap_out_NScalc__divResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NScalc__divResponse(struct soap *soap, const char *tag, int id, const struct NScalc__divResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NScalc__divResponse), type))
		return soap->error;
	if (soap_out_double(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct NScalc__divResponse * SOAP_FMAC4 soap_get_NScalc__divResponse(struct soap *soap, struct NScalc__divResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_NScalc__divResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct NScalc__divResponse * SOAP_FMAC4 soap_in_NScalc__divResponse(struct soap *soap, const char *tag, struct NScalc__divResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct NScalc__divResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_NScalc__divResponse, sizeof(struct NScalc__divResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_NScalc__divResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "result", &a->result, "xsd:double"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct NScalc__divResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NScalc__divResponse, 0, sizeof(struct NScalc__divResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct NScalc__divResponse * SOAP_FMAC6 soap_new_NScalc__divResponse(struct soap *soap, int n)
{	return soap_instantiate_NScalc__divResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_NScalc__divResponse(struct soap *soap, struct NScalc__divResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct NScalc__divResponse * SOAP_FMAC4 soap_instantiate_NScalc__divResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_NScalc__divResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_NScalc__divResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct NScalc__divResponse;
		if (size)
			*size = sizeof(struct NScalc__divResponse);
	}
	else
	{	cp->ptr = (void*)new struct NScalc__divResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct NScalc__divResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct NScalc__divResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NScalc__divResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct NScalc__divResponse %p -> %p\n", q, p));
	*(struct NScalc__divResponse*)p = *(struct NScalc__divResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_NScalc__mul(struct soap *soap, struct NScalc__mul *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_double(soap, &a->a);
	soap_default_double(soap, &a->b);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_NScalc__mul(struct soap *soap, const struct NScalc__mul *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_NScalc__mul(struct soap *soap, const struct NScalc__mul *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_NScalc__mul);
	if (soap_out_NScalc__mul(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NScalc__mul(struct soap *soap, const char *tag, int id, const struct NScalc__mul *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NScalc__mul), type))
		return soap->error;
	if (soap_out_double(soap, "a", -1, &a->a, ""))
		return soap->error;
	if (soap_out_double(soap, "b", -1, &a->b, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct NScalc__mul * SOAP_FMAC4 soap_get_NScalc__mul(struct soap *soap, struct NScalc__mul *p, const char *tag, const char *type)
{
	if ((p = soap_in_NScalc__mul(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct NScalc__mul * SOAP_FMAC4 soap_in_NScalc__mul(struct soap *soap, const char *tag, struct NScalc__mul *a, const char *type)
{
	size_t soap_flag_a = 1;
	size_t soap_flag_b = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct NScalc__mul *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_NScalc__mul, sizeof(struct NScalc__mul), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_NScalc__mul(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_a && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "a", &a->a, "xsd:double"))
				{	soap_flag_a--;
					continue;
				}
			if (soap_flag_b && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "b", &a->b, "xsd:double"))
				{	soap_flag_b--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct NScalc__mul *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NScalc__mul, 0, sizeof(struct NScalc__mul), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_a > 0 || soap_flag_b > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct NScalc__mul * SOAP_FMAC6 soap_new_NScalc__mul(struct soap *soap, int n)
{	return soap_instantiate_NScalc__mul(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_NScalc__mul(struct soap *soap, struct NScalc__mul *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct NScalc__mul * SOAP_FMAC4 soap_instantiate_NScalc__mul(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_NScalc__mul(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_NScalc__mul, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct NScalc__mul;
		if (size)
			*size = sizeof(struct NScalc__mul);
	}
	else
	{	cp->ptr = (void*)new struct NScalc__mul[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct NScalc__mul);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct NScalc__mul*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NScalc__mul(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct NScalc__mul %p -> %p\n", q, p));
	*(struct NScalc__mul*)p = *(struct NScalc__mul*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_NScalc__mulResponse(struct soap *soap, struct NScalc__mulResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_double(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_NScalc__mulResponse(struct soap *soap, const struct NScalc__mulResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_NScalc__mulResponse(struct soap *soap, const struct NScalc__mulResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_NScalc__mulResponse);
	if (soap_out_NScalc__mulResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NScalc__mulResponse(struct soap *soap, const char *tag, int id, const struct NScalc__mulResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NScalc__mulResponse), type))
		return soap->error;
	if (soap_out_double(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct NScalc__mulResponse * SOAP_FMAC4 soap_get_NScalc__mulResponse(struct soap *soap, struct NScalc__mulResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_NScalc__mulResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct NScalc__mulResponse * SOAP_FMAC4 soap_in_NScalc__mulResponse(struct soap *soap, const char *tag, struct NScalc__mulResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct NScalc__mulResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_NScalc__mulResponse, sizeof(struct NScalc__mulResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_NScalc__mulResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "result", &a->result, "xsd:double"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct NScalc__mulResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NScalc__mulResponse, 0, sizeof(struct NScalc__mulResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct NScalc__mulResponse * SOAP_FMAC6 soap_new_NScalc__mulResponse(struct soap *soap, int n)
{	return soap_instantiate_NScalc__mulResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_NScalc__mulResponse(struct soap *soap, struct NScalc__mulResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct NScalc__mulResponse * SOAP_FMAC4 soap_instantiate_NScalc__mulResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_NScalc__mulResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_NScalc__mulResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct NScalc__mulResponse;
		if (size)
			*size = sizeof(struct NScalc__mulResponse);
	}
	else
	{	cp->ptr = (void*)new struct NScalc__mulResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct NScalc__mulResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct NScalc__mulResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NScalc__mulResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct NScalc__mulResponse %p -> %p\n", q, p));
	*(struct NScalc__mulResponse*)p = *(struct NScalc__mulResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_NScalc__sub(struct soap *soap, struct NScalc__sub *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_double(soap, &a->a);
	soap_default_double(soap, &a->b);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_NScalc__sub(struct soap *soap, const struct NScalc__sub *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_NScalc__sub(struct soap *soap, const struct NScalc__sub *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_NScalc__sub);
	if (soap_out_NScalc__sub(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NScalc__sub(struct soap *soap, const char *tag, int id, const struct NScalc__sub *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NScalc__sub), type))
		return soap->error;
	if (soap_out_double(soap, "a", -1, &a->a, ""))
		return soap->error;
	if (soap_out_double(soap, "b", -1, &a->b, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct NScalc__sub * SOAP_FMAC4 soap_get_NScalc__sub(struct soap *soap, struct NScalc__sub *p, const char *tag, const char *type)
{
	if ((p = soap_in_NScalc__sub(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct NScalc__sub * SOAP_FMAC4 soap_in_NScalc__sub(struct soap *soap, const char *tag, struct NScalc__sub *a, const char *type)
{
	size_t soap_flag_a = 1;
	size_t soap_flag_b = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct NScalc__sub *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_NScalc__sub, sizeof(struct NScalc__sub), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_NScalc__sub(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_a && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "a", &a->a, "xsd:double"))
				{	soap_flag_a--;
					continue;
				}
			if (soap_flag_b && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "b", &a->b, "xsd:double"))
				{	soap_flag_b--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct NScalc__sub *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NScalc__sub, 0, sizeof(struct NScalc__sub), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_a > 0 || soap_flag_b > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct NScalc__sub * SOAP_FMAC6 soap_new_NScalc__sub(struct soap *soap, int n)
{	return soap_instantiate_NScalc__sub(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_NScalc__sub(struct soap *soap, struct NScalc__sub *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct NScalc__sub * SOAP_FMAC4 soap_instantiate_NScalc__sub(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_NScalc__sub(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_NScalc__sub, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct NScalc__sub;
		if (size)
			*size = sizeof(struct NScalc__sub);
	}
	else
	{	cp->ptr = (void*)new struct NScalc__sub[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct NScalc__sub);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct NScalc__sub*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NScalc__sub(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct NScalc__sub %p -> %p\n", q, p));
	*(struct NScalc__sub*)p = *(struct NScalc__sub*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_NScalc__subResponse(struct soap *soap, struct NScalc__subResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_double(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_NScalc__subResponse(struct soap *soap, const struct NScalc__subResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_NScalc__subResponse(struct soap *soap, const struct NScalc__subResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_NScalc__subResponse);
	if (soap_out_NScalc__subResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NScalc__subResponse(struct soap *soap, const char *tag, int id, const struct NScalc__subResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NScalc__subResponse), type))
		return soap->error;
	if (soap_out_double(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct NScalc__subResponse * SOAP_FMAC4 soap_get_NScalc__subResponse(struct soap *soap, struct NScalc__subResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_NScalc__subResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct NScalc__subResponse * SOAP_FMAC4 soap_in_NScalc__subResponse(struct soap *soap, const char *tag, struct NScalc__subResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct NScalc__subResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_NScalc__subResponse, sizeof(struct NScalc__subResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_NScalc__subResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "result", &a->result, "xsd:double"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct NScalc__subResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NScalc__subResponse, 0, sizeof(struct NScalc__subResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct NScalc__subResponse * SOAP_FMAC6 soap_new_NScalc__subResponse(struct soap *soap, int n)
{	return soap_instantiate_NScalc__subResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_NScalc__subResponse(struct soap *soap, struct NScalc__subResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct NScalc__subResponse * SOAP_FMAC4 soap_instantiate_NScalc__subResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_NScalc__subResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_NScalc__subResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct NScalc__subResponse;
		if (size)
			*size = sizeof(struct NScalc__subResponse);
	}
	else
	{	cp->ptr = (void*)new struct NScalc__subResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct NScalc__subResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct NScalc__subResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NScalc__subResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct NScalc__subResponse %p -> %p\n", q, p));
	*(struct NScalc__subResponse*)p = *(struct NScalc__subResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_NScalc__add(struct soap *soap, struct NScalc__add *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_double(soap, &a->a);
	soap_default_double(soap, &a->b);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_NScalc__add(struct soap *soap, const struct NScalc__add *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_NScalc__add(struct soap *soap, const struct NScalc__add *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_NScalc__add);
	if (soap_out_NScalc__add(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NScalc__add(struct soap *soap, const char *tag, int id, const struct NScalc__add *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NScalc__add), type))
		return soap->error;
	if (soap_out_double(soap, "a", -1, &a->a, ""))
		return soap->error;
	if (soap_out_double(soap, "b", -1, &a->b, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct NScalc__add * SOAP_FMAC4 soap_get_NScalc__add(struct soap *soap, struct NScalc__add *p, const char *tag, const char *type)
{
	if ((p = soap_in_NScalc__add(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct NScalc__add * SOAP_FMAC4 soap_in_NScalc__add(struct soap *soap, const char *tag, struct NScalc__add *a, const char *type)
{
	size_t soap_flag_a = 1;
	size_t soap_flag_b = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct NScalc__add *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_NScalc__add, sizeof(struct NScalc__add), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_NScalc__add(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_a && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "a", &a->a, "xsd:double"))
				{	soap_flag_a--;
					continue;
				}
			if (soap_flag_b && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "b", &a->b, "xsd:double"))
				{	soap_flag_b--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct NScalc__add *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NScalc__add, 0, sizeof(struct NScalc__add), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_a > 0 || soap_flag_b > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct NScalc__add * SOAP_FMAC6 soap_new_NScalc__add(struct soap *soap, int n)
{	return soap_instantiate_NScalc__add(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_NScalc__add(struct soap *soap, struct NScalc__add *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct NScalc__add * SOAP_FMAC4 soap_instantiate_NScalc__add(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_NScalc__add(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_NScalc__add, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct NScalc__add;
		if (size)
			*size = sizeof(struct NScalc__add);
	}
	else
	{	cp->ptr = (void*)new struct NScalc__add[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct NScalc__add);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct NScalc__add*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NScalc__add(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct NScalc__add %p -> %p\n", q, p));
	*(struct NScalc__add*)p = *(struct NScalc__add*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_NScalc__addResponse(struct soap *soap, struct NScalc__addResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_double(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_NScalc__addResponse(struct soap *soap, const struct NScalc__addResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_NScalc__addResponse(struct soap *soap, const struct NScalc__addResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_NScalc__addResponse);
	if (soap_out_NScalc__addResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_NScalc__addResponse(struct soap *soap, const char *tag, int id, const struct NScalc__addResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_NScalc__addResponse), type))
		return soap->error;
	if (soap_out_double(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct NScalc__addResponse * SOAP_FMAC4 soap_get_NScalc__addResponse(struct soap *soap, struct NScalc__addResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_NScalc__addResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct NScalc__addResponse * SOAP_FMAC4 soap_in_NScalc__addResponse(struct soap *soap, const char *tag, struct NScalc__addResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct NScalc__addResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_NScalc__addResponse, sizeof(struct NScalc__addResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_NScalc__addResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "result", &a->result, "xsd:double"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct NScalc__addResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_NScalc__addResponse, 0, sizeof(struct NScalc__addResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct NScalc__addResponse * SOAP_FMAC6 soap_new_NScalc__addResponse(struct soap *soap, int n)
{	return soap_instantiate_NScalc__addResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_NScalc__addResponse(struct soap *soap, struct NScalc__addResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct NScalc__addResponse * SOAP_FMAC4 soap_instantiate_NScalc__addResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_NScalc__addResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_NScalc__addResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct NScalc__addResponse;
		if (size)
			*size = sizeof(struct NScalc__addResponse);
	}
	else
	{	cp->ptr = (void*)new struct NScalc__addResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct NScalc__addResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct NScalc__addResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_NScalc__addResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct NScalc__addResponse %p -> %p\n", q, p));
	*(struct NScalc__addResponse*)p = *(struct NScalc__addResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSetResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSetResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse);
	if (soap_out_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse(struct soap *soap, const char *tag, int id, _NSdeath__SearchDeceasedInfoReturnDataSetResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSetResponse ** SOAP_FMAC4 soap_get_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSetResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSetResponse ** SOAP_FMAC4 soap_in_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse(struct soap *soap, const char *tag, _NSdeath__SearchDeceasedInfoReturnDataSetResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NSdeath__SearchDeceasedInfoReturnDataSetResponse **)soap_malloc(soap, sizeof(_NSdeath__SearchDeceasedInfoReturnDataSetResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NSdeath__SearchDeceasedInfoReturnDataSetResponse *)soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSetResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NSdeath__SearchDeceasedInfoReturnDataSetResponse ** p = (_NSdeath__SearchDeceasedInfoReturnDataSetResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse, sizeof(_NSdeath__SearchDeceasedInfoReturnDataSetResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSet *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSet))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSet *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet);
	if (soap_out_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(struct soap *soap, const char *tag, int id, _NSdeath__SearchDeceasedInfoReturnDataSet *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSet);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSet ** SOAP_FMAC4 soap_get_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSet **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSet ** SOAP_FMAC4 soap_in_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSet(struct soap *soap, const char *tag, _NSdeath__SearchDeceasedInfoReturnDataSet **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NSdeath__SearchDeceasedInfoReturnDataSet **)soap_malloc(soap, sizeof(_NSdeath__SearchDeceasedInfoReturnDataSet *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NSdeath__SearchDeceasedInfoReturnDataSet *)soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSet(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NSdeath__SearchDeceasedInfoReturnDataSet ** p = (_NSdeath__SearchDeceasedInfoReturnDataSet **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSet, sizeof(_NSdeath__SearchDeceasedInfoReturnDataSet), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NSdeath__DeceasedBySSNResponse(struct soap *soap, _NSdeath__DeceasedBySSNResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NSdeath__DeceasedBySSNResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NSdeath__DeceasedBySSNResponse(struct soap *soap, _NSdeath__DeceasedBySSNResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NSdeath__DeceasedBySSNResponse);
	if (soap_out_PointerTo_NSdeath__DeceasedBySSNResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NSdeath__DeceasedBySSNResponse(struct soap *soap, const char *tag, int id, _NSdeath__DeceasedBySSNResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NSdeath__DeceasedBySSNResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NSdeath__DeceasedBySSNResponse ** SOAP_FMAC4 soap_get_PointerTo_NSdeath__DeceasedBySSNResponse(struct soap *soap, _NSdeath__DeceasedBySSNResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NSdeath__DeceasedBySSNResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NSdeath__DeceasedBySSNResponse ** SOAP_FMAC4 soap_in_PointerTo_NSdeath__DeceasedBySSNResponse(struct soap *soap, const char *tag, _NSdeath__DeceasedBySSNResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NSdeath__DeceasedBySSNResponse **)soap_malloc(soap, sizeof(_NSdeath__DeceasedBySSNResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NSdeath__DeceasedBySSNResponse *)soap_instantiate__NSdeath__DeceasedBySSNResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NSdeath__DeceasedBySSNResponse ** p = (_NSdeath__DeceasedBySSNResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NSdeath__DeceasedBySSNResponse, sizeof(_NSdeath__DeceasedBySSNResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NSdeath__DeceasedBySSN(struct soap *soap, _NSdeath__DeceasedBySSN *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NSdeath__DeceasedBySSN))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NSdeath__DeceasedBySSN(struct soap *soap, _NSdeath__DeceasedBySSN *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NSdeath__DeceasedBySSN);
	if (soap_out_PointerTo_NSdeath__DeceasedBySSN(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NSdeath__DeceasedBySSN(struct soap *soap, const char *tag, int id, _NSdeath__DeceasedBySSN *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NSdeath__DeceasedBySSN);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NSdeath__DeceasedBySSN ** SOAP_FMAC4 soap_get_PointerTo_NSdeath__DeceasedBySSN(struct soap *soap, _NSdeath__DeceasedBySSN **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NSdeath__DeceasedBySSN(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NSdeath__DeceasedBySSN ** SOAP_FMAC4 soap_in_PointerTo_NSdeath__DeceasedBySSN(struct soap *soap, const char *tag, _NSdeath__DeceasedBySSN **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NSdeath__DeceasedBySSN **)soap_malloc(soap, sizeof(_NSdeath__DeceasedBySSN *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NSdeath__DeceasedBySSN *)soap_instantiate__NSdeath__DeceasedBySSN(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NSdeath__DeceasedBySSN ** p = (_NSdeath__DeceasedBySSN **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NSdeath__DeceasedBySSN, sizeof(_NSdeath__DeceasedBySSN), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NSgmt__gmtResponse(struct soap *soap, _NSgmt__gmtResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NSgmt__gmtResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NSgmt__gmtResponse(struct soap *soap, _NSgmt__gmtResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NSgmt__gmtResponse);
	if (soap_out_PointerTo_NSgmt__gmtResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NSgmt__gmtResponse(struct soap *soap, const char *tag, int id, _NSgmt__gmtResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NSgmt__gmtResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NSgmt__gmtResponse ** SOAP_FMAC4 soap_get_PointerTo_NSgmt__gmtResponse(struct soap *soap, _NSgmt__gmtResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NSgmt__gmtResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NSgmt__gmtResponse ** SOAP_FMAC4 soap_in_PointerTo_NSgmt__gmtResponse(struct soap *soap, const char *tag, _NSgmt__gmtResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NSgmt__gmtResponse **)soap_malloc(soap, sizeof(_NSgmt__gmtResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NSgmt__gmtResponse *)soap_instantiate__NSgmt__gmtResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NSgmt__gmtResponse ** p = (_NSgmt__gmtResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NSgmt__gmtResponse, sizeof(_NSgmt__gmtResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NSgmt__gmt(struct soap *soap, _NSgmt__gmt *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NSgmt__gmt))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NSgmt__gmt(struct soap *soap, _NSgmt__gmt *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NSgmt__gmt);
	if (soap_out_PointerTo_NSgmt__gmt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NSgmt__gmt(struct soap *soap, const char *tag, int id, _NSgmt__gmt *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NSgmt__gmt);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NSgmt__gmt ** SOAP_FMAC4 soap_get_PointerTo_NSgmt__gmt(struct soap *soap, _NSgmt__gmt **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NSgmt__gmt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NSgmt__gmt ** SOAP_FMAC4 soap_in_PointerTo_NSgmt__gmt(struct soap *soap, const char *tag, _NSgmt__gmt **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NSgmt__gmt **)soap_malloc(soap, sizeof(_NSgmt__gmt *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NSgmt__gmt *)soap_instantiate__NSgmt__gmt(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NSgmt__gmt ** p = (_NSgmt__gmt **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NSgmt__gmt, sizeof(_NSgmt__gmt), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NStrans__TranslateResponse(struct soap *soap, _NStrans__TranslateResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NStrans__TranslateResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NStrans__TranslateResponse(struct soap *soap, _NStrans__TranslateResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NStrans__TranslateResponse);
	if (soap_out_PointerTo_NStrans__TranslateResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NStrans__TranslateResponse(struct soap *soap, const char *tag, int id, _NStrans__TranslateResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NStrans__TranslateResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NStrans__TranslateResponse ** SOAP_FMAC4 soap_get_PointerTo_NStrans__TranslateResponse(struct soap *soap, _NStrans__TranslateResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NStrans__TranslateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NStrans__TranslateResponse ** SOAP_FMAC4 soap_in_PointerTo_NStrans__TranslateResponse(struct soap *soap, const char *tag, _NStrans__TranslateResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NStrans__TranslateResponse **)soap_malloc(soap, sizeof(_NStrans__TranslateResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NStrans__TranslateResponse *)soap_instantiate__NStrans__TranslateResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NStrans__TranslateResponse ** p = (_NStrans__TranslateResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NStrans__TranslateResponse, sizeof(_NStrans__TranslateResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NStrans__Translate(struct soap *soap, _NStrans__Translate *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NStrans__Translate))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NStrans__Translate(struct soap *soap, _NStrans__Translate *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NStrans__Translate);
	if (soap_out_PointerTo_NStrans__Translate(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NStrans__Translate(struct soap *soap, const char *tag, int id, _NStrans__Translate *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NStrans__Translate);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NStrans__Translate ** SOAP_FMAC4 soap_get_PointerTo_NStrans__Translate(struct soap *soap, _NStrans__Translate **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NStrans__Translate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NStrans__Translate ** SOAP_FMAC4 soap_in_PointerTo_NStrans__Translate(struct soap *soap, const char *tag, _NStrans__Translate **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NStrans__Translate **)soap_malloc(soap, sizeof(_NStrans__Translate *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NStrans__Translate *)soap_instantiate__NStrans__Translate(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NStrans__Translate ** p = (_NStrans__Translate **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NStrans__Translate, sizeof(_NStrans__Translate), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetHolidaysForDateRangeResponse(struct soap *soap, _NShday__GetHolidaysForDateRangeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetHolidaysForDateRangeResponse(struct soap *soap, _NShday__GetHolidaysForDateRangeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetHolidaysForDateRangeResponse);
	if (soap_out_PointerTo_NShday__GetHolidaysForDateRangeResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetHolidaysForDateRangeResponse(struct soap *soap, const char *tag, int id, _NShday__GetHolidaysForDateRangeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRangeResponse ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetHolidaysForDateRangeResponse(struct soap *soap, _NShday__GetHolidaysForDateRangeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetHolidaysForDateRangeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRangeResponse ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetHolidaysForDateRangeResponse(struct soap *soap, const char *tag, _NShday__GetHolidaysForDateRangeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetHolidaysForDateRangeResponse **)soap_malloc(soap, sizeof(_NShday__GetHolidaysForDateRangeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetHolidaysForDateRangeResponse *)soap_instantiate__NShday__GetHolidaysForDateRangeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetHolidaysForDateRangeResponse ** p = (_NShday__GetHolidaysForDateRangeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse, sizeof(_NShday__GetHolidaysForDateRangeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetHolidaysForDateRange(struct soap *soap, _NShday__GetHolidaysForDateRange *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetHolidaysForDateRange))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetHolidaysForDateRange(struct soap *soap, _NShday__GetHolidaysForDateRange *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetHolidaysForDateRange);
	if (soap_out_PointerTo_NShday__GetHolidaysForDateRange(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetHolidaysForDateRange(struct soap *soap, const char *tag, int id, _NShday__GetHolidaysForDateRange *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetHolidaysForDateRange);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRange ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetHolidaysForDateRange(struct soap *soap, _NShday__GetHolidaysForDateRange **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetHolidaysForDateRange(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRange ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetHolidaysForDateRange(struct soap *soap, const char *tag, _NShday__GetHolidaysForDateRange **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetHolidaysForDateRange **)soap_malloc(soap, sizeof(_NShday__GetHolidaysForDateRange *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetHolidaysForDateRange *)soap_instantiate__NShday__GetHolidaysForDateRange(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetHolidaysForDateRange ** p = (_NShday__GetHolidaysForDateRange **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetHolidaysForDateRange, sizeof(_NShday__GetHolidaysForDateRange), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetHolidaysForMonthResponse(struct soap *soap, _NShday__GetHolidaysForMonthResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetHolidaysForMonthResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetHolidaysForMonthResponse(struct soap *soap, _NShday__GetHolidaysForMonthResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetHolidaysForMonthResponse);
	if (soap_out_PointerTo_NShday__GetHolidaysForMonthResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetHolidaysForMonthResponse(struct soap *soap, const char *tag, int id, _NShday__GetHolidaysForMonthResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetHolidaysForMonthResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForMonthResponse ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetHolidaysForMonthResponse(struct soap *soap, _NShday__GetHolidaysForMonthResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetHolidaysForMonthResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetHolidaysForMonthResponse ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetHolidaysForMonthResponse(struct soap *soap, const char *tag, _NShday__GetHolidaysForMonthResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetHolidaysForMonthResponse **)soap_malloc(soap, sizeof(_NShday__GetHolidaysForMonthResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetHolidaysForMonthResponse *)soap_instantiate__NShday__GetHolidaysForMonthResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetHolidaysForMonthResponse ** p = (_NShday__GetHolidaysForMonthResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetHolidaysForMonthResponse, sizeof(_NShday__GetHolidaysForMonthResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetHolidaysForMonth(struct soap *soap, _NShday__GetHolidaysForMonth *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetHolidaysForMonth))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetHolidaysForMonth(struct soap *soap, _NShday__GetHolidaysForMonth *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetHolidaysForMonth);
	if (soap_out_PointerTo_NShday__GetHolidaysForMonth(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetHolidaysForMonth(struct soap *soap, const char *tag, int id, _NShday__GetHolidaysForMonth *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetHolidaysForMonth);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForMonth ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetHolidaysForMonth(struct soap *soap, _NShday__GetHolidaysForMonth **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetHolidaysForMonth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetHolidaysForMonth ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetHolidaysForMonth(struct soap *soap, const char *tag, _NShday__GetHolidaysForMonth **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetHolidaysForMonth **)soap_malloc(soap, sizeof(_NShday__GetHolidaysForMonth *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetHolidaysForMonth *)soap_instantiate__NShday__GetHolidaysForMonth(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetHolidaysForMonth ** p = (_NShday__GetHolidaysForMonth **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetHolidaysForMonth, sizeof(_NShday__GetHolidaysForMonth), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetHolidaysForYearResponse(struct soap *soap, _NShday__GetHolidaysForYearResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetHolidaysForYearResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetHolidaysForYearResponse(struct soap *soap, _NShday__GetHolidaysForYearResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetHolidaysForYearResponse);
	if (soap_out_PointerTo_NShday__GetHolidaysForYearResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetHolidaysForYearResponse(struct soap *soap, const char *tag, int id, _NShday__GetHolidaysForYearResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetHolidaysForYearResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForYearResponse ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetHolidaysForYearResponse(struct soap *soap, _NShday__GetHolidaysForYearResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetHolidaysForYearResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetHolidaysForYearResponse ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetHolidaysForYearResponse(struct soap *soap, const char *tag, _NShday__GetHolidaysForYearResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetHolidaysForYearResponse **)soap_malloc(soap, sizeof(_NShday__GetHolidaysForYearResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetHolidaysForYearResponse *)soap_instantiate__NShday__GetHolidaysForYearResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetHolidaysForYearResponse ** p = (_NShday__GetHolidaysForYearResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetHolidaysForYearResponse, sizeof(_NShday__GetHolidaysForYearResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetHolidaysForYear(struct soap *soap, _NShday__GetHolidaysForYear *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetHolidaysForYear))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetHolidaysForYear(struct soap *soap, _NShday__GetHolidaysForYear *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetHolidaysForYear);
	if (soap_out_PointerTo_NShday__GetHolidaysForYear(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetHolidaysForYear(struct soap *soap, const char *tag, int id, _NShday__GetHolidaysForYear *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetHolidaysForYear);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForYear ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetHolidaysForYear(struct soap *soap, _NShday__GetHolidaysForYear **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetHolidaysForYear(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetHolidaysForYear ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetHolidaysForYear(struct soap *soap, const char *tag, _NShday__GetHolidaysForYear **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetHolidaysForYear **)soap_malloc(soap, sizeof(_NShday__GetHolidaysForYear *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetHolidaysForYear *)soap_instantiate__NShday__GetHolidaysForYear(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetHolidaysForYear ** p = (_NShday__GetHolidaysForYear **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetHolidaysForYear, sizeof(_NShday__GetHolidaysForYear), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetHolidayDateResponse(struct soap *soap, _NShday__GetHolidayDateResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetHolidayDateResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetHolidayDateResponse(struct soap *soap, _NShday__GetHolidayDateResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetHolidayDateResponse);
	if (soap_out_PointerTo_NShday__GetHolidayDateResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetHolidayDateResponse(struct soap *soap, const char *tag, int id, _NShday__GetHolidayDateResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetHolidayDateResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetHolidayDateResponse ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetHolidayDateResponse(struct soap *soap, _NShday__GetHolidayDateResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetHolidayDateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetHolidayDateResponse ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetHolidayDateResponse(struct soap *soap, const char *tag, _NShday__GetHolidayDateResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetHolidayDateResponse **)soap_malloc(soap, sizeof(_NShday__GetHolidayDateResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetHolidayDateResponse *)soap_instantiate__NShday__GetHolidayDateResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetHolidayDateResponse ** p = (_NShday__GetHolidayDateResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetHolidayDateResponse, sizeof(_NShday__GetHolidayDateResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetHolidayDate(struct soap *soap, _NShday__GetHolidayDate *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetHolidayDate))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetHolidayDate(struct soap *soap, _NShday__GetHolidayDate *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetHolidayDate);
	if (soap_out_PointerTo_NShday__GetHolidayDate(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetHolidayDate(struct soap *soap, const char *tag, int id, _NShday__GetHolidayDate *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetHolidayDate);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetHolidayDate ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetHolidayDate(struct soap *soap, _NShday__GetHolidayDate **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetHolidayDate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetHolidayDate ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetHolidayDate(struct soap *soap, const char *tag, _NShday__GetHolidayDate **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetHolidayDate **)soap_malloc(soap, sizeof(_NShday__GetHolidayDate *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetHolidayDate *)soap_instantiate__NShday__GetHolidayDate(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetHolidayDate ** p = (_NShday__GetHolidayDate **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetHolidayDate, sizeof(_NShday__GetHolidayDate), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetHolidaysAvailableResponse(struct soap *soap, _NShday__GetHolidaysAvailableResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetHolidaysAvailableResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetHolidaysAvailableResponse(struct soap *soap, _NShday__GetHolidaysAvailableResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetHolidaysAvailableResponse);
	if (soap_out_PointerTo_NShday__GetHolidaysAvailableResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetHolidaysAvailableResponse(struct soap *soap, const char *tag, int id, _NShday__GetHolidaysAvailableResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetHolidaysAvailableResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetHolidaysAvailableResponse ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetHolidaysAvailableResponse(struct soap *soap, _NShday__GetHolidaysAvailableResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetHolidaysAvailableResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetHolidaysAvailableResponse ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetHolidaysAvailableResponse(struct soap *soap, const char *tag, _NShday__GetHolidaysAvailableResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetHolidaysAvailableResponse **)soap_malloc(soap, sizeof(_NShday__GetHolidaysAvailableResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetHolidaysAvailableResponse *)soap_instantiate__NShday__GetHolidaysAvailableResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetHolidaysAvailableResponse ** p = (_NShday__GetHolidaysAvailableResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetHolidaysAvailableResponse, sizeof(_NShday__GetHolidaysAvailableResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetHolidaysAvailable(struct soap *soap, _NShday__GetHolidaysAvailable *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetHolidaysAvailable))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetHolidaysAvailable(struct soap *soap, _NShday__GetHolidaysAvailable *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetHolidaysAvailable);
	if (soap_out_PointerTo_NShday__GetHolidaysAvailable(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetHolidaysAvailable(struct soap *soap, const char *tag, int id, _NShday__GetHolidaysAvailable *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetHolidaysAvailable);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetHolidaysAvailable ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetHolidaysAvailable(struct soap *soap, _NShday__GetHolidaysAvailable **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetHolidaysAvailable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetHolidaysAvailable ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetHolidaysAvailable(struct soap *soap, const char *tag, _NShday__GetHolidaysAvailable **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetHolidaysAvailable **)soap_malloc(soap, sizeof(_NShday__GetHolidaysAvailable *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetHolidaysAvailable *)soap_instantiate__NShday__GetHolidaysAvailable(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetHolidaysAvailable ** p = (_NShday__GetHolidaysAvailable **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetHolidaysAvailable, sizeof(_NShday__GetHolidaysAvailable), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetCountriesAvailableResponse(struct soap *soap, _NShday__GetCountriesAvailableResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetCountriesAvailableResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetCountriesAvailableResponse(struct soap *soap, _NShday__GetCountriesAvailableResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetCountriesAvailableResponse);
	if (soap_out_PointerTo_NShday__GetCountriesAvailableResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetCountriesAvailableResponse(struct soap *soap, const char *tag, int id, _NShday__GetCountriesAvailableResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetCountriesAvailableResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetCountriesAvailableResponse ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetCountriesAvailableResponse(struct soap *soap, _NShday__GetCountriesAvailableResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetCountriesAvailableResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetCountriesAvailableResponse ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetCountriesAvailableResponse(struct soap *soap, const char *tag, _NShday__GetCountriesAvailableResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetCountriesAvailableResponse **)soap_malloc(soap, sizeof(_NShday__GetCountriesAvailableResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetCountriesAvailableResponse *)soap_instantiate__NShday__GetCountriesAvailableResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetCountriesAvailableResponse ** p = (_NShday__GetCountriesAvailableResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetCountriesAvailableResponse, sizeof(_NShday__GetCountriesAvailableResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetCountriesAvailable(struct soap *soap, _NShday__GetCountriesAvailable *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetCountriesAvailable))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetCountriesAvailable(struct soap *soap, _NShday__GetCountriesAvailable *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetCountriesAvailable);
	if (soap_out_PointerTo_NShday__GetCountriesAvailable(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetCountriesAvailable(struct soap *soap, const char *tag, int id, _NShday__GetCountriesAvailable *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetCountriesAvailable);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetCountriesAvailable ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetCountriesAvailable(struct soap *soap, _NShday__GetCountriesAvailable **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetCountriesAvailable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetCountriesAvailable ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetCountriesAvailable(struct soap *soap, const char *tag, _NShday__GetCountriesAvailable **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetCountriesAvailable **)soap_malloc(soap, sizeof(_NShday__GetCountriesAvailable *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetCountriesAvailable *)soap_instantiate__NShday__GetCountriesAvailable(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetCountriesAvailable ** p = (_NShday__GetCountriesAvailable **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetCountriesAvailable, sizeof(_NShday__GetCountriesAvailable), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NScurrconv__ConversionRateResponse(struct soap *soap, _NScurrconv__ConversionRateResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NScurrconv__ConversionRateResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NScurrconv__ConversionRateResponse(struct soap *soap, _NScurrconv__ConversionRateResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NScurrconv__ConversionRateResponse);
	if (soap_out_PointerTo_NScurrconv__ConversionRateResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NScurrconv__ConversionRateResponse(struct soap *soap, const char *tag, int id, _NScurrconv__ConversionRateResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NScurrconv__ConversionRateResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NScurrconv__ConversionRateResponse ** SOAP_FMAC4 soap_get_PointerTo_NScurrconv__ConversionRateResponse(struct soap *soap, _NScurrconv__ConversionRateResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NScurrconv__ConversionRateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NScurrconv__ConversionRateResponse ** SOAP_FMAC4 soap_in_PointerTo_NScurrconv__ConversionRateResponse(struct soap *soap, const char *tag, _NScurrconv__ConversionRateResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NScurrconv__ConversionRateResponse **)soap_malloc(soap, sizeof(_NScurrconv__ConversionRateResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NScurrconv__ConversionRateResponse *)soap_instantiate__NScurrconv__ConversionRateResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NScurrconv__ConversionRateResponse ** p = (_NScurrconv__ConversionRateResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NScurrconv__ConversionRateResponse, sizeof(_NScurrconv__ConversionRateResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NScurrconv__ConversionRate(struct soap *soap, _NScurrconv__ConversionRate *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NScurrconv__ConversionRate))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NScurrconv__ConversionRate(struct soap *soap, _NScurrconv__ConversionRate *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NScurrconv__ConversionRate);
	if (soap_out_PointerTo_NScurrconv__ConversionRate(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NScurrconv__ConversionRate(struct soap *soap, const char *tag, int id, _NScurrconv__ConversionRate *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NScurrconv__ConversionRate);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NScurrconv__ConversionRate ** SOAP_FMAC4 soap_get_PointerTo_NScurrconv__ConversionRate(struct soap *soap, _NScurrconv__ConversionRate **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NScurrconv__ConversionRate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NScurrconv__ConversionRate ** SOAP_FMAC4 soap_in_PointerTo_NScurrconv__ConversionRate(struct soap *soap, const char *tag, _NScurrconv__ConversionRate **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NScurrconv__ConversionRate **)soap_malloc(soap, sizeof(_NScurrconv__ConversionRate *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NScurrconv__ConversionRate *)soap_instantiate__NScurrconv__ConversionRate(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NScurrconv__ConversionRate ** p = (_NScurrconv__ConversionRate **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NScurrconv__ConversionRate, sizeof(_NScurrconv__ConversionRate), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult);
	if (soap_out_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(struct soap *soap, const char *tag, int id, _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult ** SOAP_FMAC4 soap_get_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(struct soap *soap, _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult ** SOAP_FMAC4 soap_in_PointerTo_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(struct soap *soap, const char *tag, _NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult **)soap_malloc(soap, sizeof(_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult *)soap_instantiate__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult ** p = (_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult, sizeof(_NSdeath__SearchDeceasedInfoReturnDataSetResponse_SearchDeceasedInfoReturnDataSetResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToNSdeath__DeceasedInfo(struct soap *soap, NSdeath__DeceasedInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_NSdeath__DeceasedInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToNSdeath__DeceasedInfo(struct soap *soap, NSdeath__DeceasedInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToNSdeath__DeceasedInfo);
	if (soap_out_PointerToNSdeath__DeceasedInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToNSdeath__DeceasedInfo(struct soap *soap, const char *tag, int id, NSdeath__DeceasedInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_NSdeath__DeceasedInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 NSdeath__DeceasedInfo ** SOAP_FMAC4 soap_get_PointerToNSdeath__DeceasedInfo(struct soap *soap, NSdeath__DeceasedInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToNSdeath__DeceasedInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 NSdeath__DeceasedInfo ** SOAP_FMAC4 soap_in_PointerToNSdeath__DeceasedInfo(struct soap *soap, const char *tag, NSdeath__DeceasedInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (NSdeath__DeceasedInfo **)soap_malloc(soap, sizeof(NSdeath__DeceasedInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (NSdeath__DeceasedInfo *)soap_instantiate_NSdeath__DeceasedInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	NSdeath__DeceasedInfo ** p = (NSdeath__DeceasedInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_NSdeath__DeceasedInfo, sizeof(NSdeath__DeceasedInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(struct soap *soap, _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(struct soap *soap, _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult);
	if (soap_out_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(struct soap *soap, const char *tag, int id, _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(struct soap *soap, _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(struct soap *soap, const char *tag, _NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult **)soap_malloc(soap, sizeof(_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult *)soap_instantiate__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult ** p = (_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult, sizeof(_NShday__GetHolidaysForDateRangeResponse_GetHolidaysForDateRangeResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(struct soap *soap, _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(struct soap *soap, _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult);
	if (soap_out_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(struct soap *soap, const char *tag, int id, _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(struct soap *soap, _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(struct soap *soap, const char *tag, _NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult **)soap_malloc(soap, sizeof(_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult *)soap_instantiate__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult ** p = (_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult, sizeof(_NShday__GetHolidaysForMonthResponse_GetHolidaysForMonthResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(struct soap *soap, _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(struct soap *soap, _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult);
	if (soap_out_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(struct soap *soap, const char *tag, int id, _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(struct soap *soap, _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(struct soap *soap, const char *tag, _NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult **)soap_malloc(soap, sizeof(_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult *)soap_instantiate__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult ** p = (_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult, sizeof(_NShday__GetHolidaysForYearResponse_GetHolidaysForYearResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(struct soap *soap, _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(struct soap *soap, _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult);
	if (soap_out_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(struct soap *soap, const char *tag, int id, _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(struct soap *soap, _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(struct soap *soap, const char *tag, _NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult **)soap_malloc(soap, sizeof(_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult *)soap_instantiate__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult ** p = (_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult, sizeof(_NShday__GetHolidaysAvailableResponse_GetHolidaysAvailableResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(struct soap *soap, _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(struct soap *soap, _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult);
	if (soap_out_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(struct soap *soap, const char *tag, int id, _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult ** SOAP_FMAC4 soap_get_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(struct soap *soap, _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult ** SOAP_FMAC4 soap_in_PointerTo_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(struct soap *soap, const char *tag, _NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult **)soap_malloc(soap, sizeof(_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult *)soap_instantiate__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult ** p = (_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult, sizeof(_NShday__GetCountriesAvailableResponse_GetCountriesAvailableResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotime(struct soap *soap, time_t *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_time);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotime(struct soap *soap, time_t *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTotime);
	if (soap_out_PointerTotime(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotime(struct soap *soap, const char *tag, int id, time_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_time);
	if (id < 0)
		return soap->error;
	return soap_out_time(soap, tag, id, *a, type);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTotime(struct soap *soap, time_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTotime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTotime(struct soap *soap, const char *tag, time_t **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (time_t **)soap_malloc(soap, sizeof(time_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_time(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (time_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_time, sizeof(time_t), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__xsd__schema(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xsd__schema(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xsd__schema(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__xsd__schema);
	if (soap_out__xsd__schema(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__xsd__schema(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__xsd__schema);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__xsd__schema(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__xsd__schema(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__xsd__schema(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__xsd__schema, 1, -1, -1);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

/* End of soapC.cpp */
